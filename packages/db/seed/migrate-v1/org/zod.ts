import { z } from 'zod'

import { BatchNames } from '~/seed/migrate-v1/org/outData'
import {
	AttributeSupplementCreateManyInputSchema,
	AttributeSupplementFindManyArgsSchema,
	AttributeSupplementSchema,
	FreeTextCreateManyInputSchema,
	FreeTextFindManyArgsSchema,
	FreeTextSchema,
	OrgEmailCreateManyInputSchema,
	OrgEmailFindManyArgsSchema,
	OrgEmailSchema,
	OrgHoursCreateManyInputSchema,
	OrgHoursFindManyArgsSchema,
	OrgHoursSchema,
	OrgLocationCreateManyInputSchema,
	OrgLocationFindManyArgsSchema,
	OrgLocationSchema,
	OrgLocationServiceCreateManyInputSchema,
	OrgLocationServiceFindManyArgsSchema,
	OrgLocationServiceSchema,
	OrgPhoneCreateManyInputSchema,
	OrgPhoneFindManyArgsSchema,
	OrgPhoneSchema,
	OrgPhotoCreateManyInputSchema,
	OrgPhotoFindManyArgsSchema,
	OrgPhotoSchema,
	OrgServiceCreateManyInputSchema,
	OrgServiceEmailCreateManyInputSchema,
	OrgServiceEmailFindManyArgsSchema,
	OrgServiceEmailSchema,
	OrgServiceFindManyArgsSchema,
	OrgServicePhoneCreateManyInputSchema,
	OrgServicePhoneFindManyArgsSchema,
	OrgServicePhoneSchema,
	OrgServiceSchema,
	OrgServiceTagCreateManyInputSchema,
	OrgServiceTagFindManyArgsSchema,
	OrgServiceTagSchema,
	OrgSocialMediaCreateManyInputSchema,
	OrgSocialMediaFindManyArgsSchema,
	OrgSocialMediaSchema,
	OrgWebsiteCreateManyInputSchema,
	OrgWebsiteFindManyArgsSchema,
	OrgWebsiteLanguageCreateManyInputSchema,
	OrgWebsiteLanguageFindManyArgsSchema,
	OrgWebsiteLanguageSchema,
	OrgWebsiteSchema,
	OrganizationAttributeCreateManyInputSchema,
	OrganizationAttributeFindManyArgsSchema,
	OrganizationAttributeSchema,
	OrganizationAttributeSupplementCreateManyInputSchema,
	OrganizationAttributeSupplementFindManyArgsSchema,
	OrganizationAttributeSupplementSchema,
	OrganizationPermissionCreateManyInputSchema,
	OrganizationPermissionFindManyArgsSchema,
	OrganizationPermissionSchema,
	OutsideAPICreateManyInputSchema,
	OutsideAPIFindManyArgsSchema,
	OutsideAPISchema,
	ServiceAccessAttributeCreateManyInputSchema,
	ServiceAccessAttributeFindManyArgsSchema,
	ServiceAccessAttributeSchema,
	ServiceAccessAttributeSupplementCreateManyInputSchema,
	ServiceAccessAttributeSupplementFindManyArgsSchema,
	ServiceAccessAttributeSupplementSchema,
	ServiceAccessCreateManyInputSchema,
	ServiceAccessFindManyArgsSchema,
	ServiceAccessSchema,
	ServiceAreaCountryCreateManyInputSchema,
	ServiceAreaCountryFindManyArgsSchema,
	ServiceAreaCountrySchema,
	ServiceAreaCreateManyInputSchema,
	ServiceAreaDistCreateManyInputSchema,
	ServiceAreaDistFindManyArgsSchema,
	ServiceAreaDistSchema,
	ServiceAreaFindManyArgsSchema,
	ServiceAreaSchema,
	ServiceAttributeCreateManyInputSchema,
	ServiceAttributeFindManyArgsSchema,
	ServiceAttributeSchema,
	ServiceAttributeSupplementCreateManyInputSchema,
	ServiceAttributeSupplementFindManyArgsSchema,
	ServiceAttributeSupplementSchema,
	TranslationKeyCreateManyInputSchema,
	TranslationKeyFindManyArgsSchema,
	TranslationKeySchema,
	UserPermissionCreateManyInputSchema,
	UserPermissionFindManyArgsSchema,
	UserPermissionSchema,
	UserToOrganizationCreateManyInputSchema,
	UserToOrganizationFindManyArgsSchema,
	UserToOrganizationSchema,
} from '~/zod-schemas'

export const zodBaseSchema = {
	translationKey: TranslationKeySchema,
	freeText: FreeTextSchema,
	orgLocation: OrgLocationSchema,
	orgPhone: OrgPhoneSchema,
	orgEmail: OrgEmailSchema,
	orgWebsite: OrgWebsiteSchema,
	orgWebsiteLanguage: OrgWebsiteLanguageSchema,
	orgSocialMedia: OrgSocialMediaSchema,
	outsideAPI: OutsideAPISchema,
	orgPhoto: OrgPhotoSchema,
	orgHours: OrgHoursSchema,
	orgService: OrgServiceSchema,
	serviceAccess: ServiceAccessSchema,
	attributeSupplement: AttributeSupplementSchema,
	orgServicePhone: OrgServicePhoneSchema,
	orgServiceEmail: OrgServiceEmailSchema,
	orgLocationService: OrgLocationServiceSchema,
	orgServiceTag: OrgServiceTagSchema,
	organizationAttribute: OrganizationAttributeSchema,
	serviceAttribute: ServiceAttributeSchema,
	serviceAccessAttribute: ServiceAccessAttributeSchema,
	serviceArea: ServiceAreaSchema,
	serviceAreaCountry: ServiceAreaCountrySchema,
	serviceAreaDist: ServiceAreaDistSchema,
	organizationAttributeSupplement: OrganizationAttributeSupplementSchema,
	serviceAttributeSupplement: ServiceAttributeSupplementSchema,
	serviceAccessAttributeSupplement: ServiceAccessAttributeSupplementSchema,
	userToOrganization: UserToOrganizationSchema,
	userPermission: UserPermissionSchema,
	organizationPermission: OrganizationPermissionSchema,
} as const
export type ZodBaseSchema = {
	[K in keyof typeof zodBaseSchema]: K extends keyof typeof zodBaseSchema
		? z.infer<(typeof zodBaseSchema)[K]>
		: never
}

export const zodInput = {
	translationKey: TranslationKeyCreateManyInputSchema,
	freeText: FreeTextCreateManyInputSchema,
	orgLocation: OrgLocationCreateManyInputSchema,
	orgPhone: OrgPhoneCreateManyInputSchema,
	orgEmail: OrgEmailCreateManyInputSchema,
	orgWebsite: OrgWebsiteCreateManyInputSchema,
	orgWebsiteLanguage: OrgWebsiteLanguageCreateManyInputSchema,
	orgSocialMedia: OrgSocialMediaCreateManyInputSchema,
	outsideAPI: OutsideAPICreateManyInputSchema,
	orgPhoto: OrgPhotoCreateManyInputSchema,
	orgHours: OrgHoursCreateManyInputSchema,
	orgService: OrgServiceCreateManyInputSchema,
	serviceAccess: ServiceAccessCreateManyInputSchema,
	attributeSupplement: AttributeSupplementCreateManyInputSchema,
	orgServicePhone: OrgServicePhoneCreateManyInputSchema,
	orgServiceEmail: OrgServiceEmailCreateManyInputSchema,
	orgLocationService: OrgLocationServiceCreateManyInputSchema,
	orgServiceTag: OrgServiceTagCreateManyInputSchema,
	organizationAttribute: OrganizationAttributeCreateManyInputSchema,
	serviceAttribute: ServiceAttributeCreateManyInputSchema,
	serviceAccessAttribute: ServiceAccessAttributeCreateManyInputSchema,
	serviceArea: ServiceAreaCreateManyInputSchema,
	serviceAreaCountry: ServiceAreaCountryCreateManyInputSchema,
	serviceAreaDist: ServiceAreaDistCreateManyInputSchema,
	organizationAttributeSupplement: OrganizationAttributeSupplementCreateManyInputSchema,
	serviceAttributeSupplement: ServiceAttributeSupplementCreateManyInputSchema,
	serviceAccessAttributeSupplement: ServiceAccessAttributeSupplementCreateManyInputSchema,
	userToOrganization: UserToOrganizationCreateManyInputSchema,
	userPermission: UserPermissionCreateManyInputSchema,
	organizationPermission: OrganizationPermissionCreateManyInputSchema,
} as const
export type ZodInputs = {
	-readonly [P in BatchNames]: P extends BatchNames ? z.infer<(typeof zodInput)[P]>[] : never
}
export type ZodInput<K extends BatchNames> = K extends BatchNames ? z.infer<(typeof zodInput)[K]> : never
export const zodFindMany = {
	translationKey: TranslationKeyFindManyArgsSchema,
	freeText: FreeTextFindManyArgsSchema,
	orgLocation: OrgLocationFindManyArgsSchema,
	orgPhone: OrgPhoneFindManyArgsSchema,
	orgEmail: OrgEmailFindManyArgsSchema,
	orgWebsite: OrgWebsiteFindManyArgsSchema,
	orgWebsiteLanguage: OrgWebsiteLanguageFindManyArgsSchema,
	orgSocialMedia: OrgSocialMediaFindManyArgsSchema,
	outsideAPI: OutsideAPIFindManyArgsSchema,
	orgPhoto: OrgPhotoFindManyArgsSchema,
	orgHours: OrgHoursFindManyArgsSchema,
	orgService: OrgServiceFindManyArgsSchema,
	serviceAccess: ServiceAccessFindManyArgsSchema,
	attributeSupplement: AttributeSupplementFindManyArgsSchema,
	orgServicePhone: OrgServicePhoneFindManyArgsSchema,
	orgServiceEmail: OrgServiceEmailFindManyArgsSchema,
	orgLocationService: OrgLocationServiceFindManyArgsSchema,
	orgServiceTag: OrgServiceTagFindManyArgsSchema,
	organizationAttribute: OrganizationAttributeFindManyArgsSchema,
	serviceAttribute: ServiceAttributeFindManyArgsSchema,
	serviceAccessAttribute: ServiceAccessAttributeFindManyArgsSchema,
	serviceArea: ServiceAreaFindManyArgsSchema,
	serviceAreaCountry: ServiceAreaCountryFindManyArgsSchema,
	serviceAreaDist: ServiceAreaDistFindManyArgsSchema,
	organizationAttributeSupplement: OrganizationAttributeSupplementFindManyArgsSchema,
	serviceAttributeSupplement: ServiceAttributeSupplementFindManyArgsSchema,
	serviceAccessAttributeSupplement: ServiceAccessAttributeSupplementFindManyArgsSchema,
	userToOrganization: UserToOrganizationFindManyArgsSchema,
	userPermission: UserPermissionFindManyArgsSchema,
	organizationPermission: OrganizationPermissionFindManyArgsSchema,
} as const
export type ZodFindMany = {
	[K in keyof typeof zodFindMany]: K extends keyof typeof zodFindMany
		? z.infer<(typeof zodFindMany)[K]>
		: never
}
