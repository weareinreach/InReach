// schemas/actions/setSlugAndPublishAction.js

import { groq } from "next-sanity";
import { useState, useEffect } from "react";
import {
	DocumentActionComponent,
	useDocumentOperation,
	SanityDocument,
} from "sanity";
import { getClient } from "../../lib/sanity.server";
import slugify from "slugify";
import { getNavByPage, GetNavByPageResult } from "../queries";
import { DateTime } from "luxon";

// Generated by https://quicktype.io

type MainPageIDQuery = {
	frontpage: {
		_id: string;
	};
};

interface PageDraft<PageType extends "post" | "page"> extends SanityDocument {
	_type: PageType;
	metadata: {
		_type: "metadata";
		publishedAt: string;
		slug: string;
		title: string;
	};
}

export const SetSlugAndPublishAction: DocumentActionComponent = (props) => {
	const { patch, publish } = useDocumentOperation(props.id, props.type);
	const [isPublishing, setIsPublishing] = useState(false);
	const [popoverOpen, setPopoverOpen] = useState(false);
	const status = { message: "" };

	useEffect(() => {
		// if the isPublishing state was set to true and the draft has changed
		// to become `null` the document has been published
		if (isPublishing && !props.draft) {
			setIsPublishing(false);
		}
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [props.draft]);

	return {
		disabled: publish.disabled,
		label: isPublishing ? "Publishingâ€¦" : "Publish",
		onHandle: async () => {
			// No draft? Nothing to do..
			if (!props.draft) {
				status.message = "Nothing to publish";
				return setPopoverOpen(true);
			}
			// This will update the button text
			setIsPublishing(true);

			const client = getClient(false);
			let slug = "";
			/// Set the slug based on the document type
			switch (props.type) {
				case "page":
					/* Get the id of the page that is being published. */
					const pageId = props.id;

					/* Get the id of the main page setting */
					const mainPageQuery = groq`
					*[_type == 'site-config'][0] {
					  frontpage -> {
					    _id
					  }
					}
					`;
					const queryResult = await client.fetch<MainPageIDQuery>(
						mainPageQuery
					);
					const mainPageId = queryResult.frontpage._id;
					if (pageId === mainPageId) {
						slug = "/";
						break;
					}
					const pageNav = await client.fetch<GetNavByPageResult>(getNavByPage, {
						id: pageId,
					});
					console.log("page nav", pageNav);
					const { menuLabel, subMenuLabel } = pageNav[0];
					if (!menuLabel) {
						status.message = "Menu items have not been set!";
						return setPopoverOpen(true);
					}

					slug = `/${slugify(menuLabel, { lower: true })}/${slugify(
						subMenuLabel ?? "",
						{ lower: true }
					)}`;

					break;

				case "post":
					const draft = props.draft as PageDraft<"post">;

					const { publishedAt } = draft.metadata;

					const publishDate = DateTime.fromISO(publishedAt)
						.setZone("America/New_York")
						.toObject();

					slug = `/blog/${publishDate.year}/${publishDate.month}/${
						publishDate.day
					}/${slugify(draft.metadata.title, { lower: true, strict: true })}`;
					break;
				default:
					/// Doing nothing? Consider deleting this switch statement to simplify your code.
					break;
			}
			console.log(slug);
			patch.execute([{ set: { metadata: { ...props.draft.metadata, slug } } }]);
			// Perform the publish
			publish.execute();

			// Signal that the action is completed
			props.onComplete();
		},
		dialog: popoverOpen && {
			type: "popover",
			onClose: props.onComplete,
			content: status.message,
		},
	};
};
