{
	"Typescipt Barrel File": {
		"scope": "typescript,typescriptreact",
		"prefix": "!barrel",
		"body": [
			"// codegen:start {preset: barrel, include: ${1|./*.ts,./*.tsx,./*.ts\\, exclude: ./file.ts,./*.tsx\\, exclude: ./file.tsx|}}",
			"// codegen:end"
		],
		"description": "Code to have ESLint generate barrel file"
	},
	"Next.js SSR Page with i18n preload": {
		"prefix": "!ssrpagei18",
		"body": [
			"import { trpcServerClient } from '@weareinreach/api/trpc'",
			"import { GetServerSideProps, NextPage } from 'next'",
			"import { useTranslation } from 'next-i18next'",
			"import { serverSideTranslations } from 'next-i18next/serverSideTranslations'",
			"",
			"import { api } from '~/utils/api'",
			"",
			"const ${1:$TM_FILENAME_BASE}: NextPage = () => {",
			"	const { t } = useTranslation()",
			"",
			"	return <></>",
			"}",
			"",
			"export const getServerSideProps: GetServerSideProps = async ({ req, res, locale }) => {",
			"	const ssg = await trpcServerClient()",
			"",
			"	const props = {",
			"		trpcState: ssg.dehydrate(),",
			"		...(await serverSideTranslations(locale as string, ['common'])),",
			"	}",
			"",
			"	return {",
			"		props,",
			"	}",
			"}",
			"",
			"export default ${1:$TM_FILENAME_BASE}",
			""
		],
		"description": "Next.js SSR Page with i18n preload"
	}

	// Place your âœ¨ InReach (root) workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}
