diff --git a/dist/zod-prisma.cjs.development.js b/dist/zod-prisma.cjs.development.js
index fb04fd45d6e6d9407ed9ab0b13533b05f3ae4d08..b75f4aa8ea9602757f3b1707a06905286dc73217 100644
--- a/dist/zod-prisma.cjs.development.js
+++ b/dist/zod-prisma.cjs.development.js
@@ -33,10 +33,8 @@ const useModelNames = ({
     if (modelCase === 'camelCase') {
       name = name.slice(0, 1).toLowerCase() + name.slice(1);
     }
-
     return `${prefix}${name}${modelSuffix}`;
   };
-
   return {
     modelName: name => formatModelName(name, relationModel === 'default' ? '_' : ''),
     relatedModelName: name => formatModelName(relationModel === 'default' ? name.toString() : `Related${name.toString()}`)
@@ -57,24 +55,21 @@ const dotSlash = input => {
 
 const getJSDocs = docString => {
   const lines = [];
-
   if (docString) {
     const docLines = docString.split('\n').filter(dL => !dL.trimStart().startsWith('@zod'));
-
     if (docLines.length) {
       lines.push('/**');
       docLines.forEach(dL => lines.push(` * ${dL}`));
       lines.push(' */');
     }
   }
-
   return lines;
 };
-const getZodDocElements = docString => docString.split('\n').filter(line => line.trimStart().startsWith('@zod')).map(line => line.trimStart().slice(4)).flatMap(line => // Array.from(line.matchAll(/\.([^().]+\(.*?\))/g), (m) => m.slice(1)).flat()
+const getZodDocElements = docString => docString.split('\n').filter(line => line.trimStart().startsWith('@zod')).map(line => line.trimStart().slice(4)).flatMap(line =>
+// Array.from(line.matchAll(/\.([^().]+\(.*?\))/g), (m) => m.slice(1)).flat()
 chunk(parenthesis.parse(line), 2).slice(0, -1).map(([each, contents]) => each.replace(/\)?\./, '') + `${parenthesis.stringify(contents)})`));
 const computeCustomSchema = docString => {
   var _getZodDocElements$fi;
-
   return (_getZodDocElements$fi = getZodDocElements(docString).find(modifier => modifier.startsWith('custom('))) == null ? void 0 : _getZodDocElements$fi.slice(7).slice(0, -1);
 };
 const computeModifiers = docString => {
@@ -84,43 +79,34 @@ const computeModifiers = docString => {
 const getZodConstructor = (field, getRelatedModelName = name => name.toString()) => {
   let zodType = 'z.unknown()';
   let extraModifiers = [''];
-
   if (field.kind === 'scalar') {
     switch (field.type) {
       case 'String':
         zodType = 'z.string()';
         break;
-
       case 'Int':
         zodType = 'z.number()';
         extraModifiers.push('int()');
         break;
-
       case 'BigInt':
         zodType = 'z.bigint()';
         break;
-
       case 'DateTime':
         zodType = 'z.date()';
         break;
-
       case 'Float':
         zodType = 'z.number()';
         break;
-
       case 'Decimal':
         zodType = 'z.number()';
         break;
-
       case 'Json':
         zodType = 'jsonSchema';
         break;
-
       case 'Boolean':
         zodType = 'z.boolean()';
         break;
       // TODO: Proper type for bytes fields
-
       case 'Bytes':
         zodType = 'z.unknown()';
         break;
@@ -130,18 +116,14 @@ const getZodConstructor = (field, getRelatedModelName = name => name.toString())
   } else if (field.kind === 'object') {
     zodType = getRelatedModelName(field.type);
   }
-
   if (field.isList) extraModifiers.push('array()');
-
   if (field.documentation) {
     var _computeCustomSchema;
-
     zodType = (_computeCustomSchema = computeCustomSchema(field.documentation)) != null ? _computeCustomSchema : zodType;
     extraModifiers.push(...computeModifiers(field.documentation));
   }
-
-  if (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()'); // if (field.hasDefaultValue) extraModifiers.push('optional()')
-
+  if (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()');
+  // if (field.hasDefaultValue) extraModifiers.push('optional()')
   return `${zodType}${extraModifiers.join('.')}`;
 };
 
@@ -158,7 +140,6 @@ const writeImportsForModel = (model, sourceFile, config, {
     namespaceImport: 'z',
     moduleSpecifier: 'zod'
   }];
-
   if (config.imports) {
     importList.push({
       kind: tsMorph.StructureKind.ImportDeclaration,
@@ -166,7 +147,6 @@ const writeImportsForModel = (model, sourceFile, config, {
       moduleSpecifier: dotSlash(path__default["default"].relative(outputPath, path__default["default"].resolve(path__default["default"].dirname(schemaPath), config.imports)))
     });
   }
-
   if (config.useDecimalJs && model.fields.some(f => f.type === 'Decimal')) {
     importList.push({
       kind: tsMorph.StructureKind.ImportDeclaration,
@@ -174,23 +154,19 @@ const writeImportsForModel = (model, sourceFile, config, {
       moduleSpecifier: 'decimal.js'
     });
   }
-
   const enumFields = model.fields.filter(f => f.kind === 'enum');
   const relationFields = model.fields.filter(f => f.kind === 'object');
   const relativePath = path__default["default"].relative(outputPath, clientPath);
-
   if (enumFields.length > 0) {
     importList.push({
       kind: tsMorph.StructureKind.ImportDeclaration,
       isTypeOnly: enumFields.length === 0,
       moduleSpecifier: dotSlash(relativePath),
-      namedImports: enumFields.map(f => f.type)
+      namedImports: Array.from(new Set(enumFields.map(f => f.type)))
     });
   }
-
   if (config.relationModel !== false && relationFields.length > 0) {
     const filteredFields = relationFields.filter(f => f.type !== model.name);
-
     if (filteredFields.length > 0) {
       importList.push({
         kind: tsMorph.StructureKind.ImportDeclaration,
@@ -199,7 +175,6 @@ const writeImportsForModel = (model, sourceFile, config, {
       });
     }
   }
-
   sourceFile.addImportDeclarations(importList);
 };
 const writeTypeSpecificSchemas = (model, sourceFile, config, _prismaOptions) => {
@@ -209,7 +184,6 @@ const writeTypeSpecificSchemas = (model, sourceFile, config, _prismaOptions) =>
       writeArray(writer, ['// Helper schema for JSON fields', `type Literal = boolean | number | string${config.prismaJsonNullability ? '' : '| null'}`, 'type Json = Literal | { [key: string]: Json } | Json[]', `const literalSchema = z.union([z.string(), z.number(), z.boolean()${config.prismaJsonNullability ? '' : ', z.null()'}])`, 'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))']);
     });
   }
-
   if (config.useDecimalJs && model.fields.some(f => f.type === 'Decimal')) {
     sourceFile.addStatements(writer => {
       writer.newLine();
@@ -227,7 +201,6 @@ const generateSchemaForModel = (model, sourceFile, config, _prismaOptions) => {
     leadingTrivia: writer => writer.blankLineIfLastNot(),
     declarations: [{
       name: modelName(model.name),
-
       initializer(writer) {
         writer.write('z.object(').inlineBlock(() => {
           model.fields.filter(f => f.kind !== 'object').forEach(field => {
@@ -236,7 +209,6 @@ const generateSchemaForModel = (model, sourceFile, config, _prismaOptions) => {
           });
         }).write(')');
       }
-
     }]
   });
 };
@@ -263,7 +235,6 @@ const generateRelatedSchemaForModel = (model, sourceFile, config, _prismaOptions
     declarations: [{
       name: relatedModelName(model.name),
       type: `z.ZodSchema<Complete${model.name}>`,
-
       initializer(writer) {
         writer.write(`z.lazy(() => ${modelName(model.name)}.extend(`).inlineBlock(() => {
           relationFields.forEach(field => {
@@ -272,7 +243,6 @@ const generateRelatedSchemaForModel = (model, sourceFile, config, _prismaOptions
           });
         }).write('))');
       }
-
     }]
   });
 };
@@ -297,7 +267,6 @@ generatorHelper.generatorHandler({
       defaultOutput: 'zod'
     };
   },
-
   onGenerate(options) {
     const project = new tsMorph.Project();
     const models = options.dmmf.datamodel.models;
@@ -336,6 +305,5 @@ generatorHelper.generatorHandler({
     });
     return project.save();
   }
-
 });
 //# sourceMappingURL=zod-prisma.cjs.development.js.map
diff --git a/dist/zod-prisma.cjs.development.js.map b/dist/zod-prisma.cjs.development.js.map
index c2ac3f57954c438381edb0eaaa01b3e171fcedea..4b58c7dd4a82d85c10b861e2211696bfeeb8667f 100644
--- a/dist/zod-prisma.cjs.development.js.map
+++ b/dist/zod-prisma.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'jsonSchema'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.nativeEnum(${field.type})`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\n\tconst enumFields = model.fields.filter((f) => f.kind === 'enum')\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\tconst relativePath = path.relative(outputPath, clientPath)\n\n\tif (enumFields.length > 0) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tisTypeOnly: enumFields.length === 0,\n\t\t\tmoduleSpecifier: dotSlash(relativePath),\n\t\t\tnamedImports: enumFields.map((f) => f.type),\n\t\t})\n\t}\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (model.fields.some((f) => f.type === 'Json')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for JSON fields',\n\t\t\t\t`type Literal = boolean | number | string${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : '| null'\n\t\t\t\t}`,\n\t\t\t\t'type Json = Literal | { [key: string]: Json } | Json[]',\n\t\t\t\t`const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : ', z.null()'\n\t\t\t\t}])`,\n\t\t\t\t'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n\t\t\t])\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(`${field.name}: ${getZodConstructor(field)}`)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { populateModelFile, generateBarrelFile } from './generator'\nimport { Project } from 'ts-morph'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","needsRelatedModel","model","config","fields","some","field","kind","chunk","input","size","reduce","arr","item","idx","dotSlash","converted","replace","includes","split","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","each","contents","stringify","computeCustomSchema","find","modifier","computeModifiers","getZodConstructor","getRelatedModelName","zodType","extraModifiers","type","isList","documentation","isRequired","join","writeImportsForModel","sourceFile","schemaPath","outputPath","clientPath","importList","StructureKind","ImportDeclaration","namespaceImport","moduleSpecifier","path","relative","resolve","dirname","f","namedImports","enumFields","relationFields","relativePath","isTypeOnly","filteredFields","Array","from","Set","addImportDeclarations","writeTypeSpecificSchemas","_prismaOptions","addStatements","generateSchemaForModel","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateRelatedSchemaForModel","addInterface","extends","properties","hasQuestionToken","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","dmmf","datamodel","generator","output","value","otherGenerators","provider","results","safeParse","success","Error","data","createSourceFile","overwrite","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","save"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'jsonSchema'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.nativeEnum(${field.type})`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\n\tconst enumFields = model.fields.filter((f) => f.kind === 'enum')\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\tconst relativePath = path.relative(outputPath, clientPath)\n\n\tif (enumFields.length > 0) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tisTypeOnly: enumFields.length === 0,\n\t\t\tmoduleSpecifier: dotSlash(relativePath),\n\t\t\tnamedImports: Array.from(new Set(enumFields.map((f) => f.type))),\n\t\t})\n\t}\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (model.fields.some((f) => f.type === 'Json')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for JSON fields',\n\t\t\t\t`type Literal = boolean | number | string${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : '| null'\n\t\t\t\t}`,\n\t\t\t\t'type Json = Literal | { [key: string]: Json } | Json[]',\n\t\t\t\t`const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : ', z.null()'\n\t\t\t\t}])`,\n\t\t\t\t'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n\t\t\t])\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(`${field.name}: ${getZodConstructor(field)}`)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { populateModelFile, generateBarrelFile } from './generator'\nimport { Project } from 'ts-morph'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","needsRelatedModel","model","config","fields","some","field","kind","chunk","input","size","reduce","arr","item","idx","dotSlash","converted","replace","includes","split","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","each","contents","stringify","computeCustomSchema","find","modifier","computeModifiers","getZodConstructor","getRelatedModelName","zodType","extraModifiers","type","isList","documentation","isRequired","join","writeImportsForModel","sourceFile","schemaPath","outputPath","clientPath","importList","StructureKind","ImportDeclaration","namespaceImport","moduleSpecifier","path","relative","resolve","dirname","f","namedImports","enumFields","relationFields","relativePath","isTypeOnly","Array","from","Set","filteredFields","addImportDeclarations","writeTypeSpecificSchemas","_prismaOptions","addStatements","generateSchemaForModel","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateRelatedSchemaForModel","addInterface","extends","properties","hasQuestionToken","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","dmmf","datamodel","generator","output","value","otherGenerators","provider","results","safeParse","success","Error","data","createSourceFile","overwrite","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","save"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/zod-prisma.cjs.production.min.js b/dist/zod-prisma.cjs.production.min.js
index 9720e85802156e5765b0cc277a5c3dbed9b5a2e8..3d1fd4af5c3edd1dbf88cb9b8b70f78b999cb414 100644
--- a/dist/zod-prisma.cjs.production.min.js
+++ b/dist/zod-prisma.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";var e=require("@prisma/generator-helper"),t=require("typescript"),a=require("zod"),r=require("path"),i=require("ts-morph"),n=require("parenthesis");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var l=o(r);const s=a.z.enum(["true","false"]).transform((e=>JSON.parse(e))),c=a.z.object({relationModel:s.default("true").or(a.z.literal("default")),modelSuffix:a.z.string().default("Model"),modelCase:a.z.enum(["PascalCase","camelCase"]).default("PascalCase"),useDecimalJs:s.default("false"),imports:a.z.string().optional(),prismaJsonNullability:s.default("true")}),d=(e,t,a=!0)=>t.forEach((t=>e.write(t).conditionalNewLine(a))),m=({modelCase:e,modelSuffix:t,relationModel:a})=>{const r=(a,r="")=>("camelCase"===e&&(a=a.slice(0,1).toLowerCase()+a.slice(1)),`${r}${a}${t}`);return{modelName:e=>r(e,"default"===a?"_":""),relatedModelName:e=>r("default"===a?e.toString():`Related${e.toString()}`)}},u=e=>{const t=e.replace(/^\\\\\?\\/,"").replace(/\\/g,"/").replace(/\/\/+/g,"/");return t.includes("/node_modules/")?t.split("/node_modules/").slice(-1)[0]:t.startsWith("../")?t:"./"+t},p=e=>{const t=[];if(e){const a=e.split("\n").filter((e=>!e.trimStart().startsWith("@zod")));a.length&&(t.push("/**"),a.forEach((e=>t.push(` * ${e}`))),t.push(" */"))}return t},f=e=>e.split("\n").filter((e=>e.trimStart().startsWith("@zod"))).map((e=>e.trimStart().slice(4))).flatMap((e=>{return(t=n.parse(e),t.reduce(((e,t,a)=>a%2==0?[...e,[t]]:[...e.slice(0,-1),[...e.slice(-1)[0],t]]),[])).slice(0,-1).map((([e,t])=>e.replace(/\)?\./,"")+`${n.stringify(t)})`));var t})),h=(e,t=(e=>e.toString()))=>{let a="z.unknown()",r=[""];if("scalar"===e.kind)switch(e.type){case"String":a="z.string()";break;case"Int":a="z.number()",r.push("int()");break;case"BigInt":a="z.bigint()";break;case"DateTime":a="z.date()";break;case"Float":case"Decimal":a="z.number()";break;case"Json":a="jsonSchema";break;case"Boolean":a="z.boolean()";break;case"Bytes":a="z.unknown()"}else"enum"===e.kind?a=`z.nativeEnum(${e.type})`:"object"===e.kind&&(a=t(e.type));var i,n,o;return e.isList&&r.push("array()"),e.documentation&&(a=null!=(i=null==(n=f(e.documentation).find((e=>e.startsWith("custom("))))?void 0:n.slice(7).slice(0,-1))?i:a,r.push(...(o=e.documentation,f(o).filter((e=>!e.startsWith("custom(")))))),e.isRequired||"Json"===e.type||r.push("nullish()"),`${a}${r.join(".")}`};e.generatorHandler({onManifest:()=>({version:"0.5.4",prettyName:"Zod Schemas",defaultOutput:"zod"}),onGenerate(e){const a=new i.Project,r=e.dmmf.datamodel.models,{schemaPath:n}=e,o=e.generator.output.value,s=e.otherGenerators.find((e=>"prisma-client-js"===e.provider.value)).output.value,f=c.safeParse(e.generator.config);if(!f.success)throw new Error("Incorrect config provided. Please check the values you provided and try again.");const z=f.data,S={clientPath:s,outputPath:o,schemaPath:n},y=a.createSourceFile(`${o}/index.ts`,{},{overwrite:!0});return((e,t)=>{e.forEach((e=>t.addExportDeclaration({moduleSpecifier:`./${e.name.toLowerCase()}`})))})(r,y),y.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:t.SemicolonPreference.Remove}),r.forEach((e=>{const r=a.createSourceFile(`${o}/${e.name.toLowerCase()}.ts`,{},{overwrite:!0});((e,t,a,r)=>{((e,t,a,{schemaPath:r,outputPath:n,clientPath:o})=>{const{relatedModelName:s}=m(a),c=[{kind:i.StructureKind.ImportDeclaration,namespaceImport:"z",moduleSpecifier:"zod"}];a.imports&&c.push({kind:i.StructureKind.ImportDeclaration,namespaceImport:"imports",moduleSpecifier:u(l.default.relative(n,l.default.resolve(l.default.dirname(r),a.imports)))}),a.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&c.push({kind:i.StructureKind.ImportDeclaration,namedImports:["Decimal"],moduleSpecifier:"decimal.js"});const d=e.fields.filter((e=>"enum"===e.kind)),p=e.fields.filter((e=>"object"===e.kind)),f=l.default.relative(n,o);if(d.length>0&&c.push({kind:i.StructureKind.ImportDeclaration,isTypeOnly:0===d.length,moduleSpecifier:u(f),namedImports:d.map((e=>e.type))}),!1!==a.relationModel&&p.length>0){const t=p.filter((t=>t.type!==e.name));t.length>0&&c.push({kind:i.StructureKind.ImportDeclaration,moduleSpecifier:"./index",namedImports:Array.from(new Set(t.flatMap((e=>[`Complete${e.type}`,s(e.type)]))))})}t.addImportDeclarations(c)})(e,t,a,r),((e,t,a,r)=>{e.fields.some((e=>"Json"===e.type))&&t.addStatements((e=>{e.newLine(),d(e,["// Helper schema for JSON fields","type Literal = boolean | number | string"+(a.prismaJsonNullability?"":"| null"),"type Json = Literal | { [key: string]: Json } | Json[]",`const literalSchema = z.union([z.string(), z.number(), z.boolean()${a.prismaJsonNullability?"":", z.null()"}])`,"const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))"])})),a.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&t.addStatements((e=>{e.newLine(),d(e,["// Helper schema for Decimal fields","z",".instanceof(Decimal)",".or(z.string())",".or(z.number())",".refine((value) => {","  try {","    return new Decimal(value);","  } catch (error) {","    return false;","  }","})",".transform((value) => new Decimal(value));"])}))})(e,t,a),((e,t,a,r)=>{const{modelName:n}=m(a);t.addVariableStatement({declarationKind:i.VariableDeclarationKind.Const,isExported:!0,leadingTrivia:e=>e.blankLineIfLastNot(),declarations:[{name:n(e.name),initializer(t){t.write("z.object(").inlineBlock((()=>{e.fields.filter((e=>"object"!==e.kind)).forEach((e=>{d(t,p(e.documentation)),t.write(`${e.name}: ${h(e)}`).write(",").newLine()}))})).write(")")}}]})})(e,t,a),((e,t)=>e.fields.some((e=>"object"===e.kind))&&!1!==t.relationModel)(e,a)&&((e,t,a,r)=>{const{modelName:n,relatedModelName:o}=m(a),l=e.fields.filter((e=>"object"===e.kind));t.addInterface({name:`Complete${e.name}`,isExported:!0,extends:[`z.infer<typeof ${n(e.name)}>`],properties:l.map((e=>({hasQuestionToken:!e.isRequired,name:e.name,type:`Complete${e.type}${e.isList?"[]":""}${e.isRequired?"":" | null"}`})))}),t.addStatements((t=>d(t,["","/**",` * ${o(e.name)} contains all relations on your model in addition to the scalars`," *"," * NOTE: Lazy required in case of potential circular dependencies within schema"," */"]))),t.addVariableStatement({declarationKind:i.VariableDeclarationKind.Const,isExported:!0,declarations:[{name:o(e.name),type:`z.ZodSchema<Complete${e.name}>`,initializer(t){t.write(`z.lazy(() => ${n(e.name)}.extend(`).inlineBlock((()=>{l.forEach((e=>{d(t,p(e.documentation)),t.write(`${e.name}: ${h(e,o)}`).write(",").newLine()}))})).write("))")}}]})})(e,t,a)})(e,r,z,S),r.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:t.SemicolonPreference.Remove})})),a.save()}});
+"use strict";var e=require("@prisma/generator-helper"),t=require("typescript"),a=require("zod"),r=require("path"),i=require("ts-morph"),n=require("parenthesis");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var l=o(r);const s=a.z.enum(["true","false"]).transform((e=>JSON.parse(e))),c=a.z.object({relationModel:s.default("true").or(a.z.literal("default")),modelSuffix:a.z.string().default("Model"),modelCase:a.z.enum(["PascalCase","camelCase"]).default("PascalCase"),useDecimalJs:s.default("false"),imports:a.z.string().optional(),prismaJsonNullability:s.default("true")}),d=(e,t,a=!0)=>t.forEach((t=>e.write(t).conditionalNewLine(a))),m=({modelCase:e,modelSuffix:t,relationModel:a})=>{const r=(a,r="")=>("camelCase"===e&&(a=a.slice(0,1).toLowerCase()+a.slice(1)),`${r}${a}${t}`);return{modelName:e=>r(e,"default"===a?"_":""),relatedModelName:e=>r("default"===a?e.toString():`Related${e.toString()}`)}},u=e=>{const t=e.replace(/^\\\\\?\\/,"").replace(/\\/g,"/").replace(/\/\/+/g,"/");return t.includes("/node_modules/")?t.split("/node_modules/").slice(-1)[0]:t.startsWith("../")?t:"./"+t},p=e=>{const t=[];if(e){const a=e.split("\n").filter((e=>!e.trimStart().startsWith("@zod")));a.length&&(t.push("/**"),a.forEach((e=>t.push(` * ${e}`))),t.push(" */"))}return t},f=e=>e.split("\n").filter((e=>e.trimStart().startsWith("@zod"))).map((e=>e.trimStart().slice(4))).flatMap((e=>{return(t=n.parse(e),t.reduce(((e,t,a)=>a%2==0?[...e,[t]]:[...e.slice(0,-1),[...e.slice(-1)[0],t]]),[])).slice(0,-1).map((([e,t])=>e.replace(/\)?\./,"")+`${n.stringify(t)})`));var t})),h=(e,t=(e=>e.toString()))=>{let a="z.unknown()",r=[""];if("scalar"===e.kind)switch(e.type){case"String":a="z.string()";break;case"Int":a="z.number()",r.push("int()");break;case"BigInt":a="z.bigint()";break;case"DateTime":a="z.date()";break;case"Float":case"Decimal":a="z.number()";break;case"Json":a="jsonSchema";break;case"Boolean":a="z.boolean()";break;case"Bytes":a="z.unknown()"}else"enum"===e.kind?a=`z.nativeEnum(${e.type})`:"object"===e.kind&&(a=t(e.type));var i,n,o;return e.isList&&r.push("array()"),e.documentation&&(a=null!=(i=null==(n=f(e.documentation).find((e=>e.startsWith("custom("))))?void 0:n.slice(7).slice(0,-1))?i:a,r.push(...(o=e.documentation,f(o).filter((e=>!e.startsWith("custom(")))))),e.isRequired||"Json"===e.type||r.push("nullish()"),`${a}${r.join(".")}`};e.generatorHandler({onManifest:()=>({version:"0.5.4",prettyName:"Zod Schemas",defaultOutput:"zod"}),onGenerate(e){const a=new i.Project,r=e.dmmf.datamodel.models,{schemaPath:n}=e,o=e.generator.output.value,s=e.otherGenerators.find((e=>"prisma-client-js"===e.provider.value)).output.value,f=c.safeParse(e.generator.config);if(!f.success)throw new Error("Incorrect config provided. Please check the values you provided and try again.");const S=f.data,z={clientPath:s,outputPath:o,schemaPath:n},y=a.createSourceFile(`${o}/index.ts`,{},{overwrite:!0});return((e,t)=>{e.forEach((e=>t.addExportDeclaration({moduleSpecifier:`./${e.name.toLowerCase()}`})))})(r,y),y.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:t.SemicolonPreference.Remove}),r.forEach((e=>{const r=a.createSourceFile(`${o}/${e.name.toLowerCase()}.ts`,{},{overwrite:!0});((e,t,a,r)=>{((e,t,a,{schemaPath:r,outputPath:n,clientPath:o})=>{const{relatedModelName:s}=m(a),c=[{kind:i.StructureKind.ImportDeclaration,namespaceImport:"z",moduleSpecifier:"zod"}];a.imports&&c.push({kind:i.StructureKind.ImportDeclaration,namespaceImport:"imports",moduleSpecifier:u(l.default.relative(n,l.default.resolve(l.default.dirname(r),a.imports)))}),a.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&c.push({kind:i.StructureKind.ImportDeclaration,namedImports:["Decimal"],moduleSpecifier:"decimal.js"});const d=e.fields.filter((e=>"enum"===e.kind)),p=e.fields.filter((e=>"object"===e.kind)),f=l.default.relative(n,o);if(d.length>0&&c.push({kind:i.StructureKind.ImportDeclaration,isTypeOnly:0===d.length,moduleSpecifier:u(f),namedImports:Array.from(new Set(d.map((e=>e.type))))}),!1!==a.relationModel&&p.length>0){const t=p.filter((t=>t.type!==e.name));t.length>0&&c.push({kind:i.StructureKind.ImportDeclaration,moduleSpecifier:"./index",namedImports:Array.from(new Set(t.flatMap((e=>[`Complete${e.type}`,s(e.type)]))))})}t.addImportDeclarations(c)})(e,t,a,r),((e,t,a,r)=>{e.fields.some((e=>"Json"===e.type))&&t.addStatements((e=>{e.newLine(),d(e,["// Helper schema for JSON fields","type Literal = boolean | number | string"+(a.prismaJsonNullability?"":"| null"),"type Json = Literal | { [key: string]: Json } | Json[]",`const literalSchema = z.union([z.string(), z.number(), z.boolean()${a.prismaJsonNullability?"":", z.null()"}])`,"const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))"])})),a.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&t.addStatements((e=>{e.newLine(),d(e,["// Helper schema for Decimal fields","z",".instanceof(Decimal)",".or(z.string())",".or(z.number())",".refine((value) => {","  try {","    return new Decimal(value);","  } catch (error) {","    return false;","  }","})",".transform((value) => new Decimal(value));"])}))})(e,t,a),((e,t,a,r)=>{const{modelName:n}=m(a);t.addVariableStatement({declarationKind:i.VariableDeclarationKind.Const,isExported:!0,leadingTrivia:e=>e.blankLineIfLastNot(),declarations:[{name:n(e.name),initializer(t){t.write("z.object(").inlineBlock((()=>{e.fields.filter((e=>"object"!==e.kind)).forEach((e=>{d(t,p(e.documentation)),t.write(`${e.name}: ${h(e)}`).write(",").newLine()}))})).write(")")}}]})})(e,t,a),((e,t)=>e.fields.some((e=>"object"===e.kind))&&!1!==t.relationModel)(e,a)&&((e,t,a,r)=>{const{modelName:n,relatedModelName:o}=m(a),l=e.fields.filter((e=>"object"===e.kind));t.addInterface({name:`Complete${e.name}`,isExported:!0,extends:[`z.infer<typeof ${n(e.name)}>`],properties:l.map((e=>({hasQuestionToken:!e.isRequired,name:e.name,type:`Complete${e.type}${e.isList?"[]":""}${e.isRequired?"":" | null"}`})))}),t.addStatements((t=>d(t,["","/**",` * ${o(e.name)} contains all relations on your model in addition to the scalars`," *"," * NOTE: Lazy required in case of potential circular dependencies within schema"," */"]))),t.addVariableStatement({declarationKind:i.VariableDeclarationKind.Const,isExported:!0,declarations:[{name:o(e.name),type:`z.ZodSchema<Complete${e.name}>`,initializer(t){t.write(`z.lazy(() => ${n(e.name)}.extend(`).inlineBlock((()=>{l.forEach((e=>{d(t,p(e.documentation)),t.write(`${e.name}: ${h(e,o)}`).write(",").newLine()}))})).write("))")}}]})})(e,t,a)})(e,r,S,z),r.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:t.SemicolonPreference.Remove})})),a.save()}});
 //# sourceMappingURL=zod-prisma.cjs.production.min.js.map
diff --git a/dist/zod-prisma.cjs.production.min.js.map b/dist/zod-prisma.cjs.production.min.js.map
index 10501876bc9965c211638dcf21e3fdecad472a49..3b17a8e1377da1df5fbe6d9d7207e549b3593f99 100644
--- a/dist/zod-prisma.cjs.production.min.js.map
+++ b/dist/zod-prisma.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"zod-prisma.cjs.production.min.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/index.ts","../src/generator.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'jsonSchema'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.nativeEnum(${field.type})`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { populateModelFile, generateBarrelFile } from './generator'\nimport { Project } from 'ts-morph'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\n\tconst enumFields = model.fields.filter((f) => f.kind === 'enum')\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\tconst relativePath = path.relative(outputPath, clientPath)\n\n\tif (enumFields.length > 0) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tisTypeOnly: enumFields.length === 0,\n\t\t\tmoduleSpecifier: dotSlash(relativePath),\n\t\t\tnamedImports: enumFields.map((f) => f.type),\n\t\t})\n\t}\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (model.fields.some((f) => f.type === 'Json')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for JSON fields',\n\t\t\t\t`type Literal = boolean | number | string${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : '| null'\n\t\t\t\t}`,\n\t\t\t\t'type Json = Literal | { [key: string]: Json } | Json[]',\n\t\t\t\t`const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : ', z.null()'\n\t\t\t\t}])`,\n\t\t\t\t'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n\t\t\t])\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(`${field.name}: ${getZodConstructor(field)}`)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","dotSlash","input","converted","replace","includes","split","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","chunk","reduce","arr","item","idx","each","contents","stringify","getZodConstructor","field","getRelatedModelName","zodType","extraModifiers","kind","type","isList","documentation","find","modifier","_getZodDocElements$fi","isRequired","join","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","models","dmmf","datamodel","schemaPath","outputPath","generator","output","value","clientPath","otherGenerators","provider","results","safeParse","config","success","Error","data","prismaOptions","indexFile","createSourceFile","overwrite","model","addExportDeclaration","moduleSpecifier","generateBarrelFile","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","sourceFile","importList","StructureKind","ImportDeclaration","namespaceImport","path","relative","resolve","dirname","fields","some","f","namedImports","enumFields","relationFields","relativePath","isTypeOnly","filteredFields","Array","from","Set","addImportDeclarations","writeImportsForModel","_prismaOptions","addStatements","writeTypeSpecificSchemas","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateSchemaForModel","needsRelatedModel","addInterface","extends","properties","hasQuestionToken","generateRelatedSchemaForModel","populateModelFile","save"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"zod-prisma.cjs.production.min.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/index.ts","../src/generator.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'jsonSchema'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.nativeEnum(${field.type})`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { populateModelFile, generateBarrelFile } from './generator'\nimport { Project } from 'ts-morph'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\n\tconst enumFields = model.fields.filter((f) => f.kind === 'enum')\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\tconst relativePath = path.relative(outputPath, clientPath)\n\n\tif (enumFields.length > 0) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tisTypeOnly: enumFields.length === 0,\n\t\t\tmoduleSpecifier: dotSlash(relativePath),\n\t\t\tnamedImports: Array.from(new Set(enumFields.map((f) => f.type))),\n\t\t})\n\t}\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (model.fields.some((f) => f.type === 'Json')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for JSON fields',\n\t\t\t\t`type Literal = boolean | number | string${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : '| null'\n\t\t\t\t}`,\n\t\t\t\t'type Json = Literal | { [key: string]: Json } | Json[]',\n\t\t\t\t`const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : ', z.null()'\n\t\t\t\t}])`,\n\t\t\t\t'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n\t\t\t])\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(`${field.name}: ${getZodConstructor(field)}`)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","dotSlash","input","converted","replace","includes","split","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","chunk","reduce","arr","item","idx","each","contents","stringify","getZodConstructor","field","getRelatedModelName","zodType","extraModifiers","kind","type","_computeCustomSchema","_getZodDocElements$fi","isList","documentation","find","modifier","isRequired","join","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","models","dmmf","datamodel","schemaPath","outputPath","generator","output","value","clientPath","otherGenerators","provider","results","safeParse","config","success","Error","data","prismaOptions","indexFile","createSourceFile","overwrite","model","addExportDeclaration","moduleSpecifier","generateBarrelFile","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","sourceFile","importList","StructureKind","ImportDeclaration","namespaceImport","path","relative","resolve","dirname","fields","some","f","namedImports","enumFields","relationFields","relativePath","isTypeOnly","Array","from","Set","filteredFields","addImportDeclarations","writeImportsForModel","_prismaOptions","addStatements","writeTypeSpecificSchemas","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateSchemaForModel","needsRelatedModel","addInterface","extends","properties","hasQuestionToken","generateRelatedSchemaForModel","populateModelFile","save"],"mappings":"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"}
\ No newline at end of file
diff --git a/package.json b/package.json
index 198b8999bc167af4858d97c8ec182c0d5d7d78e6..25b6772aac8720d7e3a12f5b4c7c2eecbcc597ea 100644
--- a/package.json
+++ b/package.json
@@ -52,23 +52,23 @@
 		"testEnvironment": "node"
 	},
 	"dependencies": {
-		"@prisma/generator-helper": "~3.8.1",
+		"@prisma/generator-helper": "~4.6.0",
 		"parenthesis": "^3.1.8",
-		"ts-morph": "^13.0.2"
+		"ts-morph": "^16.0.0"
 	},
 	"devDependencies": {
-		"@prisma/client": "~3.8.1",
-		"@prisma/sdk": "~3.7.0",
+		"@prisma/client": "~4.6.0",
+		"@prisma/sdk": "~4.0.0",
 		"@tsconfig/recommended": "^1.0.1",
 		"@types/fs-extra": "^9.0.13",
 		"dts-cli": "^1.1.5",
-		"execa": "^5.1.0",
+		"execa": "^6.1.0",
 		"fast-glob": "^3.2.5",
 		"fs-extra": "^10.0.0",
-		"husky": "^7.0.4",
-		"jest-mock-extended": "^2.0.4",
-		"prisma": "^3.4.2",
-		"tslib": "^2.3.1",
+		"husky": "^8.0.2",
+		"jest-mock-extended": "^3.0.1",
+		"prisma": "^4.6.0",
+		"tslib": "^2.4.1",
 		"typescript": "^4.5.4",
 		"zod": "^3.11.6"
 	},