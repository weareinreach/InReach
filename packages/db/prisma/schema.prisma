generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fieldReference", "postgresqlExtensions", "clientExtensions", "filteredRelationCount", "multiSchema"]
  // output          = "../../../node_modules/.prisma/client"
  // output          = "../node_modules/.prisma/client"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
//   output   = "../../../docs/database"
//}

generator zod {
  provider      = "zod-prisma"
  output        = "../zod-schemas"
  imports       = "../zod-util"
  relationModel = "default"
}

generator dbml {
  provider              = "prisma-dbml-generator"
  output                = "./dbml"
  outputName            = "inreach.dbml"
  projectName           = "InReach"
  projectDatabaseType   = "PostgreSQL"
  includeRelationFields = false
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
  schemas    = ["user", "org", "system"]
}

/// NextAuth Account **DO NOT ALTER**
model Account {
  id                String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation("Account", fields: [userId], references: [id], onDelete: Cascade)
  userId String /// @zod.custom(imports.cuid)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLog  AuditLog[]

  @@unique([provider, providerAccountId])
  @@schema("user")
}

/// NextAuth Session **DO NOT ALTER**
model Session {
  // Do not change - NextAuth fields
  id           String   @id @default(cuid()) /// @zod.custom(imports.cuid)
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String /// @zod.custom(imports.cuid)

  @@schema("user")
}

/// NextAuth Verification Token **DO NOT ALTER**
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("user")
}

/// NextAuth User
model User {
  //
  // Do not change - NextAuth fields
  //
  id              String            @id @default(cuid()) /// @zod.custom(imports.cuid)
  firstName       String?
  lastName        String?
  email           String            @unique(sort: Asc)
  emailVerified   DateTime?
  image           String?
  accounts        Account[]         @relation("Account")
  sessions        Session[]
  //
  // Ok to change below - Start of custom fields
  //
  legacyId        String?           @unique /// old ID from MongoDB
  ethnicity       UserEthnicity[]
  countryOrigin   Country[]         @relation("countryOrigin")
  identifiesAs    UserSOGIdentity[]
  birthYear       Int?              @db.SmallInt
  reasonForJoin   String?
  communities     UserCommunity[]
  permissions     PermissionItem[]
  /// assets that certain permissible roles are attributed to (edit org, etc)
  PermissionAsset PermissionAsset[]

  // Current location
  currentCity      String?
  currentGovDist   GovDist? @relation(fields: [currentGovDistId], references: [id])
  currentGovDistId String? /// @zod.custom(imports.cuid)
  currentCountry   Country? @relation(name: "currentCountry", fields: [currentCountryId], references: [id])
  currentCountryId String? /// @zod.custom(imports.cuid)

  // Data for AWS Cognito migration
  //  migrated from old DB - once user is migrated to Cognito, legacy fields are cleared, migrateDate is set
  legacyHash  String?
  legacySalt  String?
  migrateDate DateTime?

  // Relationships
  lists       UserSavedList[] @relation("userList")
  sharedLists UserSavedList[] @relation("sharedLists")

  immigration   UserImmigration? @relation(fields: [immigrationId], references: [id])
  immigrationId String? /// @zod.custom(imports.cuid)

  role   UserRole @relation(fields: [roleId], references: [id])
  roleId String /// @zod.custom(imports.cuid)

  userType   UserType @relation(fields: [userTypeId], references: [id])
  userTypeId String /// @zod.custom(imports.cuid)

  langPref   Language @relation(fields: [langPrefId], references: [id])
  langPrefId String /// @zod.custom(imports.cuid)

  source   Source? @relation(name: "userSource", fields: [sourceId], references: [id])
  sourceId String? /// @zod.custom(imports.cuid)

  mailReceived UserMail[] @relation("mailTo")
  mailSent     UserMail[] @relation("mailFrom")

  // For claimed organizations / organization staff
  associatedOrg   Organization? @relation(fields: [associatedOrgId], references: [id])
  associatedOrgId String? /// @zod.custom(imports.cuid)
  orgTitle        UserTitle?    @relation(fields: [orgTitleId], references: [id])
  orgTitleId      String? /// @zod.custom(imports.cuid)
  orgEmail        OrgEmail?     @relation("associatedEmail")
  orgPhone        OrgPhone?     @relation("associatedPhone")

  FieldVisibility FieldVisibility[] /// For user profile page. All fields default to 'NONE'

  /// Recording changes made by user
  AuditLogEntry AuditLog[] @relation("Recorded User")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLog  AuditLog[] @relation("AuditLogEntry")

  @@schema("user")
}

/// User Role - Contains array of granular permissions
///  Internal use
model UserRole {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  name String @unique
  tag  String @unique

  permissions PermissionItem[]
  user        User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  @@schema("user")
}

/// For permissions that are attached to certain records
///  example: User is only able to edit one organization.
model PermissionAsset {
  id     String @id @default(cuid()) /// @zod.custom(imports.cuid)
  user   User   @relation(fields: [userId], references: [id])
  userId String /// @zod.custom(imports.cuid)

  permission   PermissionItem @relation(fields: [permissionId], references: [id])
  permissionId String /// @zod.custom(imports.cuid)

  organization Organization[]
  location     OrgLocation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  @@schema("user")
}

/// Permission Definition
model PermissionItem {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  name String @unique

  users  User[]
  roles  UserRole[]
  assets PermissionAsset[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  @@schema("user")
}

/// User Info - account type (seeker, org, lawyer, etc.)
///  use shorthand descriptions - front-end displayable text is defined in Translations
model UserType {
  id    String @id @default(cuid()) /// @zod.custom(imports.cuid)
  type  String @unique
  users User[]

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  @@schema("user")
}

/// User Info - professional title
///  this will be a searchable list
model UserTitle {
  id         String     @id @default(cuid()) /// @zod.custom(imports.cuid)
  title      String     @unique
  email      OrgEmail[]
  orgUser    User[]
  searchable Boolean    @default(false)

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  @@schema("user")
}

/// User demographics - Ethnicity
model UserEthnicity {
  id        String @id @default(cuid()) /// @zod.custom(imports.cuid)
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  ethnicity String @unique
  users     User[]

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  @@schema("user")
}

/// User demographics - Immigration Status
model UserImmigration {
  id     String @id @default(cuid()) /// @zod.custom(imports.cuid)
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  status String @unique
  users  User[]

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  @@schema("user")
}

/// User demographics - Sexual orientation / Identity
model UserSOGIdentity {
  id         String @id @default(cuid()) /// @zod.custom(imports.cuid)
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  identifyAs String @unique
  users      User[]

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  @@schema("user")
}

/// User demographics - Community
model UserCommunity {
  id        String @id @default(cuid()) /// @zod.custom(imports.cuid)
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  community String @unique
  users     User[]

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  @@schema("user")
}

/// User's list(s) of saved resources.
model UserSavedList {
  id            String                  @id @default(cuid()) /// @zod.custom(imports.cuid)
  name          String
  organizations Organization[]
  visibility    UserSavedListVisibility @default(PRIVATE)
  sharedWith    User[]                  @relation("sharedLists")
  /// Generated string to share a list via link
  sharedLinkKey String?                 @unique

  ownedBy   User   @relation("userList", fields: [ownedById], references: [id])
  ownedById String /// @zod.custom(imports.cuid)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLog  AuditLog[]

  @@index([ownedById])
  @@schema("user")
}

/// List visiblity
enum UserSavedListVisibility {
  PRIVATE
  SHARED_USER
  SHARED_LINK
  PUBLIC

  @@schema("user")
}

model UserMail {
  id       String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  toUser   User    @relation("mailTo", fields: [toUserId], references: [id])
  toUserId String /// @zod.custom(imports.cuid)
  read     Boolean @default(false)
  subject  String
  body     String

  from       String?
  fromUser   User?   @relation("mailFrom", fields: [fromUserId], references: [id])
  fromUserId String? /// @zod.custom(imports.cuid)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  @@schema("user")
}

/// Main organization definition
model Organization {
  id                  String                @id @default(cuid()) /// @zod.custom(imports.cuid)
  legacyId            String?               @unique /// old ID from MongoDB
  name                String
  slug                String                @unique /// @zod.regex(/^[a-z0-9]+(?:-[a-z0-9]+)*$/gm)
  description         OrgDescription[]
  email               OrgEmail[]
  location            OrgLocation[]
  notes               InternalNote[]
  phone               OrgPhone[]
  photos              OrgPhoto[]
  services            OrgService[]
  orgSocialMedia      OrgSocialMedia[]
  userList            UserSavedList[]
  reviews             OrgReview[]
  attributes          Attribute[]
  attributeSupplement AttributeSupplement[]

  deleted      Boolean   @default(false)
  published    Boolean   @default(false)
  lastVerified DateTime?

  // Users associated with organization (staff)
  associatedUsers User[]
  allowedEditors  PermissionAsset[]

  // Outside API connections
  outsideApi    OutsideAPI? @relation(fields: [outsideApiId], references: [id])
  outsideApiId  String? /// @zod.custom(imports.cuid)
  apiIdentifier String?

  source   Source @relation(fields: [sourceId], references: [id])
  sourceId String /// @zod.custom(imports.cuid)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLog  AuditLog[]

  @@index([name(sort: Asc)])
  @@schema("org")
}

/// Description translations
///  this does not use i18next
model OrgDescription {
  id String @id @default(cuid()) /// @zod.custom(imports.cuid)

  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String       @unique /// @zod.custom(imports.cuid)

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@index([keyId, orgId])
  @@schema("org")
}

/// Organization email contacts - can be general or location specific
model OrgEmail {
  id        String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  firstName String
  lastName  String
  primary   Boolean
  email     String
  published Boolean @default(true)

  title   UserTitle @relation(fields: [titleId], references: [id])
  titleId String /// @zod.custom(imports.cuid)

  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String /// @zod.custom(imports.cuid)

  user   User?   @relation(name: "associatedEmail", fields: [userId], references: [id])
  userId String? @unique /// @zod.custom(imports.cuid)

  // optional - attach email to a specific location
  orgLocation     OrgLocation? @relation(fields: [orgLocationId], references: [id])
  orgLocationId   String? /// @zod.custom(imports.cuid)
  /// associated only with location and not overall organization (for large orgs w/ multiple locations)
  orgLocationOnly Boolean      @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@index([lastName(sort: Asc), firstName])
  @@index([email])
  @@schema("org")
}

/// Org phone numbers - can be general or location specific
model OrgPhone {
  id        String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  number    String
  published Boolean @default(true)
  primary   Boolean @default(false)

  /// Country profiles have intl dial prefix
  country   Country @relation(fields: [countryId], references: [id])
  countryId String /// @zod.custom(imports.cuid)

  phoneType   PhoneType @relation(fields: [phoneTypeId], references: [id])
  phoneTypeId String /// @zod.custom(imports.cuid)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String /// @zod.custom(imports.cuid)

  user   User?   @relation(name: "associatedPhone", fields: [userId], references: [id])
  userId String? @unique /// @zod.custom(imports.cuid)

  orgLocation     OrgLocation? @relation(fields: [orgLocationId], references: [id])
  orgLocationId   String? /// @zod.custom(imports.cuid)
  /// associated only with location and not overall organization (for large orgs w/ multiple locations)
  orgLocationOnly Boolean      @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("org")
}

/// Organization's social media links
model OrgSocialMedia {
  id       String @id @default(cuid()) /// @zod.custom(imports.cuid)
  username String
  url      String

  service   SocialMediaService @relation(fields: [serviceId], references: [id])
  serviceId String /// @zod.custom(imports.cuid)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String /// @zod.custom(imports.cuid)

  orgLocation     OrgLocation? @relation(fields: [orgLocationId], references: [id])
  orgLocationId   String?
  /// associated only with location and not overall organization (for large orgs w/ multiple locations)
  orgLocationOnly Boolean      @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("org")
}

/// Org location information
model OrgLocation {
  id       String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  name     String?
  street1  String
  street2  String?
  city     String
  postCode String?

  govDist   GovDist? @relation(fields: [govDistId], references: [id])
  govDistId String? /// @zod.custom(imports.cuid)

  country   Country @relation(fields: [countryId], references: [id])
  countryId String /// @zod.custom(imports.cuid)

  longitude Decimal @db.Decimal(4, 3)
  latitude  Decimal @db.Decimal(4, 3)
  geoJSON   Json /// @zod.custom(imports.GeoJSONSchema)

  published           Boolean               @default(true)
  hours               OrgHours[]
  attributes          Attribute[]
  attributeSupplement AttributeSupplement[]

  organization   Organization      @relation(fields: [orgId], references: [id])
  orgId          String            @unique /// @zod.custom(imports.cuid)
  allowedEditors PermissionAsset[]

  email       OrgEmail[] /// if location specific
  phone       OrgPhone[] /// if location specific
  socialMedia OrgSocialMedia[] /// if location specific
  photos      OrgPhoto[]
  services    OrgService[]

  // Outside API connections
  outsideApi    OutsideAPI? @relation(fields: [outsideApiId], references: [id])
  outsideApiId  String? /// @zod.custom(imports.cuid)
  apiLocationId String?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@index([latitude, longitude])
  @@index([geoJSON(ops: JsonbPathOps)], type: Gin)
  @@schema("org")
}

/// Organization photos
model OrgPhoto {
  id        String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  src       String
  height    Int?    @db.SmallInt
  width     Int?    @db.SmallInt
  published Boolean @default(false)

  organization Organization? @relation(fields: [orgId], references: [id])
  orgId        String? /// @zod.custom(imports.cuid)

  orgLocation   OrgLocation? @relation(fields: [orgLocationId], references: [id])
  orgLocationId String? /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("org")
}

/// Organization location/service hours
///  day is stored as integer [0-6], Sunday = 0
///  start/end times are stored as RFC 3339 Timestamp (without zone)
///  as local time. Any timezone offset will be handled by runtime logic
model OrgHours {
  id       String   @id @default(cuid()) /// @zod.custom(imports.cuid)
  /// Sun 0, Mon 1, Tue 2, Wed 3, Thu 3, Fri 4, Sat 6
  dayIndex Int      @default(0) @db.SmallInt
  start    DateTime @db.Time(0)
  end      DateTime @db.Time(0)

  orgLocation OrgLocation? @relation(fields: [orgLocId], references: [id])
  orgLocId    String? /// @zod.custom(imports.cuid)

  orgService   OrgService? @relation(fields: [orgServiceId], references: [id])
  orgServiceId String? /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("org")
}

/// Organization's offered services - access instructions & details
///  associated with service tag
model OrgService {
  id        String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  published Boolean @default(false)

  service   ServiceTag @relation(fields: [serviceId], references: [id])
  serviceId String /// @zod.custom(imports.cuid)

  hours     OrgHours[]
  orgReview OrgReview[]

  attributes          Attribute[]
  attributeSupplement AttributeSupplement[]

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String? /// @zod.custom(imports.cuid)

  orgLocation   OrgLocation? @relation(fields: [orgLocationId], references: [id])
  orgLocationId String? /// @zod.custom(imports.cuid)

  accessKey   TranslationKey? @relation("Service Access Instructions", fields: [accessKeyId], references: [id])
  accessKeyId String?         @unique /// @zod.custom(imports.cuid)
  descKey     TranslationKey? @relation("Service Description", fields: [descKeyId], references: [id])
  descKeyId   String?         @unique /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@unique([serviceId, organizationId])
  @@unique([serviceId, orgLocationId])
  @@index([organizationId(sort: Asc)])
  @@index([orgLocationId(sort: Asc)])
  @@schema("org")
}

/// User reviews/ratings of organization
model OrgReview {
  id         String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  rating     Int     @db.SmallInt
  reviewText String?
  visible    Boolean @default(true)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String /// @zod.custom(imports.cuid)

  // Optional: Review can be attached to a specific service.
  orgService   OrgService? @relation(fields: [orgServiceId], references: [id])
  orgServiceId String? /// @zod.custom(imports.cuid)

  // Store the language of the review text
  // Use session locale value or Google Translate lang detect API
  // Optional: do not store anything if 'comment' is null
  language       Language? @relation(fields: [langId], references: [id])
  langId         String? /// @zod.custom(imports.cuid)
  /// How confident is the API guess?
  langConfidence Float?

  /// From https://perspectiveapi.com/
  toxicity Float?

  // Snapshot local community reviwer geographical info
  //  review should keep original geo data if LCR user updates their location.
  // Optional - only applicable if user is LCR
  lcrCity      String?
  lcrGovDist   GovDist? @relation(fields: [lcrGovDistId], references: [id])
  lcrGovDistId String? /// @zod.custom(imports.cuid)
  lcrCountry   Country? @relation(fields: [lcrCountryId], references: [id])
  lcrCountryId String? /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@index([organizationId(sort: Asc)])
  @@index([orgServiceId(sort: Asc)])
  @@schema("org")
}

/// Additional Properties for Org/Service.
model AttributeCategory {
  id      String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  tag     String  @unique
  name    String  @unique
  /// Internal description
  intDesc String?

  namespace   TranslationNamespace @relation(fields: [namespaceId], references: [id])
  namespaceId String /// @zod.custom(imports.cuid)

  attribute Attribute[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("system")
}

model Attribute {
  id      String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  tag     String  @unique
  name    String  @unique
  /// Internal description
  intDesc String?

  category   AttributeCategory @relation(fields: [categoryId], references: [id])
  categoryId String /// @zod.custom(imports.cuid)

  key   TranslationKey? @relation(fields: [keyId], references: [id])
  keyId String? /// @zod.custom(imports.cuid)

  requireText         Boolean @default(false)
  requireLanguage     Boolean @default(false)
  requireCountry      Boolean @default(false)
  requireSupplemental Boolean @default(false)

  /// Tables using Attribute
  organization        Organization[]
  orgLocation         OrgLocation[]
  orgService          OrgService[]
  serviceCategory     ServiceCategory[]
  serviceTag          ServiceTag[]
  attributeSupplement AttributeSupplement[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@unique([categoryId, name])
  @@schema("system")
}

model AttributeSupplement {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  data Json /// @zod.custom(imports.AttributeSupplement)

  attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId String /// @zod.custom(imports.cuid)

  organization      Organization?    @relation(fields: [organizationId], references: [id])
  organizationId    String? /// @zod.custom(imports.cuid)
  service           OrgService?      @relation(fields: [serviceId], references: [id])
  serviceId         String? /// @zod.custom(imports.cuid)
  location          OrgLocation?     @relation(fields: [locationId], references: [id])
  locationId        String? /// @zod.custom(imports.cuid)
  serviceTag        ServiceTag?      @relation(fields: [serviceTagId], references: [id])
  serviceTagId      String? /// @zod.custom(imports.cuid)
  serviceCategory   ServiceCategory? @relation(fields: [serviceCategoryId], references: [id])
  serviceCategoryId String? /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("system")
}

model ServiceCategory {
  id                          String                @id @default(cuid()) /// @zod.custom(imports.cuid)
  category                    String                @unique
  services                    ServiceTag[]
  defaultAttributes           Attribute[]
  defaultAttributeSupplements AttributeSupplement[]

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("system")
}

model ServiceTag {
  id                          String                @id @default(cuid()) /// @zod.custom(imports.cuid)
  name                        String
  defaultAttributes           Attribute[]
  defaultAttributeSupplements AttributeSupplement[]

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  category   ServiceCategory @relation(fields: [categoryId], references: [id])
  categoryId String /// @zod.custom(imports.cuid)

  /// Tables referencing ServiceTag
  orgServices OrgService[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@unique([name, categoryId])
  @@schema("system")
}

/// Phone number descriptors
model PhoneType {
  id       String     @id @default(cuid()) /// @zod.custom(imports.cuid)
  type     String     @unique
  orgPhone OrgPhone[]

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("system")
}

/// Social media service properties
model SocialMediaService {
  id       String @id @default(cuid()) /// @zod.custom(imports.cuid)
  name     String @unique
  urlBase  String
  logoIcon String

  orgSocialMedia  OrgSocialMedia[]
  socialMediaLink SocialMediaLink[]

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("system")
}

/// Source of organization/user
///  *INTERNAL* - for tracking purposes
model Source {
  id     String     @id @default(cuid()) /// @zod.custom(imports.cuid)
  source String     @unique
  type   SourceType

  organization Organization[]
  user         User[]         @relation("userSource")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("system")
}

enum SourceType {
  EXTERNAL
  ORGANIZATION
  SYSTEM
  USER

  @@schema("system")
}

/// Country metadata
model Country {
  id       String @id @default(cuid()) /// @zod.custom(imports.cuid)
  /// ISO 3166-1 alpha-2 Country code
  cca2     String @unique @db.Char(2)
  /// ISO 3166-1 alpha-3 Country code
  cca3     String @unique @db.Char(3)
  /// Country name (English).
  name     String @unique(sort: Asc)
  /// International dialing code
  dialCode Int?   @db.SmallInt
  /// Country flag (emoji)
  flag     String
  /// GeoJSON object - required only if this will be considered a "service area"
  geoJSON  Json? /// @zod.custom(imports.GeoJSONSchema)

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  // List of administrative subdivisions
  govDist GovDist[]

  /// Tables using Country
  orgAddress OrgLocation[]
  orgReviews OrgReview[]
  orgPhone   OrgPhone[]

  originUsers  User[] @relation("countryOrigin")
  currentUsers User[] @relation("currentCountry")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("system")
}

/// Administrative districts for countries
model GovDist {
  id      String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  /// Name (English/Roman alphabet)
  name    String
  /// Slug - [country (ISO)]-[govdist]-[...]
  slug    String  @unique
  /// ISO-3166-2 code
  iso     String?
  /// Abbreviation (Optional)
  abbrev  String?
  /// GeoJSON object - required only if this will be considered a "service area"
  geoJSON Json? /// @zod.custom(imports.GeoJSONSchema)

  country   Country @relation(fields: [countryId], references: [id])
  countryId String /// @zod.custom(imports.cuid)

  govDistType   GovDistType @relation(fields: [govDistTypeId], references: [id])
  govDistTypeId String /// @zod.custom(imports.cuid)

  /// table can be used for "sub districts" (State -> County -> City)
  isPrimary    Boolean?  @default(true)
  parent       GovDist?  @relation(name: "associatedDistricts", fields: [parentId], references: [id])
  parentId     String? /// @zod.custom(imports.cuid)
  subDistricts GovDist[] @relation("associatedDistricts")

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  /// Tables using GovDist
  orgLocation OrgLocation[]
  orgReview   OrgReview[]
  user        User[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@index([countryId])
  @@index([parentId])
  @@schema("system")
}

/// Descriptor of principal administrative districts (state, province, county, etc.)
model GovDistType {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  name String @unique

  govDist GovDist[]

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("system")
}

/// Languages - ETF BCP 47 language tag
///  top level & regional locale (ex: 'en', "en-us", "en-ca")
model Language {
  id                 String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  languageName       String
  /// ETF BCP 47 language tag
  localeCode         String  @unique(sort: Asc)
  /// ISO 639-2
  iso6392            String? @db.Char(3)
  /// Language name in it's language.
  nativeName         String
  /// Is this language being actively used for translations?
  activelyTranslated Boolean @default(false)

  // fields using records
  User      User[]
  OrgReview OrgReview[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("system")
}

//
// Translation tables for database values.
//

// Top level category for i18next
model TranslationNamespace {
  id String @id @default(cuid()) /// @zod.custom(imports.cuid)

  name String @unique

  keys TranslationKey[]

  attributeCategory AttributeCategory[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  // needed to have 'ns' field on TranslationKey
  @@unique([id, name])
  @@schema("system")
}

// Item key - i18next
model TranslationKey {
  id          String               @id @default(cuid()) /// @zod.custom(imports.cuid)
  /// Item key
  key         String
  /// Base string
  text        String
  /// Context
  context     String?
  /// Associated namespace
  namespace   TranslationNamespace @relation(fields: [namespaceId, ns], references: [id, name])
  namespaceId String /// @zod.custom(imports.cuid)
  ns          String
  // to manage plurals & ordinals
  parent      TranslationKey?      @relation("translationSubItems", fields: [parentId], references: [id])
  parentId    String? /// @zod.custom(imports.cuid)
  children    TranslationKey[]     @relation("translationSubItems")

  /// Associated tables
  attribute          Attribute[]
  country            Country[]
  footerLink         FooterLink[]
  govDist            GovDist[]
  govDistType        GovDistType[]
  navigation         Navigation[]
  orgDescription     OrgDescription[]
  orgServiceAccess   OrgService[]         @relation("Service Access Instructions")
  orgServiceDesc     OrgService[]         @relation("Service Description")
  phoneType          PhoneType[]
  serviceCategory    ServiceCategory[]
  serviceTag         ServiceTag[]
  socialMediaService SocialMediaService[]
  userCommunity      UserCommunity[]
  userEthnicity      UserEthnicity[]
  userImmigration    UserImmigration[]
  userSOGIdentity    UserSOGIdentity[]
  userTitle          UserTitle[]
  userType           UserType[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  /// Only 1 key per namespace
  @@unique([ns(sort: Asc), key(sort: Asc)])
  @@schema("system")
}

/// Define outside APIs in use
model OutsideAPI {
  id          String @id @default(cuid()) /// @zod.custom(imports.cuid)
  name        String @unique
  description String

  urlPattern String

  Organization Organization[]
  OrgLocation  OrgLocation[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("system")
}

/// Visibilty settings for user profile pages
model FieldVisibility {
  id     String @id @default(cuid()) /// @zod.custom(imports.cuid)
  user   User   @relation(fields: [userId], references: [id])
  userId String /// @zod.custom(imports.cuid)

  firstName      VisibilitySetting @default(NONE)
  lastName       VisibilitySetting @default(NONE)
  lastNameInit   VisibilitySetting @default(NONE)
  email          VisibilitySetting @default(NONE)
  image          VisibilitySetting @default(NONE)
  ethnicity      VisibilitySetting @default(NONE)
  countryOrigin  VisibilitySetting @default(NONE)
  SOG            VisibilitySetting @default(NONE)
  communities    VisibilitySetting @default(NONE)
  currentCity    VisibilitySetting @default(NONE)
  currentGovDist VisibilitySetting @default(NONE)
  currentCountry VisibilitySetting @default(NONE)
  userType       VisibilitySetting @default(NONE) /// for specialized accounts
  associatedOrg  VisibilitySetting @default(NONE)
  orgTitle       VisibilitySetting @default(NONE)
  createdAt      VisibilitySetting @default(NONE) /// to facilitate "User since..."

  recordCreatedAt DateTime @default(now())
  recordupdatedAt DateTime @updatedAt

  auditLog AuditLog[]

  @@schema("user")
}

enum VisibilitySetting {
  NONE
  LOGGED_IN
  PROVIDER
  PUBLIC

  @@schema("user")
}

/// Define the App navigation tree
///  this will be used to generate a json file at build time
model Navigation {
  id       String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  display  String
  href     String?
  isParent Boolean @default(true)
  icon     String?

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  parentItem Navigation?  @relation(name: "navHeirarchy", fields: [parentId], references: [id])
  parentId   String? /// @zod.custom(imports.cuid)
  children   Navigation[] @relation("navHeirarchy")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@unique([display, href])
  @@schema("system")
}

model FooterLink {
  id      String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  display String
  href    String
  icon    String?

  key   TranslationKey @relation(fields: [keyId], references: [id])
  keyId String         @unique /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@unique([display, href])
  @@schema("system")
}

model SocialMediaLink {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  href String @unique
  icon String

  service   SocialMediaService @relation(fields: [serviceId], references: [id])
  serviceId String /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  @@schema("system")
}

/// Internal notes - multipurpose
model InternalNote {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  text String

  attribute              Attribute?            @relation(fields: [attributeId], references: [id])
  attributeId            String? /// @zod.custom(imports.cuid)
  attributeCategory      AttributeCategory?    @relation(fields: [attributeCategoryId], references: [id])
  attributeCategoryId    String? /// @zod.custom(imports.cuid)
  attributeSupplement    AttributeSupplement?  @relation(fields: [attributeSupplementId], references: [id])
  attributeSupplementId  String? /// @zod.custom(imports.cuid)
  country                Country?              @relation(fields: [countryId], references: [id])
  countryId              String? /// @zod.custom(imports.cuid)
  footerLink             FooterLink?           @relation(fields: [footerLinkId], references: [id])
  footerLinkId           String? /// @zod.custom(imports.cuid)
  govDist                GovDist?              @relation(fields: [govDistId], references: [id])
  govDistId              String? /// @zod.custom(imports.cuid)
  govDistType            GovDistType?          @relation(fields: [govDistTypeId], references: [id])
  govDistTypeId          String? /// @zod.custom(imports.cuid)
  language               Language?             @relation(fields: [languageId], references: [id])
  languageId             String? /// @zod.custom(imports.cuid)
  navigation             Navigation?           @relation(fields: [navigationId], references: [id])
  navigationId           String? /// @zod.custom(imports.cuid)
  organization           Organization?         @relation(fields: [organizationId], references: [id])
  organizationId         String? /// @zod.custom(imports.cuid)
  orgDescription         OrgDescription?       @relation(fields: [orgDescriptionId], references: [id])
  orgDescriptionId       String? /// @zod.custom(imports.cuid)
  orgEmail               OrgEmail?             @relation(fields: [orgEmailId], references: [id])
  orgEmailId             String? /// @zod.custom(imports.cuid)
  orgHours               OrgHours?             @relation(fields: [orgHoursId], references: [id])
  orgHoursId             String? /// @zod.custom(imports.cuid)
  orgLocation            OrgLocation?          @relation(fields: [orgLocationId], references: [id])
  orgLocationId          String? /// @zod.custom(imports.cuid)
  orgPhone               OrgPhone?             @relation(fields: [orgPhoneId], references: [id])
  orgPhoneId             String? /// @zod.custom(imports.cuid)
  orgPhoto               OrgPhoto?             @relation(fields: [orgPhotoId], references: [id])
  orgPhotoId             String? /// @zod.custom(imports.cuid)
  orgReview              OrgReview?            @relation(fields: [orgReviewId], references: [id])
  orgReviewId            String? /// @zod.custom(imports.cuid)
  orgService             OrgService?           @relation(fields: [orgServiceId], references: [id])
  orgServiceId           String? /// @zod.custom(imports.cuid)
  orgSocialMedia         OrgSocialMedia?       @relation(fields: [orgSocialMediaId], references: [id])
  orgSocialMediaId       String? /// @zod.custom(imports.cuid)
  outsideApi             OutsideAPI?           @relation(fields: [outsideApiId], references: [id])
  outsideApiId           String? /// @zod.custom(imports.cuid)
  phoneType              PhoneType?            @relation(fields: [phoneTypeId], references: [id])
  phoneTypeId            String? /// @zod.custom(imports.cuid)
  serviceCategory        ServiceCategory?      @relation(fields: [serviceCategoryId], references: [id])
  serviceCategoryId      String? /// @zod.custom(imports.cuid)
  serviceTag             ServiceTag?           @relation(fields: [serviceTagId], references: [id])
  serviceTagId           String? /// @zod.custom(imports.cuid)
  socialMediaLink        SocialMediaLink?      @relation(fields: [socialMediaLinkId], references: [id])
  socialMediaLinkId      String? /// @zod.custom(imports.cuid)
  socialMediaService     SocialMediaService?   @relation(fields: [socialMediaServiceId], references: [id])
  socialMediaServiceId   String? /// @zod.custom(imports.cuid)
  source                 Source?               @relation(fields: [sourceId], references: [id])
  sourceId               String? /// @zod.custom(imports.cuid)
  translationKey         TranslationKey?       @relation(fields: [translationKeyId], references: [id])
  translationKeyId       String? /// @zod.custom(imports.cuid)
  translationNamespace   TranslationNamespace? @relation(fields: [translationNamespaceId], references: [id])
  translationNamespaceId String? /// @zod.custom(imports.cuid)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  @@schema("system")
}

/// Store changes made by users
model AuditLog {
  id        String   @id @default(cuid()) /// @zod.custom(imports.cuid)
  actor     User     @relation("Recorded User", fields: [actorId], references: [id])
  actorId   String /// @zod.custom(imports.cuid)
  timestamp DateTime @default(now())

  from Json
  to   Json

  table    String
  recordId String

  Account                Account?              @relation(fields: [accountId], references: [id])
  accountId              String? /// @zod.custom(imports.cuid)
  Attribute              Attribute?            @relation(fields: [attributeId], references: [id])
  attributeId            String? /// @zod.custom(imports.cuid)
  AttributeCategory      AttributeCategory?    @relation(fields: [attributeCategoryId], references: [id])
  attributeCategoryId    String? /// @zod.custom(imports.cuid)
  AttributeSupplement    AttributeSupplement?  @relation(fields: [attributeSupplementId], references: [id])
  attributeSupplementId  String? /// @zod.custom(imports.cuid)
  Country                Country?              @relation(fields: [countryId], references: [id])
  countryId              String? /// @zod.custom(imports.cuid)
  FieldVisibility        FieldVisibility?      @relation(fields: [fieldVisibilityId], references: [id])
  fieldVisibilityId      String? /// @zod.custom(imports.cuid)
  FooterLink             FooterLink?           @relation(fields: [footerLinkId], references: [id])
  footerLinkId           String? /// @zod.custom(imports.cuid)
  GovDist                GovDist?              @relation(fields: [govDistId], references: [id])
  govDistId              String? /// @zod.custom(imports.cuid)
  GovDistType            GovDistType?          @relation(fields: [govDistTypeId], references: [id])
  govDistTypeId          String? /// @zod.custom(imports.cuid)
  InternalNote           InternalNote?         @relation(fields: [internalNoteId], references: [id])
  internalNoteId         String? /// @zod.custom(imports.cuid)
  Language               Language?             @relation(fields: [languageId], references: [id])
  languageId             String? /// @zod.custom(imports.cuid)
  Navigation             Navigation?           @relation(fields: [navigationId], references: [id])
  navigationId           String? /// @zod.custom(imports.cuid)
  Organization           Organization?         @relation(fields: [organizationId], references: [id])
  organizationId         String? /// @zod.custom(imports.cuid)
  OrgDescription         OrgDescription?       @relation(fields: [orgDescriptionId], references: [id])
  orgDescriptionId       String? /// @zod.custom(imports.cuid)
  OrgEmail               OrgEmail?             @relation(fields: [orgEmailId], references: [id])
  orgEmailId             String? /// @zod.custom(imports.cuid)
  OrgHours               OrgHours?             @relation(fields: [orgHoursId], references: [id])
  orgHoursId             String? /// @zod.custom(imports.cuid)
  OrgLocation            OrgLocation?          @relation(fields: [orgLocationId], references: [id])
  orgLocationId          String? /// @zod.custom(imports.cuid)
  OrgPhone               OrgPhone?             @relation(fields: [orgPhoneId], references: [id])
  orgPhoneId             String? /// @zod.custom(imports.cuid)
  OrgPhoto               OrgPhoto?             @relation(fields: [orgPhotoId], references: [id])
  orgPhotoId             String? /// @zod.custom(imports.cuid)
  OrgReview              OrgReview?            @relation(fields: [orgReviewId], references: [id])
  orgReviewId            String? /// @zod.custom(imports.cuid)
  OrgService             OrgService?           @relation(fields: [orgServiceId], references: [id])
  orgServiceId           String? /// @zod.custom(imports.cuid)
  OrgSocialMedia         OrgSocialMedia?       @relation(fields: [orgSocialMediaId], references: [id])
  orgSocialMediaId       String? /// @zod.custom(imports.cuid)
  OutsideAPI             OutsideAPI?           @relation(fields: [outsideAPIId], references: [id])
  outsideAPIId           String? /// @zod.custom(imports.cuid)
  PermissionAsset        PermissionAsset?      @relation(fields: [permissionAssetId], references: [id])
  permissionAssetId      String? /// @zod.custom(imports.cuid)
  PermissionItem         PermissionItem?       @relation(fields: [permissionItemId], references: [id])
  permissionItemId       String? /// @zod.custom(imports.cuid)
  PhoneType              PhoneType?            @relation(fields: [phoneTypeId], references: [id])
  phoneTypeId            String? /// @zod.custom(imports.cuid)
  ServiceCategory        ServiceCategory?      @relation(fields: [serviceCategoryId], references: [id])
  serviceCategoryId      String? /// @zod.custom(imports.cuid)
  ServiceTag             ServiceTag?           @relation(fields: [serviceTagId], references: [id])
  serviceTagId           String? /// @zod.custom(imports.cuid)
  SocialMediaLink        SocialMediaLink?      @relation(fields: [socialMediaLinkId], references: [id])
  socialMediaLinkId      String? /// @zod.custom(imports.cuid)
  SocialMediaService     SocialMediaService?   @relation(fields: [socialMediaServiceId], references: [id])
  socialMediaServiceId   String? /// @zod.custom(imports.cuid)
  Source                 Source?               @relation(fields: [sourceId], references: [id])
  sourceId               String? /// @zod.custom(imports.cuid)
  TranslationKey         TranslationKey?       @relation(fields: [translationKeyId], references: [id])
  translationKeyId       String? /// @zod.custom(imports.cuid)
  TranslationNamespace   TranslationNamespace? @relation(fields: [translationNamespaceId], references: [id])
  translationNamespaceId String? /// @zod.custom(imports.cuid)
  User                   User[]                @relation("AuditLogEntry") //@relation("AuditLogEntry", fields: [userId], references: [id])
  userId                 String? /// @zod.custom(imports.cuid)
  UserCommunity          UserCommunity?        @relation(fields: [userCommunityId], references: [id])
  userCommunityId        String? /// @zod.custom(imports.cuid)
  UserEthnicity          UserEthnicity?        @relation(fields: [userEthnicityId], references: [id])
  userEthnicityId        String? /// @zod.custom(imports.cuid)
  UserImmigration        UserImmigration?      @relation(fields: [userImmigrationId], references: [id])
  userImmigrationId      String? /// @zod.custom(imports.cuid)
  UserMail               UserMail?             @relation(fields: [userMailId], references: [id])
  userMailId             String? /// @zod.custom(imports.cuid)
  UserRole               UserRole?             @relation(fields: [userRoleId], references: [id])
  userRoleId             String? /// @zod.custom(imports.cuid)
  UserSavedList          UserSavedList?        @relation(fields: [userSavedListId], references: [id])
  userSavedListId        String? /// @zod.custom(imports.cuid)
  UserSOGIdentity        UserSOGIdentity?      @relation(fields: [userSOGIdentityId], references: [id])
  userSOGIdentityId      String? /// @zod.custom(imports.cuid)
  UserTitle              UserTitle?            @relation(fields: [userTitleId], references: [id])
  userTitleId            String? /// @zod.custom(imports.cuid)
  UserType               UserType?             @relation(fields: [userTypeId], references: [id])
  userTypeId             String? /// @zod.custom(imports.cuid)

  @@unique([timestamp, recordId])
  @@schema("system")
}
