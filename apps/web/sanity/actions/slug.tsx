// schemas/actions/setSlugAndPublishAction.js
// import { getNavByPage, GetNavByPageResult } from "../queries";
import { DateTime } from 'luxon'
import { groq } from 'next-sanity'
import { DocumentActionComponent, SanityDocument, useDocumentOperation } from 'sanity'
import slugify from 'slugify'

import { useEffect, useState } from 'react'

import { getClient } from '../../lib/sanity.server'

// Generated by https://quicktype.io

type MainPageIDQuery = {
	frontpage: {
		_id: string
	}
}

interface PageDraft<PageType extends 'post' | 'page'> extends SanityDocument {
	_type: PageType
	metadata: {
		_type: 'metadata'
		publishedAt: string
		slug: string
		title: string
	}
}
interface NavDraft extends SanityDocument {
	parent: {
		slug: string
		internal?: {
			_ref: string
			_type: 'reference'
		}
		label: {
			_key: string
			value: string
		}[]
	}
	children?: {
		_key: string
		slug: string
		internal?: {
			_ref: string
			_type: 'reference'
		}
		label: {
			_key: string
			value: string
		}[]
	}[]
}

export const SetSlugAndPublishAction: DocumentActionComponent = ({
	id: docId,
	type: docType,
	draft: docDraft,
	onComplete,
}) => {
	const { publish, patch } = useDocumentOperation(docId, docType)
	const [isPublishing, setIsPublishing] = useState(false)
	const [popoverOpen, setPopoverOpen] = useState(false)
	const status = { message: '' }
	// console.log("very beginning", docDraft);
	useEffect(() => {
		// if the isPublishing state was set to true and the draft has changed
		// to become `null` the document has been published
		if (isPublishing && !docDraft) {
			setIsPublishing(false)
		}
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [docDraft])

	return {
		disabled: publish.disabled,
		label: isPublishing ? 'Publishingâ€¦' : 'Publish',
		onHandle: async () => {
			// This will update the button text
			setIsPublishing(true)

			const client = getClient(false)
			let slug = ''
			/// Set the slug based on the document type
			switch (docDraft._type) {
				case 'navigationx':
					const navDraft = docDraft as NavDraft
					console.log('before', navDraft)
					console.log('propsdraft', docDraft)
					/* Get the id of the main page setting */
					const queryResult = await client.fetch<MainPageIDQuery>(
						groq`
							*[_type == 'site-config'][0] {
							  frontpage -> {
							    _id
							  }
							}
					`
					)
					const mainPageId = queryResult.frontpage._id

					const parentLabel = navDraft.parent.label.filter((x) => (x._key = 'en-US'))[0].value

					const childLabels = navDraft.children?.length
						? navDraft.children.map((x) => ({
								key: x._key,
								label: x.label.filter((y) => y._key === 'en-US')[0].value,
						  }))
						: []

					navDraft.parent.slug =
						navDraft.parent.internal?._ref === mainPageId ? '/' : `/${slugify(parentLabel)}/`
					if (childLabels.length && navDraft.children?.length) {
						navDraft.children = navDraft.children.map((item) => ({
							...item,
							slug: `/${slugify(parentLabel)}/${slugify(
								childLabels.filter((x) => item._key === x.key)[0].label
							)}/`,
						}))
					}

					console.log('draft', navDraft)

					break

				case 'post':
					const draft = docDraft as PageDraft<'post'>

					const { publishedAt } = draft.metadata

					const publishDate = DateTime.fromISO(publishedAt).setZone('America/New_York').toObject()

					slug = `/blog/${publishDate.year}/${publishDate.month}/${publishDate.day}/${slugify(
						draft.metadata.title,
						{ lower: true, strict: true }
					)}`
					patch.execute([{ set: { metadata: { ...draft.metadata, slug } } }])
					break
				// case "menu":
				// 	// TODO: Set linked page slug

				// 	break;

				default:
					/// Doing nothing? Consider deleting this switch statement to simplify your code.
					break
			}

			// Perform the publish
			publish.execute()

			// Signal that the action is completed
			onComplete()
		},
		dialog: popoverOpen && {
			type: 'popover',
			onClose: onComplete,
			content: status.message,
		},
	}
}
