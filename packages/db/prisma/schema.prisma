generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fieldReference", "postgresqlExtensions", "filteredRelationCount", "extendedWhereUnique", "views", "fullTextSearch"]
  // binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

generator zod {
  provider                 = "zod-prisma-types"
  output                   = "../zod-schemas"
  useMultipleFiles         = true
  createModelTypes         = true
  createInputTypes         = false
  writeNullishInModelTypes = true
  addInputTypeValidation   = false
  addSelectType            = false
}

// generator dbml {
//   provider              = "prisma-dbml-generator"
//   output                = "./dbml"
//   outputName            = "inreach.dbml"
//   projectName           = "InReach"
//   projectDatabaseType   = "PostgreSQL"
//   includeRelationFields = false
// }

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DB_DIRECT_URL")
  extensions = [postgis]
  // schemas    = ["user", "org", "system", "relation"]
}

/// NextAuth Account **DO NOT ALTER**
model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation("Account", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]
  //@@schema("user")

  @@unique([provider, providerAccountId])
}

/// NextAuth Session **DO NOT ALTER**
model Session {
  // Do not change - NextAuth fields
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  //@@schema("user")
}

/// NextAuth Verification Token **DO NOT ALTER**
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  //@@schema("user")

  @@unique([identifier, token])
}

/// NextAuth User
model User {
  //
  // Do not change - NextAuth fields
  //
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique(sort: Asc)
  emailVerified DateTime?
  image         String?
  accounts      Account[] @relation("Account")
  sessions      Session[]
  //
  // Ok to change below - Start of custom fields
  //
  legacyId      String?   @unique /// old ID from MongoDB

  active             Boolean                  @default(true)
  permissions        UserPermission[]
  /// assets that certain permissible roles are attributed to (edit org, etc)
  orgPermission      OrganizationPermission[]
  locationPermission LocationPermission[]
  roles              AssignedRole[]
  attributes         UserAttribute[]

  reviews          OrgReview[]
  // Current location - for LCR
  currentCity      String?
  currentGovDist   GovDist?    @relation(fields: [currentGovDistId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  currentGovDistId String?
  currentCountry   Country?    @relation(name: "currentCountry", fields: [currentCountryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  currentCountryId String?

  // Data for AWS Cognito migration
  //  migrated from old DB - once user is migrated to Cognito, legacy fields are cleared, migrateDate is set
  legacyHash  String?
  legacySalt  String?
  migrateDate DateTime?

  // for LCR accounts
  communities     UserCommunityLink[] /// used for LCR accounts ONLY
  userSOGIdentity UserSOGLink[] /// used for LCR accounts ONLY

  // Relationships
  savedLists          UserSavedList[]
  listsSharedWithUser ListSharedWith[]

  userType   UserType @relation(fields: [userTypeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  userTypeId String

  langPref   Language? @relation(fields: [langPrefId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  langPrefId String?

  source   Source? @relation(name: "userSource", fields: [sourceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  sourceId String?

  mailReceived UserMail[] @relation("mailTo")
  mailSent     UserMail[] @relation("mailFrom")

  orgAssociations UserToOrganization[]

  fieldVisibility FieldVisibility? /// For user profile page. All fields default to 'NONE'

  /// Recording changes made by user
  AuditLogEntry AuditLog[] @relation("Recorded User")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[] @relation("AuditLogEntry")

  //@@schema("user")
}

/// User Role - Contains array of granular permissions
///  Internal use
model UserRole {
  id   String @id @default(cuid())
  name String @unique
  tag  String @unique

  permissions   RolePermission[]
  usersAssigned AssignedRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs AuditLog[]

  //@@schema("system")
}

/// Permission Definition
model Permission {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  users UserPermission[]
  roles RolePermission[]

  orgs      OrganizationPermission[]
  locations LocationPermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("system")
}

/// User Info - account type (seeker, org, lawyer, etc.)
///  use shorthand descriptions - front-end displayable text is defined in Translations
model UserType {
  id    String @id @default(cuid())
  type  String @unique
  users User[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs AuditLog[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// User Info - professional title
///  this will be a searchable list
model UserTitle {
  id         String               @id @default(cuid())
  title      String               @unique
  email      OrgEmail[]
  orgUsers   UserToOrganization[]
  searchable Boolean              @default(false)

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs AuditLog[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

model UserSurvey {
  id String @id @default(cuid())

  birthYear     Int?    @db.SmallInt
  reasonForJoin String?

  communities  SurveyCommunity[]
  ethnicities  SurveyEthnicity[]
  identifiesAs SurveySOG[]

  countryOrigin   Country? @relation("origin", fields: [countryOriginId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  countryOriginId String?

  immigration   UserImmigration? @relation(fields: [immigrationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  immigrationId String?

  currentCity      String?
  currentGovDist   GovDist? @relation(fields: [currentGovDistId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  currentGovDistId String?
  currentCountry   Country? @relation(name: "currentLocation", fields: [currentCountryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  currentCountryId String?

  //@@schema("user")
}

/// User demographics - Ethnicity
model UserEthnicity {
  id        String            @id @default(cuid())
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  ethnicity String            @unique
  surveys   SurveyEthnicity[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs AuditLog[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// User demographics - Immigration Status
model UserImmigration {
  id      String       @id @default(cuid())
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  status  String       @unique
  surveys UserSurvey[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs AuditLog[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// User demographics - Sexual orientation / Identity
model UserSOGIdentity {
  id         String        @id @default(cuid())
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  identifyAs String        @unique
  surveys    SurveySOG[]
  users      UserSOGLink[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs AuditLog[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// User demographics - Community
model UserCommunity {
  id        String              @id @default(cuid())
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  community String              @unique
  users     UserCommunityLink[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs AuditLog[]
  surveys   SurveyCommunity[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// User's list(s) of saved resources.
model UserSavedList {
  id            String              @id @default(cuid())
  name          String
  organizations SavedOrganization[]
  services      SavedService[]
  sharedWith    ListSharedWith[]
  sharedLinkKey String?             @unique

  ownedBy   User   @relation(fields: [ownedById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownedById String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]
  //@@schema("user")

  @@index([ownedById])
  @@index([sharedLinkKey])
}

model UserMail {
  id         String   @id @default(cuid())
  toUser     User     @relation("mailTo", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toUserId   String
  toExternal String[] /// Array of email addresses
  read       Boolean  @default(false)
  subject    String
  body       String

  from       String?
  fromUser   User?   @relation("mailFrom", fields: [fromUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  fromUserId String?

  replies      UserMail[] @relation("userMailReplies")
  responseTo   UserMail?  @relation("userMailReplies", fields: [responseToId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  responseToId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs AuditLog[]

  //@@schema("user")
}

/// Main organization definition
model Organization {
  id         String  @id @default(cuid())
  legacyId   String? @unique /// old ID from MongoDB
  name       String
  slug       String  @unique /// @zod.string.regex(/^[a-z0-9]+(?:-[a-z0-9]+)*$/gm)
  legacySlug String?

  // nested data
  description   FreeText?               @relation(fields: [descriptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  descriptionId String?                 @unique
  emails        OrganizationEmail[]
  locations     OrgLocation[]
  phones        OrganizationPhone[]
  photos        OrgPhoto[]
  services      OrgService[]
  socialMedia   OrgSocialMedia[]
  websites      OrgWebsite[]
  reviews       OrgReview[]
  serviceAreas  ServiceArea[]
  hours         OrgHours[] // for schedules that need to be assigned to locations
  attributes    OrganizationAttribute[]

  deleted      Boolean   @default(false)
  published    Boolean   @default(false)
  lastVerified DateTime?

  // Outside API connections
  outsideApi OutsideAPI[]

  source   Source @relation(fields: [sourceId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  sourceId String

  suggestions Suggestion[]

  // attachments
  userLists       SavedOrganization[]
  // Users associated with organization (staff)
  associatedUsers UserToOrganization[]
  allowedEditors  OrganizationPermission[]

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  auditLogs AuditLog[]
  notes     InternalNote[]

  /// Does this record need to be checked by staff after migration?
  checkMigration Boolean?
  //@@schema("org")

  @@index([name(sort: Asc)])
}

/// Organization email contacts - can be general or location specific
model OrgEmail {
  id         String  @id @default(cuid())
  legacyId   String? @unique /// old ID from MongoDB
  legacyDesc String?
  firstName  String?
  lastName   String?
  primary    Boolean @default(false)
  email      String
  published  Boolean @default(true)
  deleted    Boolean @default(false)

  title   UserTitle? @relation(fields: [titleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  titleId String?

  description   FreeText? @relation(references: [id], fields: [descriptionId])
  descriptionId String?   @unique

  associatedUsers UserToOrganization[]

  // optional - attach email to a specific location/service
  organization OrganizationEmail[]
  locations    OrgLocationEmail[]
  services     OrgServiceEmail[]
  /// associated only with location/service and not overall organization (for large orgs w/ multiple locations)
  locationOnly Boolean             @default(false)
  serviceOnly  Boolean             @default(false)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
  //@@schema("org")

  @@index([lastName(sort: Asc), firstName])
  @@index([email])
}

/// Org phone numbers - can be general or location specific
model OrgPhone {
  id              String   @id @default(cuid())
  legacyId        String?  @unique /// old ID from MongoDB
  legacyDesc      String?
  number          String
  ext             String?
  primary         Boolean  @default(false)
  published       Boolean  @default(true)
  deleted         Boolean  @default(false)
  migrationReview Boolean?

  /// Country profiles have intl dial prefix
  country   Country @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  countryId String

  phoneType   PhoneType? @relation(fields: [phoneTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  phoneTypeId String?

  associatedUsers UserToOrganization[]

  /// associated only with location and not overall organization (for large orgs w/ multiple locations)

  organization OrganizationPhone?
  locations    OrgLocationPhone[]
  services     OrgServicePhone[]
  phoneLangs   OrgPhoneLanguage[]

  locationOnly Boolean @default(false)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("org")
}

/// Organization's social media links
model OrgSocialMedia {
  id        String  @id @default(cuid())
  legacyId  String? @unique /// old ID from MongoDB
  username  String
  url       String
  deleted   Boolean @default(false)
  published Boolean @default(true)

  service   SocialMediaService @relation(fields: [serviceId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  serviceId String

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?

  orgLocation     OrgLocation? @relation(fields: [orgLocationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgLocationId   String?
  /// associated only with location and not overall organization (for large orgs w/ multiple locations)
  orgLocationOnly Boolean      @default(false)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("org")
}

model OrgWebsite {
  id            String    @id @default(cuid())
  url           String
  description   FreeText? @relation(fields: [descriptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  descriptionId String?   @unique
  isPrimary     Boolean   @default(false)

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?

  orgLocation     OrgLocation? @relation(fields: [orgLocationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgLocationId   String?
  orgLocationOnly Boolean      @default(false)

  languages OrgWebsiteLanguage[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("org")
}

/// Org location information
/// @zod.import(["import {Geometry} from '../../zod_util'"])
model OrgLocation {
  id       String  @id @default(cuid())
  legacyId String? @unique /// old ID from MongoDB
  name     String?
  street1  String
  street2  String?
  city     String
  postCode String?
  primary  Boolean @default(true)

  description   FreeText? @relation(fields: [descriptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  descriptionId String?   @unique

  govDist   GovDist? @relation(fields: [govDistId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  govDistId String?

  country   Country @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  countryId String

  longitude Float?                               @db.Real
  latitude  Float?                               @db.Real
  geo       Unsupported("Geometry(POINT,4326)")?
  geoJSON   Json /// @zod.custom.use(Geometry)
  geoWKT    String?

  published Boolean    @default(true)
  deleted   Boolean    @default(false)
  hours     OrgHours[]

  attributes LocationAttribute[]

  organization   Organization         @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgId          String
  allowedEditors LocationPermission[]

  emails       OrgLocationEmail[] /// if location specific
  websites     OrgWebsite[] /// if location specific
  phones       OrgLocationPhone[] /// if location specific
  photos       OrgPhoto[]
  services     OrgLocationService[]
  serviceAreas ServiceArea[]
  socialMedia  OrgSocialMedia[] /// if location specific

  // Outside API connections
  outsideApi    OutsideAPI[]
  apiLocationId String?

  reviews OrgReview[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  /// Does this record need to be checked by staff after migration?
  checkMigration Boolean?
  //@@schema("org")

  @@index([geo], type: SpGist)
  @@index([latitude, longitude])
  @@index([geoJSON(ops: JsonbPathOps)], type: Gin)
}

/// Organization photos
model OrgPhoto {
  id        String  @id @default(cuid())
  src       String
  height    Int?    @db.SmallInt
  width     Int?    @db.SmallInt
  published Boolean @default(false)
  deleted   Boolean @default(false)

  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgId        String?

  orgLocation   OrgLocation? @relation(fields: [orgLocationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgLocationId String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("org")
}

/// Organization location/service hours
///  day is stored as integer [0-6], Sunday = 0
///  start/end times are stored as RFC 3339 Timestamp (without zone)
///  as local time. Any timezone offset will be handled by runtime logic
model OrgHours {
  id       String   @id @default(cuid())
  /// Sun 0, Mon 1, Tue 2, Wed 3, Thu 3, Fri 4, Sat 6
  dayIndex Int      @default(0) @db.SmallInt
  start    DateTime @db.Timetz(0)
  end      DateTime @db.Timetz(0)
  closed   Boolean  @default(false)
  tz       String?

  orgLocation OrgLocation? @relation(fields: [orgLocId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocId    String?

  orgService     OrgService?   @relation(fields: [orgServiceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgServiceId   String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?

  needAssignment Boolean @default(false)
  needReview     Boolean @default(false)
  legacyId       String?
  legacyName     String?
  legacyNote     String?
  legacyStart    String?
  legacyEnd      String?
  legacyTz       String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("org")
}

model FreeText {
  id    String         @id @default(cuid())
  tsKey TranslationKey @relation(fields: [key, ns], references: [key, ns], onDelete: Cascade, onUpdate: Cascade)
  key   String
  ns    String

  Organization        Organization?
  OrgLocation         OrgLocation?
  OrgWebsite          OrgWebsite?
  OrgService          OrgService?          @relation("OrgServiceDescription")
  AttributeSupplement AttributeSupplement?
  OrgEmail            OrgEmail?
  OrgServiceName      OrgService?          @relation("OrgServiceName")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]
  //@@schema("org")

  @@unique([key, ns])
}

/// Organization's offered services - access instructions & details
///  associated with service tag
model OrgService {
  id            String             @id @default(cuid())
  legacyId      String?            @unique /// old ID from MongoDB
  published     Boolean            @default(false)
  deleted       Boolean            @default(false)
  legacyName    String?
  serviceName   FreeText?          @relation("OrgServiceName", fields: [serviceNameId], references: [id])
  serviceNameId String?            @unique
  // Nested data
  services      OrgServiceTag[]
  serviceAreas  ServiceArea[]
  hours         OrgHours[]
  reviews       OrgReview[]
  attributes    ServiceAttribute[]
  phones        OrgServicePhone[]
  emails        OrgServiceEmail[]
  accessDetails ServiceAccess[]
  description   FreeText?          @relation("OrgServiceDescription", fields: [descriptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  descriptionId String?            @unique

  // attachments
  organization   Organization?        @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?
  locations      OrgLocationService[]
  userLists      SavedService[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  /// Does this record need to be checked by staff after migration?
  checkMigration Boolean?
  //@@schema("org")

  @@index([organizationId(sort: Asc)])
  @@index([descriptionId])
}

model ServiceArea {
  id String @id @default(cuid())

  countries ServiceAreaCountry[]
  districts ServiceAreaDist[]

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?       @unique
  orgLocation    OrgLocation?  @relation(fields: [orgLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocationId  String?       @unique
  orgService     OrgService?   @relation(fields: [orgServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgServiceId   String?       @unique

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]

  //@@schema("org")
}

model ServiceAccess {
  id String @id @default(cuid())
  // the legacyIds are nowhere near unique
  // legacyId String? @unique /// old ID from MongoDB

  attributes ServiceAccessAttribute[]

  service   OrgService @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId String /// old ID from MongoDB

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("org")
}

/// User reviews/ratings of organization
model OrgReview {
  id         String  @id @default(cuid())
  legacyId   String? @unique /// old ID from MongoDB
  rating     Int?    @db.SmallInt
  reviewText String?
  visible    Boolean @default(true)
  deleted    Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  // Optional: Review can be attached to a specific service.
  orgService   OrgService? @relation(fields: [orgServiceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgServiceId String?

  // Optional: Review can be attached to a specific service.
  orgLocation   OrgLocation? @relation(fields: [orgLocationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgLocationId String?

  // Store the language of the review text
  // Use session locale value or Google Translate lang detect API
  // Optional: do not store anything if 'comment' is null
  language       Language?          @relation(fields: [langId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  langId         String?
  /// How confident is the API guess?
  langConfidence Float?
  translatedText TranslatedReview[]

  /// From https://perspectiveapi.com/
  toxicity Float?

  // Snapshot local community reviwer geographical info
  //  review should keep original geo data if LCR user updates their location.
  // Optional - only applicable if user is LCR
  lcrCity      String?
  lcrGovDist   GovDist? @relation(fields: [lcrGovDistId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  lcrGovDistId String?
  lcrCountry   Country? @relation(fields: [lcrCountryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  lcrCountryId String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
  //@@schema("org")

  @@index([organizationId(sort: Asc)])
  @@index([orgServiceId(sort: Asc)])
}

/// Store machine translations for reviews - save on API calls
model TranslatedReview {
  id String @id @default(cuid())

  review   OrgReview @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewId String

  language   Language @relation(fields: [languageId], references: [id])
  languageId String

  text String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]

  @@index([reviewId])
}

/// Additional Properties for Org/Service.
model AttributeCategory {
  id      String  @id @default(cuid())
  tag     String  @unique
  name    String  @unique
  icon    String?
  /// Internal description
  intDesc String?
  active  Boolean @default(true)

  namespace TranslationNamespace @relation(fields: [ns], references: [name], onDelete: Restrict, onUpdate: Cascade)
  ns        String

  attributes AttributeToCategory[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("system")
}

model Attribute {
  id      String  @id @default(cuid())
  tag     String  @unique
  name    String
  icon    String?
  iconBg  String?
  /// Internal description
  intDesc String?
  active  Boolean @default(true)

  /// Can this be used as a filter? No - `null` : Yes - Defined as INCLUDE or EXCLUDE
  filterType FilterType?

  /// Set this flag to have attribute display on Location/Visit cards
  showOnLocation Boolean?

  categories AttributeToCategory[]

  children AttributeNesting[] @relation("attribParentToChild")
  parents  AttributeNesting[] @relation("attribChildToParent")

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  // Defaults
  serviceCategoryDefaults ServiceCategoryDefaultAttribute[]
  serviceTagDefaults      ServiceTagDefaultAttribute[]

  attachedServices      ServiceAttribute[]
  attachedServiceAccess ServiceAccessAttribute[]
  attachedOrganiations  OrganizationAttribute[]
  attachedLocations     LocationAttribute[]
  attachedUsers         UserAttribute[]

  requireText       Boolean                        @default(false)
  requireLanguage   Boolean                        @default(false)
  requireCountry    Boolean                        @default(false)
  requireBoolean    Boolean                        @default(false)
  requireData       Boolean                        @default(false)
  requireDataSchema AttributeSupplementDataSchema? @relation(fields: [requiredSchemaId], references: [id])
  requiredSchemaId  String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

enum FilterType {
  INCLUDE
  EXCLUDE
}

model AttributeSupplement {
  id     String  @id @default(cuid())
  active Boolean @default(true)

  data    Json?
  boolean Boolean?

  country    Country?  @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId  String?
  govDist    GovDist?  @relation(fields: [govDistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  govDistId  String?
  language   Language? @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId String?
  text       FreeText? @relation(fields: [textId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  textId     String?   @unique

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("system")
  locationAttribute      LocationAttribute?      @relation(references: [attributeId, locationId], fields: [locationAttributeAttributeId, locationAttributeLocationId])
  organizationAttribute  OrganizationAttribute?  @relation(references: [attributeId, organizationId], fields: [organizationAttributeAttributeId, organizationAttributeOrganizationId])
  serviceAccessAttribute ServiceAccessAttribute? @relation(references: [attributeId, serviceAccessId], fields: [serviceAccessAttributeAttributeId, serviceAccessAttributeServiceAccessId])
  serviceAttribute       ServiceAttribute?       @relation(references: [attributeId, orgServiceId], fields: [serviceAttributeAttributeId, serviceAttributeOrgServiceId])
  userAttribute          UserAttribute?          @relation(references: [attributeId, userId], fields: [userAttributeAttributeId, userAttributeUserId])

  locationAttributeAttributeId          String?
  locationAttributeLocationId           String?
  organizationAttributeAttributeId      String?
  organizationAttributeOrganizationId   String?
  serviceAccessAttributeAttributeId     String?
  serviceAccessAttributeServiceAccessId String?
  serviceAttributeAttributeId           String?
  serviceAttributeOrgServiceId          String?
  userAttributeAttributeId              String?
  userAttributeUserId                   String?

  @@index([locationAttributeAttributeId, locationAttributeLocationId])
  @@index([organizationAttributeAttributeId, organizationAttributeOrganizationId])
  @@index([serviceAccessAttributeAttributeId, serviceAccessAttributeServiceAccessId])
  @@index([serviceAttributeAttributeId, serviceAttributeOrgServiceId])
  @@index([userAttributeAttributeId, userAttributeUserId])
}

model AttributeSupplementDataSchema {
  id         String @id @default(cuid())
  tag        String @unique
  name       String
  definition Json

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
  Attribute     Attribute[]
}

model ServiceCategory {
  id                String                            @id @default(cuid())
  category          String                            @unique
  active            Boolean                           @default(true)
  services          ServiceTag[]
  defaultAttributes ServiceCategoryDefaultAttribute[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
  @@index([tsKey, tsNs])
}

model ServiceTag {
  id                String                       @id @default(cuid())
  name              String
  active            Boolean                      @default(true)
  defaultAttributes ServiceTagDefaultAttribute[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  category   ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categoryId String

  /// Tables referencing ServiceTag
  attachedServices OrgServiceTag[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
  @@unique([name, categoryId])
  @@index([tsKey, tsNs])
  @@index([categoryId])
}

/// Phone number descriptors
model PhoneType {
  id             String     @id @default(cuid())
  type           String     @unique
  attachedPhones OrgPhone[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// Social media service properties
model SocialMediaService {
  id       String   @id @default(cuid())
  name     String   @unique
  urlBase  String[]
  logoIcon String
  internal Boolean  @default(false)

  organizationUsage OrgSocialMedia[]
  systemUsage       SocialMediaLink[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// Source of organization/user
///  *INTERNAL* - for tracking purposes
model Source {
  id     String     @id @default(cuid())
  source String     @unique
  type   SourceType

  organizations Organization[]
  users         User[]         @relation("userSource")

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("system")
}

enum SourceType {
  EXTERNAL
  ORGANIZATION
  SYSTEM
  USER

  //@@schema("system")
}

model Suggestion {
  id String @id @default(cuid())

  data           Json
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  handled        Boolean?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
}

/// Country metadata
/// @zod.import(["import {Geometry} from '../../zod_util'"])
model Country {
  id       String                                  @id @default(cuid())
  /// ISO 3166-1 alpha-2 Country code
  cca2     String                                  @unique @db.Char(2)
  /// ISO 3166-1 alpha-3 Country code
  cca3     String                                  @unique @db.Char(3)
  /// Country name (English).
  name     String                                  @unique(sort: Asc)
  /// International dialing code
  dialCode Int?                                    @db.SmallInt
  /// Country flag (emoji)
  flag     String
  /// GeoJSON object - required only if this will be considered a "service area"
  geo      Unsupported("Geometry(GEOMETRY,4326)")?
  geoJSON  Json? /// @zod.custom.use(Geometry)
  geoWKT   String?

  key   TranslationKey @relation("country", fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  demonym    TranslationKey? @relation("demonym", fields: [demonymKey, demonymNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  demonymKey String?
  demonymNs  String?

  // List of administrative subdivisions
  govDist GovDist[]

  activeForOrgs Boolean?

  /// Tables using Country
  attributeSupplements  AttributeSupplement[]
  addresses             OrgLocation[]
  reviews               OrgReview[]
  phones                OrgPhone[]
  serviceAreas          ServiceAreaCountry[]
  currentUsers          User[]                @relation("currentCountry")
  surveyCurrentLocation UserSurvey[]          @relation("currentLocation")
  surveyOrigin          UserSurvey[]          @relation("origin")

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
  @@unique([demonymKey, demonymNs])
  @@index([geo], type: SpGist)
}

/// Administrative districts for countries
/// @zod.import(["import {Geometry} from '../../zod_util'"])
model GovDist {
  id      String                                  @id @default(cuid())
  /// Name (English/Roman alphabet)
  name    String
  /// Slug - [country (ISO)]-[govdist]-[...]
  slug    String                                  @unique
  /// ISO-3166-2 code
  iso     String?
  /// Abbreviation (Optional)
  abbrev  String?
  /// GeoJSON object - required only if this will be considered a "service area"
  geo     Unsupported("Geometry(GEOMETRY,4326)")?
  geoJSON Json? /// @zod.custom.use(Geometry)
  geoWKT  String?

  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId String

  govDistType   GovDistType @relation(fields: [govDistTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  govDistTypeId String

  /// table can be used for "sub districts" (State -> County -> City)
  isPrimary    Boolean?  @default(true)
  parent       GovDist?  @relation(name: "associatedDistricts", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId     String?
  subDistricts GovDist[] @relation("associatedDistricts")

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  /// Tables using GovDist
  attributeSupplements AttributeSupplement[]
  locations            OrgLocation[]
  reviews              OrgReview[]
  users                User[]
  serviceAreas         ServiceAreaDist[]
  userSurveys          UserSurvey[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
  @@index([geo], type: SpGist)
  @@index([countryId])
  @@index([parentId])
}

/// Descriptor of principal administrative districts (state, province, county, etc.)
model GovDistType {
  id   String @id @default(cuid())
  name String @unique

  districts GovDist[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// Languages - ETF BCP 47 language tag
///  top level & regional locale (ex: 'en', "en-us", "en-ca")
model Language {
  id                 String  @id @default(cuid())
  languageName       String
  /// ETF BCP 47 language tag
  localeCode         String  @unique(sort: Asc)
  /// ISO 639-2
  iso6392            String? @db.Char(3)
  /// Language name in it's language.
  nativeName         String
  /// Is this language being actively used for translations?
  activelyTranslated Boolean @default(false)

  // fields using records
  attributeSupplements AttributeSupplement[]
  reviews              OrgReview[]
  users                User[]
  phones               OrgPhoneLanguage[]
  websites             OrgWebsiteLanguage[]
  reviewTranslation    TranslatedReview[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("system")
}

//
// Translation tables for database values.
//

// Top level category for i18next
model TranslationNamespace {
  name String @id

  crowdinId Int?

  keys TranslationKey[]

  attributeCategories AttributeCategory[]

  exportFile Boolean @default(true)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("system")
}

// Item key - i18next
model TranslationKey {
  //id        String               @id @default(cuid())
  /// Item key
  key       String
  /// Base string
  text      String
  /// Context
  context   String?
  /// Associated namespace
  namespace TranslationNamespace @relation(fields: [ns], references: [name], onDelete: Cascade, onUpdate: Cascade)
  ns        String

  crowdinId Int?

  // to manage plurals & ordinals
  plural       TranslationPlurals @default(SINGLE)
  pluralValues Json?

  /// Associated tables
  attribute          Attribute?
  country            Country?            @relation("country")
  demonym            Country?            @relation("demonym")
  freeText           FreeText?
  govDist            GovDist?
  govDistType        GovDistType?
  phoneType          PhoneType?
  serviceCategory    ServiceCategory?
  serviceTag         ServiceTag?
  socialMediaService SocialMediaService?
  userCommunity      UserCommunity?
  userEthnicity      UserEthnicity?
  userImmigration    UserImmigration?
  userSOGIdentity    UserSOGIdentity?
  userTitle          UserTitle?
  userType           UserType?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]
  //@@schema("system")

  /// Only 1 key per namespace
  // @@unique([ns(sort: Asc), key(sort: Asc)])
  @@id([ns, key])
}

enum TranslationPlurals {
  SINGLE
  PLURAL
  ORDINAL
  CONTEXT
}

model OutsideAPIService {
  service     String  @id
  description String
  urlPattern  String
  apiKey      String?

  instances OutsideAPI[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("system")
}

/// Define outside APIs in use
model OutsideAPI {
  id String @id @default(cuid())

  apiIdentifier String

  service     OutsideAPIService @relation(fields: [serviceName], references: [service], onDelete: Restrict, onUpdate: Cascade)
  serviceName String

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?
  orgLocation    OrgLocation?  @relation(fields: [orgLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocationId  String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("system")
}

/// Visibilty settings for user profile pages
model FieldVisibility {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  name           VisibilitySetting @default(NONE) /// All users
  email          VisibilitySetting @default(NONE) /// for service provider/professional
  image          VisibilitySetting @default(NONE) /// All users
  ethnicity      VisibilitySetting @default(NONE) /// for LCR accounts
  countryOrigin  VisibilitySetting @default(NONE) /// for LCR accounts
  SOG            VisibilitySetting @default(NONE) /// for LCR accounts
  communities    VisibilitySetting @default(NONE) /// for LCR accounts
  currentCity    VisibilitySetting @default(NONE) /// for LCR accounts
  currentGovDist VisibilitySetting @default(NONE) /// for LCR accounts
  currentCountry VisibilitySetting @default(NONE) /// for LCR accounts
  userType       VisibilitySetting @default(NONE) /// for specialized accounts
  associatedOrg  VisibilitySetting @default(NONE) /// for service provider
  orgTitle       VisibilitySetting @default(NONE) /// for service provider
  createdAt      VisibilitySetting @default(NONE) /// to facilitate "User since..."

  recordCreatedAt DateTime @default(now())
  recordupdatedAt DateTime @updatedAt

  auditLogs AuditLog[]

  //@@schema("system")
}

enum VisibilitySetting {
  NONE
  LOGGED_IN
  PROVIDER
  PUBLIC

  //@@schema("system")
}

model SocialMediaLink {
  id   String @id @default(cuid())
  href String @unique
  icon String

  service   SocialMediaService @relation(fields: [serviceId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  serviceId String

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  internalNotes InternalNote[]

  //@@schema("system")
}

/// Internal notes - multipurpose
model InternalNote {
  id       String  @id @default(cuid())
  legacyId String? @unique /// old ID from MongoDB
  text     String

  attribute                       Attribute?                     @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId                     String?
  attributeCategory               AttributeCategory?             @relation(fields: [attributeCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeCategoryId             String?
  // attributeRecord          AttributeRecord?      @relation(fields: [attributeRecordId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // attributeRecordId        String?
  attributeSupplement             AttributeSupplement?           @relation(fields: [attributeSupplementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeSupplementId           String?
  attributeSupplementDataSchema   AttributeSupplementDataSchema? @relation(fields: [attributeSupplementDataSchemaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeSupplementDataSchemaId String?
  country                         Country?                       @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId                       String?
  govDist                         GovDist?                       @relation(fields: [govDistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  govDistId                       String?
  govDistType                     GovDistType?                   @relation(fields: [govDistTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  govDistTypeId                   String?
  language                        Language?                      @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId                      String?
  organization                    Organization?                  @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId                  String?
  orgEmail                        OrgEmail?                      @relation(fields: [orgEmailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgEmailId                      String?
  orgHours                        OrgHours?                      @relation(fields: [orgHoursId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgHoursId                      String?
  orgLocation                     OrgLocation?                   @relation(fields: [orgLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocationId                   String?
  orgPhone                        OrgPhone?                      @relation(fields: [orgPhoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgPhoneId                      String?
  orgPhoto                        OrgPhoto?                      @relation(fields: [orgPhotoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgPhotoId                      String?
  orgReview                       OrgReview?                     @relation(fields: [orgReviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgReviewId                     String?
  orgService                      OrgService?                    @relation(fields: [orgServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgServiceId                    String?
  orgSocialMedia                  OrgSocialMedia?                @relation(fields: [orgSocialMediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgSocialMediaId                String?
  orgWebsite                      OrgWebsite?                    @relation(fields: [orgWebsiteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgWebsiteId                    String?
  outsideApi                      OutsideAPI?                    @relation(fields: [outsideApiId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  outsideApiId                    String?
  outsideAPIService               OutsideAPIService?             @relation(fields: [outsideAPIServiceService], references: [service], onDelete: Cascade, onUpdate: Cascade)
  outsideAPIServiceService        String?
  permission                      Permission?                    @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId                    String?
  phoneType                       PhoneType?                     @relation(fields: [phoneTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  phoneTypeId                     String?
  serviceAccess                   ServiceAccess?                 @relation(fields: [serviceAccessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceAccessId                 String?
  // serviceArea              ServiceArea?          @relation(fields: [serviceAreaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // serviceAreaId            String?
  serviceCategory                 ServiceCategory?               @relation(fields: [serviceCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceCategoryId               String?
  serviceTag                      ServiceTag?                    @relation(fields: [serviceTagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceTagId                    String?
  socialMediaLink                 SocialMediaLink?               @relation(fields: [socialMediaLinkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socialMediaLinkId               String?
  socialMediaService              SocialMediaService?            @relation(fields: [socialMediaServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socialMediaServiceId            String?
  source                          Source?                        @relation(fields: [sourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sourceId                        String?
  suggestion                      Suggestion?                    @relation(fields: [suggestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  suggestionId                    String?
  translation                     TranslationKey?                @relation(fields: [translationKey, translationNs], references: [key, ns], onDelete: Cascade, onUpdate: Cascade)
  translationKey                  String?
  translationNs                   String?
  translationNamespace            TranslationNamespace?          @relation(fields: [translationNamespaceName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  translationNamespaceName        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs AuditLog[]

  //@@schema("system")
}

/// Store changes made by users
model AuditLog {
  id        String            @id @default(cuid())
  actor     User              @relation("Recorded User", fields: [actorId], references: [id])
  actorId   String
  timestamp DateTime          @default(now())
  from      Json
  to        Json
  operation AuditLogOperation

  Account                              Account?                       @relation(fields: [accountId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  accountId                            String?
  Attribute                            Attribute?                     @relation(fields: [attributeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  attributeId                          String?
  AttributeCategory                    AttributeCategory?             @relation(fields: [attributeCategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  attributeCategoryId                  String?
  AttributeSupplement                  AttributeSupplement?           @relation(fields: [attributeSupplementId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  attributeSupplementId                String?
  AttributeSupplementDataSchema        AttributeSupplementDataSchema? @relation(fields: [attributeSupplementDataSchemaId], references: [id])
  attributeSupplementDataSchemaId      String?
  Country                              Country?                       @relation(fields: [countryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  countryId                            String?
  FieldVisibility                      FieldVisibility?               @relation(fields: [fieldVisibilityId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  fieldVisibilityId                    String?
  FreeText                             FreeText?                      @relation(fields: [freeTextId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  freeTextId                           String?
  GovDist                              GovDist?                       @relation(fields: [govDistId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  govDistId                            String?
  GovDistType                          GovDistType?                   @relation(fields: [govDistTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  govDistTypeId                        String?
  InternalNote                         InternalNote?                  @relation(fields: [internalNoteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  internalNoteId                       String?
  Language                             Language?                      @relation(fields: [languageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  languageId                           String?
  LocationPermission                   LocationPermission?            @relation(fields: [locationPermissionUserId, locationPermissionPermissionId, locationPermissionOrgLocationId], references: [userId, permissionId, orgLocationId], onDelete: SetNull, onUpdate: Cascade)
  locationPermissionUserId             String?
  locationPermissionPermissionId       String?
  locationPermissionOrgLocationId      String?
  Organization                         Organization?                  @relation(fields: [organizationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  organizationId                       String?
  OrganizationPermission               OrganizationPermission?        @relation(fields: [organizationPermissionUserId, organizationPermissionPermissionId, organizationPermissionOrganizationId], references: [userId, permissionId, organizationId], onDelete: SetNull, onUpdate: Cascade)
  organizationPermissionUserId         String?
  organizationPermissionPermissionId   String?
  organizationPermissionOrganizationId String?
  OrgEmail                             OrgEmail?                      @relation(fields: [orgEmailId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgEmailId                           String?
  OrgHours                             OrgHours?                      @relation(fields: [orgHoursId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgHoursId                           String?
  OrgLocation                          OrgLocation?                   @relation(fields: [orgLocationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgLocationId                        String?
  OrgPhone                             OrgPhone?                      @relation(fields: [orgPhoneId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgPhoneId                           String?
  OrgPhoto                             OrgPhoto?                      @relation(fields: [orgPhotoId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgPhotoId                           String?
  OrgReview                            OrgReview?                     @relation(fields: [orgReviewId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgReviewId                          String?
  OrgService                           OrgService?                    @relation(fields: [orgServiceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgServiceId                         String?
  OrgSocialMedia                       OrgSocialMedia?                @relation(fields: [orgSocialMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgSocialMediaId                     String?
  OrgWebsite                           OrgWebsite?                    @relation(fields: [orgWebsiteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgWebsiteId                         String?
  OutsideAPI                           OutsideAPI?                    @relation(fields: [outsideAPIId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  outsideAPIId                         String?
  OutsideAPIService                    OutsideAPIService?             @relation(fields: [outsideAPIServiceService], references: [service], onDelete: SetNull, onUpdate: Cascade)
  outsideAPIServiceService             String?
  Permission                           Permission?                    @relation(fields: [permissionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  permissionId                         String?
  PhoneType                            PhoneType?                     @relation(fields: [phoneTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  phoneTypeId                          String?
  ServiceAccess                        ServiceAccess?                 @relation(fields: [serviceAccessId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  serviceAccessId                      String?
  ServiceArea                          ServiceArea?                   @relation(fields: [serviceAreaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  serviceAreaId                        String?
  ServiceCategory                      ServiceCategory?               @relation(fields: [serviceCategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  serviceCategoryId                    String?
  ServiceTag                           ServiceTag?                    @relation(fields: [serviceTagId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  serviceTagId                         String?
  SocialMediaLink                      SocialMediaLink?               @relation(fields: [socialMediaLinkId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  socialMediaLinkId                    String?
  SocialMediaService                   SocialMediaService?            @relation(fields: [socialMediaServiceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  socialMediaServiceId                 String?
  Source                               Source?                        @relation(fields: [sourceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  sourceId                             String?
  Suggestion                           Suggestion?                    @relation(fields: [suggestionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  suggestionId                         String?
  TranslatedReview                     TranslatedReview?              @relation(fields: [translatedReviewId], references: [id])
  translatedReviewId                   String?
  Translation                          TranslationKey?                @relation(fields: [translationKey, translationNs], references: [key, ns], onDelete: SetNull, onUpdate: Cascade)
  translationKey                       String?
  translationNs                        String?
  TranslationNamespace                 TranslationNamespace?          @relation(fields: [translationNamespaceName], references: [name], onDelete: SetNull, onUpdate: Cascade)
  translationNamespaceName             String?
  User                                 User?                          @relation("AuditLogEntry", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId                               String?
  UserCommunity                        UserCommunity?                 @relation(fields: [userCommunityId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userCommunityId                      String?
  UserEthnicity                        UserEthnicity?                 @relation(fields: [userEthnicityId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userEthnicityId                      String?
  UserImmigration                      UserImmigration?               @relation(fields: [userImmigrationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userImmigrationId                    String?
  UserMail                             UserMail?                      @relation(fields: [userMailId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userMailId                           String?
  UserRole                             UserRole?                      @relation(fields: [userRoleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userRoleId                           String?
  UserSavedList                        UserSavedList?                 @relation(fields: [userSavedListId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userSavedListId                      String?
  UserSOGIdentity                      UserSOGIdentity?               @relation(fields: [userSOGIdentityId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userSOGIdentityId                    String?
  UserTitle                            UserTitle?                     @relation(fields: [userTitleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userTitleId                          String?
  UserType                             UserType?                      @relation(fields: [userTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userTypeId                           String?

  //@@schema("system")
}

enum AuditLogOperation {
  CREATE
  UPDATE
  DELETE
  LINK
  UNLINK
}

//
// RELATION TABLES
//

// Permissions

/// Assign permissions to user
model UserPermission {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([userId, permissionId])
}

/// Assign default permissions to role
model RolePermission {
  role         UserRole   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([roleId, permissionId])
}

/// Associate User to Org - w/ contact info
// For claimed organizations / organization staff
model UserToOrganization {
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  title      UserTitle? @relation(fields: [orgTitleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgTitleId String?
  email      OrgEmail?  @relation(fields: [orgEmailId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgEmailId String?    @unique
  phone      OrgPhone?  @relation(fields: [orgPhoneId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgPhoneId String?    @unique

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([userId, organizationId])
}

/// For certain permissions, attach Organization
model OrganizationPermission {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String

  authorized Boolean @default(false)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  linkedAt DateTime @default(now())

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]
  //@@schema("relation")

  @@id([userId, permissionId, organizationId])
}

/// For certain permissions, attach Organization
model LocationPermission {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String

  authorized Boolean @default(false)

  location      OrgLocation @relation(fields: [orgLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocationId String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]
  //@@schema("relation")

  @@id([userId, permissionId, orgLocationId])
}

//
// User links
//

/// For LCR accounts - link community to user profile
model UserCommunityLink {
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  community   UserCommunity @relation(fields: [communityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  communityId String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([userId, communityId])
}

/// For LCR accounts, link SOG identity to user profile
model UserSOGLink {
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String
  sogIdentity   UserSOGIdentity @relation(fields: [sogIdentityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sogIdentityId String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([userId, sogIdentityId])
}

/// Link a user's shared list with other users who can view.
model ListSharedWith {
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  list   UserSavedList @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([userId, listId])
}

/// Organizations saved to list
model SavedOrganization {
  list           UserSavedList @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId         String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([listId, organizationId])
}

/// Services saved to list
model SavedService {
  list      UserSavedList @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId    String
  service   OrgService    @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([listId, serviceId])
}

/// Role assigned to user
model AssignedRole {
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  role   UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([userId, roleId])
}

/// Link community to anon user survey
model SurveyCommunity {
  survey      UserSurvey    @relation(fields: [surveyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  surveyId    String
  community   UserCommunity @relation(fields: [communityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  communityId String
  //@@schema("relation")

  @@id([surveyId, communityId])
}

/// Link ethnicity to anon user survey
model SurveyEthnicity {
  survey      UserSurvey    @relation(fields: [surveyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  surveyId    String
  ethnicity   UserEthnicity @relation(fields: [ethnicityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ethnicityId String
  //@@schema("relation")

  @@id([surveyId, ethnicityId])
}

/// Link SOG identity to anon user survey
model SurveySOG {
  survey   UserSurvey      @relation(fields: [surveyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  surveyId String
  sog      UserSOGIdentity @relation(fields: [sogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sogId    String
  //@@schema("relation")

  @@id([surveyId, sogId])
}

//
// Organization
//

model OrganizationPhone {
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String
  phone          OrgPhone     @relation(fields: [phoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  phoneId        String       @unique

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([organizationId, phoneId])
}

model OrganizationEmail {
  email          OrgEmail     @relation(fields: [orgEmailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgEmailId     String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgEmailId, organizationId])
}

/// Link multiple languages to a website entry
model OrgWebsiteLanguage {
  website      OrgWebsite @relation(fields: [orgWebsiteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgWebsiteId String
  language     Language   @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId   String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgWebsiteId, languageId])
}

/// Link multiple languages to a phone number
model OrgPhoneLanguage {
  phone      OrgPhone @relation(fields: [orgPhoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgPhoneId String
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgPhoneId, languageId])
}

/// Link phone numbers to services
model OrgServicePhone {
  phone      OrgPhone   @relation(fields: [orgPhoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgPhoneId String
  service    OrgService @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId  String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgPhoneId, serviceId])
}

/// Link emails to services
model OrgServiceEmail {
  email      OrgEmail   @relation(fields: [orgEmailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgEmailId String
  service    OrgService @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId  String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgEmailId, serviceId])
}

/// Link emails to locations
model OrgLocationEmail {
  location      OrgLocation @relation(fields: [orgLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocationId String
  email         OrgEmail    @relation(fields: [orgEmailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgEmailId    String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgEmailId, orgLocationId])
}

model OrgLocationPhone {
  location      OrgLocation @relation(fields: [orgLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocationId String
  phone         OrgPhone    @relation(fields: [phoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  phoneId       String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgLocationId, phoneId])
}

/// Link services to organizations
model OrgLocationService {
  location      OrgLocation @relation(fields: [orgLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocationId String
  service       OrgService  @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId     String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgLocationId, serviceId])
}

/// Link tags to services
model OrgServiceTag {
  service   OrgService @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId String
  tag       ServiceTag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([serviceId, tagId])
}

/// Link countries to service areas
model ServiceAreaCountry {
  serviceArea   ServiceArea @relation(fields: [serviceAreaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceAreaId String
  country       Country     @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId     String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([serviceAreaId, countryId])
}

/// Link Governing Districts to service areas
model ServiceAreaDist {
  serviceArea   ServiceArea @relation(fields: [serviceAreaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceAreaId String
  govDist       GovDist     @relation(fields: [govDistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  govDistId     String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([serviceAreaId, govDistId])
}

//
// Attributes
//

/// Nesting attributes
model AttributeNesting {
  child   Attribute @relation("attribChildToParent", fields: [childId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  childId String

  parent   Attribute @relation("attribParentToChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId String

  linkedAt DateTime @default(now())

  @@id([parentId, childId])
}

/// Link attributes to users
model UserAttribute {
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  attribute   Attribute             @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId String
  supplement  AttributeSupplement[]

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([userId, attributeId])
}

/// Link attributes to organizations
model OrganizationAttribute {
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String
  attribute      Attribute             @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId    String
  supplement     AttributeSupplement[]

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([organizationId, attributeId])
}

/// Link attributes to locations
model LocationAttribute {
  location    OrgLocation           @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId  String
  attribute   Attribute             @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId String
  supplement  AttributeSupplement[]

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([locationId, attributeId])
}

/// Link attributes to services
model ServiceAttribute {
  service      OrgService            @relation(fields: [orgServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgServiceId String
  attribute    Attribute             @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId  String
  supplement   AttributeSupplement[]

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgServiceId, attributeId])
}

/// Link attributes to Service Access instructions
model ServiceAccessAttribute {
  serviceAccess   ServiceAccess         @relation(fields: [serviceAccessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceAccessId String
  attribute       Attribute             @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId     String
  supplement      AttributeSupplement[]

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([serviceAccessId, attributeId])
}

/// Link attributes to category
model AttributeToCategory {
  attribute   Attribute         @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId String
  category    AttributeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([attributeId, categoryId])
}

/// Link default attributes to service category
model ServiceCategoryDefaultAttribute {
  attribute   Attribute       @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId String
  category    ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([attributeId, categoryId])
}

/// Link default attributes to service tag
model ServiceTagDefaultAttribute {
  attribute   Attribute  @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId String
  service     ServiceTag @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId   String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([attributeId, serviceId])
}

model DataMigration {
  id          String   @id @default(cuid())
  jobId       String   @unique
  title       String
  description String?
  createdBy   String
  appliedAt   DateTime @default(now())
}

view orgsearchresults {
  id                String @unique
  name              String
  attributecategory Json
  servicetags       Json
}

view geography_columns {
  f_table_catalog    Unsupported("name")?
  f_table_schema     Unsupported("name")?
  f_table_name       Unsupported("name")?
  f_geography_column Unsupported("name")?
  coord_dimension    Int?
  srid               Int?
  type               String?

  @@ignore
}

view geometry_columns {
  f_table_catalog   String?              @db.VarChar(256)
  f_table_schema    Unsupported("name")?
  f_table_name      Unsupported("name")?
  f_geometry_column Unsupported("name")?
  coord_dimension   Int?
  srid              Int?
  type              String?              @db.VarChar(30)

  @@ignore
}

view attributeandcategory {
  attributeid  String @unique
  attributetag String
  categoryid   String
  categorytag  String
}

view servicetagcategory {
  tagid        String @unique
  tagname      String
  categoryid   String
  categoryname String
}
