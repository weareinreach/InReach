generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fieldReference", "postgresqlExtensions", "interactiveTransactions"]
  output          = "../../../node_modules/.prisma/client"
  // uncomment below when building aws-lambda
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../../../docs/database"
}

generator zod {
  provider      = "zod-prisma"
  output        = "../zod-schemas"
  imports       = "../zod-util"
  relationModel = "default"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

/// NextAuth Account **DO NOT ALTER**
model Account {
  id                String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String /// @zod.custom(imports.cuid)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

/// NextAuth Session **DO NOT ALTER**
model Session {
  // Do not change - NextAuth fields
  id           String   @id @default(cuid()) /// @zod.custom(imports.cuid)
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String /// @zod.custom(imports.cuid)
}

/// NextAuth Verification Token **DO NOT ALTER**
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// NextAuth User
model User {
  //
  // Do not change - NextAuth fields
  //
  id              String            @id @default(cuid()) /// @zod.custom(imports.cuid)
  name            String?
  email           String            @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  //
  // Ok to change below - Start of custom fields
  //
  legacyId        String? // old ID from MongoDB
  ethnicity       UserEthnicity[]
  countryOrigin   Country[]         @relation("countryOrigin")
  SOG             UserSOG[]
  birthYear       Int?              @db.SmallInt
  reasonForJoin   String?
  communities     UserCommunity[]
  permissions     PermissionItem[]
  /// assets that certain permissible roles are attributed to (edit org, etc)
  PermissionAsset PermissionAsset[]

  // Current location
  currentCity      String?
  currentGovDist   GovDist? @relation(fields: [currentGovDistId], references: [id])
  currentGovDistId String? /// @zod.custom(imports.cuid)
  currentCountry   Country? @relation(name: "currentCountry", fields: [currentCountryId], references: [id])
  currentCountryId String? /// @zod.custom(imports.cuid)

  // Data for AWS Cognito migration
  //  migrated from old DB - once user is migrated to Cognito, legacy fields are cleared, migrateDate is set
  legacyHash  String?
  legacySalt  String?
  migrateDate DateTime?

  // Relationships
  lists       UserSavedList[] @relation("userList")
  sharedLists UserSavedList[] @relation("sharedLists")

  immigration   UserImmigration? @relation(fields: [immigrationId], references: [id])
  immigrationId String? /// @zod.custom(imports.cuid)

  role   UserRole @relation(fields: [roleId], references: [id])
  roleId String /// @zod.custom(imports.cuid)

  userType   UserType @relation(fields: [userTypeId], references: [id])
  userTypeId String /// @zod.custom(imports.cuid)

  langPref   Language @relation(fields: [langPrefId], references: [id])
  langPrefId String /// @zod.custom(imports.cuid)

  source   Source? @relation(name: "userSource", fields: [sourceId], references: [id])
  sourceId String? /// @zod.custom(imports.cuid)

  // For claimed organizations / organization staff
  associatedOrg   Organization? @relation(fields: [associatedOrgId], references: [id])
  associatedOrgId String? /// @zod.custom(imports.cuid)
  orgTitle        UserTitle?    @relation(fields: [orgTitleId], references: [id])
  orgTitleId      String? /// @zod.custom(imports.cuid)
  orgEmail        OrgEmail?     @relation("associatedEmail")
  orgPhone        OrgPhone?     @relation("associatedPhone")

  FieldVisibility FieldVisibility[] /// For user profile page. All fields default to 'NONE'

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // audit log fields
  createUserEthnicity        UserEthnicity[]        @relation("createUserEthnicity")
  updateUserEthnicity        UserEthnicity[]        @relation("updateUserEthnicity")
  createUserImmigration      UserImmigration[]      @relation("createUserImmigration")
  updateUserImmigration      UserImmigration[]      @relation("updateUserImmigration")
  createUserSOG              UserSOG[]              @relation("createUserSOG")
  updateUserSOG              UserSOG[]              @relation("updateUserSOG")
  createUserType             UserType[]             @relation("createUserType")
  updateUserType             UserType[]             @relation("updateUserType")
  createUserCommunity        UserCommunity[]        @relation("createUserCommunity")
  updateUserCommunity        UserCommunity[]        @relation("updateUserCommunity")
  createOrganization         Organization[]         @relation("createOrganization")
  updateOrganization         Organization[]         @relation("updateOrganization")
  createOrgDescription       OrgDescription[]       @relation("createOrgDescription")
  updateOrgDescription       OrgDescription[]       @relation("updateOrgDescription")
  createOrgEmail             OrgEmail[]             @relation("createOrgEmail")
  updateOrgEmail             OrgEmail[]             @relation("updateOrgEmail")
  createUserTitle            UserTitle[]            @relation("createUserTitle")
  updateUserTitle            UserTitle[]            @relation("updateUserTitle")
  createOrgLocation          OrgLocation[]          @relation("createOrgLocation")
  updateOrgLocation          OrgLocation[]          @relation("updateOrgLocation")
  createInternalNote         InternalNote[]         @relation("createInternalNote")
  updateInternalNote         InternalNote[]         @relation("updateInternalNote")
  createOrgPhone             OrgPhone[]             @relation("createOrgPhone")
  updateOrgPhone             OrgPhone[]             @relation("updateOrgPhone")
  createOrgPhoto             OrgPhoto[]             @relation("createOrgPhoto")
  updateOrgPhoto             OrgPhoto[]             @relation("updateOrgPhoto")
  createPhoneType            PhoneType[]            @relation("createPhoneType")
  updatePhoneType            PhoneType[]            @relation("updatePhoneType")
  createOrgHours             OrgHours[]             @relation("createOrgHours")
  updateOrgHours             OrgHours[]             @relation("updateOrgHours")
  createOrgService           OrgService[]           @relation("createOrgService")
  updateOrgService           OrgService[]           @relation("updateOrgService")
  createOrgReview            OrgReview[]            @relation("createOrgReview")
  updateOrgReview            OrgReview[]            @relation("updateOrgReview")
  createServiceCategory      ServiceCategory[]      @relation("createServiceCategory")
  updateServiceCategory      ServiceCategory[]      @relation("updateServiceCategory")
  createServiceTag           ServiceTag[]           @relation("createServiceTag")
  updateServiceTag           ServiceTag[]           @relation("updateServiceTag")
  createOrgSocialMedia       OrgSocialMedia[]       @relation("createOrgSocialMedia")
  updateOrgSocialMedia       OrgSocialMedia[]       @relation("updateOrgSocialMedia")
  createSource               Source[]               @relation("createSource")
  updateSource               Source[]               @relation("updateSource")
  createCountry              Country[]              @relation("createCountry")
  updateCountry              Country[]              @relation("updateCountry")
  createGovDist              GovDist[]              @relation("createGovDist")
  updateGovDist              GovDist[]              @relation("updateGovDist")
  createLanguage             Language[]             @relation("createLanguage")
  updateLanguage             Language[]             @relation("updateLanguage")
  createTranslationNamespace TranslationNamespace[] @relation("createTranslationNamespace")
  updateTranslationNamespace TranslationNamespace[] @relation("updateTranslationNamespace")
  createTranslationKey       TranslationKey[]       @relation("createTranslationKey")
  updateTranslationKey       TranslationKey[]       @relation("updateTranslationKey")
  createSocialMediaService   SocialMediaService[]   @relation("createSocialMediaService")
  updateSocialMediaService   SocialMediaService[]   @relation("updateSocialMediaService")
  createUserRole             UserRole[]             @relation("createUserRole")
  updateUserRole             UserRole[]             @relation("updateUserRole")
  createPermissionItem       PermissionItem[]       @relation("createPermissionItem")
  updatePermissionItem       PermissionItem[]       @relation("updatePermissionItem")
  createOutsideAPI           OutsideAPI[]           @relation("createOutsideAPI")
  updateOutsideAPI           OutsideAPI[]           @relation("updateOutsideAPI")
  createGovDistType          GovDistType[]          @relation("createGovDistType")
  updateGovDistType          GovDistType[]          @relation("updateGovDistType")
  createNavigation           Navigation[]           @relation("createNavigation")
  updateNavigation           Navigation[]           @relation("updateNavigation")
  createFooterLink           FooterLink[]           @relation("createFooter")
  updateFooterLink           FooterLink[]           @relation("updateFooter")
  createSocialMediaLink      SocialMediaLink[]      @relation("createSocialMediaLink")
  updateSocialMediaLink      SocialMediaLink[]      @relation("updateSocialMediaLink")
  createAttributeCategory    AttributeCategory[]    @relation("createAttributeCategory")
  updateAttributeCategory    AttributeCategory[]    @relation("updateAttributeCategory")
  createAttribute            Attribute[]            @relation("createAttribute")
  updateAttribute            Attribute[]            @relation("updateAttribute")
}

/// User Role - Contains array of granular permissions
model UserRole {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  name String @unique

  permissions PermissionItem[]
  user        User[]

  createdAt   DateTime @default(now())
  createdBy   User?    @relation("createUserRole", fields: [createdById], references: [id])
  createdById String? /// @zod.custom(imports.cuid)
  updatedAt   DateTime @updatedAt
  updatedBy   User?    @relation("updateUserRole", fields: [updatedById], references: [id])
  updatedById String? /// @zod.custom(imports.cuid)
}

model PermissionAsset {
  id     String @id @default(cuid()) /// @zod.custom(imports.cuid)
  user   User   @relation(fields: [userId], references: [id])
  userId String /// @zod.custom(imports.cuid)

  permission   PermissionItem @relation(fields: [permissionId], references: [id])
  permissionId String /// @zod.custom(imports.cuid)

  organization Organization[]
  location     OrgLocation[]
}

/// Permission Definition
model PermissionItem {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  name String

  users  User[]
  roles  UserRole[]
  assets PermissionAsset[]

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createPermissionItem", fields: [createdById], references: [id])
  createdById String /// @zod.custom(imports.cuid)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updatePermissionItem", fields: [updatedById], references: [id])
  updatedById String /// @zod.custom(imports.cuid)
}

/// User Info - account type (seeker, org, lawyer, etc.)
///  use shorthand descriptions - front-end displayable text is defined in Translations
model UserType {
  id    String @id @default(cuid()) /// @zod.custom(imports.cuid)
  type  String @unique
  users User[]

  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String /// @zod.custom(imports.cuid)

  createdAt   DateTime @default(now())
  createdBy   User?    @relation("createUserType", fields: [createdById], references: [id])
  createdById String?
  updatedAt   DateTime @updatedAt
  updatedBy   User?    @relation("updateUserType", fields: [updatedById], references: [id])
  updatedById String?
}

/// User Info - professional title
///  this will be a searchable list
model UserTitle {
  id         String     @id @default(cuid()) /// @zod.custom(imports.cuid)
  title      String
  email      OrgEmail[]
  orgUser    User[]
  searchable Boolean    @default(false)

  language Language @relation(fields: [langId], references: [id])
  langId   String /// @zod.custom(imports.cuid)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createUserTitle", fields: [createdById], references: [id])
  createdById String /// @zod.custom(imports.cuid)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateUserTitle", fields: [updatedById], references: [id])
  updatedById String /// @zod.custom(imports.cuid)
}

/// User demographics - Ethnicity
model UserEthnicity {
  id        String @id @default(cuid()) /// @zod.custom(imports.cuid)
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  ethnicity String @unique
  users     User[]

  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String /// @zod.custom(imports.cuid)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createUserEthnicity", fields: [createdById], references: [id])
  createdById String /// @zod.custom(imports.cuid)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateUserEthnicity", fields: [updatedById], references: [id])
  updatedById String /// @zod.custom(imports.cuid)
}

/// User demographics - Immigration Status
model UserImmigration {
  id     String @id @default(cuid()) /// @zod.custom(imports.cuid)
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  status String
  users  User[]

  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String /// @zod.custom(imports.cuid)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createUserImmigration", fields: [createdById], references: [id])
  createdById String /// @zod.custom(imports.cuid)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateUserImmigration", fields: [updatedById], references: [id])
  updatedById String /// @zod.custom(imports.cuid)
}

/// User demographics - Sexual orientation
model UserSOG {
  id    String @id @default(cuid()) /// @zod.custom(imports.cuid)
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  sog   String
  users User[]

  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String /// @zod.custom(imports.cuid)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createUserSOG", fields: [createdById], references: [id])
  createdById String /// @zod.custom(imports.cuid)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateUserSOG", fields: [updatedById], references: [id])
  updatedById String /// @zod.custom(imports.cuid)
}

/// User demographics - Community
model UserCommunity {
  id        String @id @default(cuid()) /// @zod.custom(imports.cuid)
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  community String
  users     User[]

  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String /// @zod.custom(imports.cuid)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createUserCommunity", fields: [createdById], references: [id])
  createdById String /// @zod.custom(imports.cuid)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateUserCommunity", fields: [updatedById], references: [id])
  updatedById String /// @zod.custom(imports.cuid)
}

/// User's list(s) of saved resources.
model UserSavedList {
  id            String                  @id @default(cuid()) /// @zod.custom(imports.cuid)
  name          String
  organizations Organization[]
  visibility    UserSavedListVisibility @default(PRIVATE)
  sharedWith    User[]                  @relation("sharedLists")
  sharedLinkKey String?                 @unique

  ownedBy   User   @relation("userList", fields: [ownedById], references: [id])
  ownedById String /// @zod.custom(imports.cuid)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// List visiblity
enum UserSavedListVisibility {
  PRIVATE
  SHARED_USER
  SHARED_LINK
  PUBLIC
}

/// Main organization definition
model Organization {
  id             String           @id @default(cuid()) /// @zod.custom(imports.cuid)
  legacyId       String? /// old ID from MongoDB
  name           String
  slug           String           @unique /// @zod.regex(/^[a-z0-9]+(?:-[a-z0-9]+)*$/gm)
  description    OrgDescription[]
  email          OrgEmail[]
  location       OrgLocation[]
  notes          InternalNote[]
  phone          OrgPhone[]
  photos         OrgPhoto[]
  services       OrgService[]
  orgSocialMedia OrgSocialMedia[]
  userList       UserSavedList[]
  reviews        OrgReview[]
  attributes     Attribute[]

  deleted   Boolean @default(false)
  published Boolean @default(false)

  // Users associated with organization (staff)
  associatedUsers User[]
  allowedEditors  PermissionAsset[]

  // Outside API connections
  outsideApi    OutsideAPI? @relation(fields: [outsideApiId], references: [id])
  outsideApiId  String? /// @zod.custom(imports.cuid)
  apiIdentifier String?

  source   Source @relation(fields: [sourceId], references: [id])
  sourceId String /// @zod.custom(imports.cuid)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createOrganization", fields: [createdById], references: [id])
  createdById String /// @zod.custom(imports.cuid)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateOrganization", fields: [updatedById], references: [id])
  updatedById String /// @zod.custom(imports.cuid)
}

/// Description translations
///  this does not use i18next
model OrgDescription {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  text String

  language Language @relation(fields: [langId], references: [id])
  langId   String /// @zod.custom(imports.cuid)

  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createOrgDescription", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateOrgDescription", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]

  @@index([langId, orgId])
}

/// Organization email contacts - can be general or location specific
model OrgEmail {
  id        String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  firstName String
  lastName  String
  primary   Boolean
  email     String
  published Boolean @default(true)

  title   UserTitle @relation(fields: [titleId], references: [id])
  titleId String /// @zod.custom(imports.cuid)

  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String /// @zod.custom(imports.cuid)

  user   User?   @relation(name: "associatedEmail", fields: [userId], references: [id])
  userId String? @unique /// @zod.custom(imports.cuid)

  // optional - attach email to a specific location
  orgLocation     OrgLocation[]
  /// associated only with location and not overall organization (for large orgs w/ multiple locations)
  orgLocationOnly Boolean       @default(false)

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createOrgEmail", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateOrgEmail", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

/// Org phone numbers - can be general or location specific
model OrgPhone {
  id        String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  number    String
  published Boolean @default(true)
  primary   Boolean

  phoneType   PhoneType @relation(fields: [phoneTypeId], references: [id])
  phoneTypeId String /// @zod.custom(imports.cuid)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String /// @zod.custom(imports.cuid)

  user   User?   @relation(name: "associatedPhone", fields: [userId], references: [id])
  userId String? @unique /// @zod.custom(imports.cuid)

  orgLocation     OrgLocation[]
  /// associated only with location and not overall organization (for large orgs w/ multiple locations)
  orgLocationOnly Boolean       @default(false)

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createOrgPhone", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateOrgPhone", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

/// Organization's social media links
model OrgSocialMedia {
  id       String @id @default(cuid()) /// @zod.custom(imports.cuid)
  username String
  url      String

  service   SocialMediaService @relation(fields: [serviceId], references: [id])
  serviceId String /// @zod.custom(imports.cuid)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String /// @zod.custom(imports.cuid)

  orgLocation     OrgLocation[]
  /// associated only with location and not overall organization (for large orgs w/ multiple locations)
  orgLocationOnly Boolean       @default(false)

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createOrgSocialMedia", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateOrgSocialMedia", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

/// Org location information
model OrgLocation {
  id       String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  street1  String
  street2  String
  city     String
  postCode String?

  govDist   GovDist? @relation(fields: [govDistId], references: [id])
  govDistId String? /// @zod.custom(imports.cuid)

  country   Country @relation(fields: [countryId], references: [id])
  countryId String /// @zod.custom(imports.cuid)

  longitude Decimal @db.Decimal(4, 3)
  latitude  Decimal @db.Decimal(4, 3)
  geoJSON   Json /// @zod.custom(imports.GeoJSONSchema)

  published  Boolean     @default(true)
  hours      OrgHours[]
  attributes Attribute[]

  organization   Organization      @relation(fields: [orgId], references: [id])
  orgId          String /// @zod.custom(imports.cuid)
  allowedEditors PermissionAsset[]

  email       OrgEmail[] /// if location specific
  phone       OrgPhone[] /// if location specific
  socialMedia OrgSocialMedia[] /// if location specific
  photos      OrgPhoto[]

  // Outside API connections
  outsideApi    OutsideAPI? @relation(fields: [outsideApiId], references: [id])
  outsideApiId  String? /// @zod.custom(imports.cuid)
  apiLocationId String?

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createOrgLocation", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateOrgLocation", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]

  @@index([latitude, longitude])
}

/// Organization photos
model OrgPhoto {
  id        String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  src       String
  height    Int?    @db.SmallInt
  width     Int?    @db.SmallInt
  published Boolean @default(false)

  organization Organization? @relation(fields: [orgId], references: [id])
  orgId        String? /// @zod.custom(imports.cuid)

  orgLocation   OrgLocation? @relation(fields: [orgLocationId], references: [id])
  orgLocationId String? /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createOrgPhoto", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateOrgPhoto", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

/// Organization location/service hours
///  day is stored as integer [0-6], Sunday = 0
///  start/end times are stored as RFC 3339 Timestamp (without zone)
///  as local time. Any timezone offset will be handled by runtime logic
model OrgHours {
  id       String   @id @default(cuid()) /// @zod.custom(imports.cuid)
  dayIndex Int      @default(0) @db.SmallInt // Sunday = 0
  start    DateTime @db.Time(0)
  end      DateTime @db.Time(0)

  orgLocation OrgLocation? @relation(fields: [orgLocId], references: [id])
  orgLocId    String? /// @zod.custom(imports.cuid)

  orgService   OrgService? @relation(fields: [orgServiceId], references: [id])
  orgServiceId String? /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createOrgHours", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateOrgHours", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

/// Organization's offered services - access instructions & details
///  associated with service tag
model OrgService {
  id                 String       @id @default(cuid()) /// @zod.custom(imports.cuid)
  published          Boolean      @default(false)
  accessInstructions String?
  description        String?
  hours              OrgHours[]
  service            ServiceTag[]
  attributes         Attribute[]

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String /// @zod.custom(imports.cuid)

  language Language @relation(fields: [langId], references: [id])
  langId   String /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createOrgService", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateOrgService", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

/// User reviews/ratings of organization
model OrgReview {
  id      String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  rating  Int     @db.SmallInt
  comment String?
  visible Boolean @default(true)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String /// @zod.custom(imports.cuid)

  // Optional: Review can be attached to a specific service.
  service   ServiceTag? @relation(fields: [serviceId], references: [id])
  serviceId String? /// @zod.custom(imports.cuid)

  // Store the language of the review text
  // Use session locale value or Google Translate lang detect API
  // Optional: do not store anything if 'comment' is null
  language Language? @relation(fields: [langId], references: [id])
  langId   String? /// @zod.custom(imports.cuid)

  // Snapshot local community reviwer geographical info
  //  review should keep original geo data if LCR user updates their location.
  // Optional - only applicable if user is LCR
  lcrCity      String?
  lcrGovDist   GovDist? @relation(fields: [lcrGovDistId], references: [id])
  lcrGovDistId String? /// @zod.custom(imports.cuid)
  lcrCountry   Country? @relation(fields: [lcrCountryId], references: [id])
  lcrCountryId String? /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createOrgReview", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateOrgReview", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

/// Additional Properties for Org/Service.
model AttributeCategory {
  id          String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  name        String
  description String?

  namespace   TranslationNamespace? @relation(fields: [namespaceId], references: [id])
  namespaceId String? /// @zod.custom(imports.cuid)

  attribute Attribute[]

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createAttributeCategory", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateAttributeCategory", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

model Attribute {
  id          String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  name        String
  description String?

  category   AttributeCategory @relation(fields: [categoryId], references: [id])
  categoryId String /// @zod.custom(imports.cuid)

  key   TranslationKey? @relation(fields: [keyId], references: [id])
  keyId String? /// @zod.custom(imports.cuid)

  /// Tables using Attribute
  organization    Organization[]
  orgLocation     OrgLocation[]
  orgService      OrgService[]
  serviceCategory ServiceCategory[]
  serviceTag      ServiceTag[]

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createAttribute", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateAttribute", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

model ServiceCategory {
  id         String       @id @default(cuid()) /// @zod.custom(imports.cuid)
  category   String       @unique
  services   ServiceTag[]
  attributes Attribute[]

  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createServiceCategory", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateServiceCategory", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

model ServiceTag {
  id         String      @id @default(cuid()) /// @zod.custom(imports.cuid)
  name       String
  attributes Attribute[]

  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String /// @zod.custom(imports.cuid)

  category   ServiceCategory @relation(fields: [categoryId], references: [id])
  categoryId String /// @zod.custom(imports.cuid)

  /// Tables referencing ServiceTag
  orgServices OrgService[]
  orgReview   OrgReview[]

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createServiceTag", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateServiceTag", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]

  @@unique([name, categoryId])
}

/// Phone number descriptors
model PhoneType {
  id       String     @id @default(cuid()) /// @zod.custom(imports.cuid)
  type     String
  orgPhone OrgPhone[]

  language Language @relation(fields: [langId], references: [id])
  langId   String /// @zod.custom(imports.cuid)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createPhoneType", fields: [createdById], references: [id])
  createdById String /// @zod.custom(imports.cuid)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updatePhoneType", fields: [updatedById], references: [id])
  updatedById String /// @zod.custom(imports.cuid)
}

/// Social media service properties
model SocialMediaService {
  id       String @id @default(cuid()) /// @zod.custom(imports.cuid)
  name     String
  urlBase  String
  logoIcon String

  orgSocialMedia OrgSocialMedia[]

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createSocialMediaService", fields: [createdById], references: [id])
  createdById String /// @zod.custom(imports.cuid)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateSocialMediaService", fields: [updatedById], references: [id])
  updatedById String /// @zod.custom(imports.cuid)
}

/// Source of organization/user
///  *INTERNAL* - for tracking purposes
model Source {
  id     String     @id @default(cuid()) /// @zod.custom(imports.cuid)
  source String
  type   SourceType

  organization Organization[]
  user         User[]         @relation("userSource")

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createSource", fields: [createdById], references: [id])
  createdById String /// @zod.custom(imports.cuid)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateSource", fields: [updatedById], references: [id])
  updatedById String /// @zod.custom(imports.cuid)
}

enum SourceType {
  ORGANIZATION
  USER
}

/// Country metadata
model Country {
  id       String @id @default(cuid()) /// @zod.custom(imports.cuid)
  /// ISO 3166-1 alpha-2 Country code
  cca2     String @unique @db.Char(2)
  /// ISO 3166-1 alpha-3 Country code
  cca3     String @unique @db.Char(3)
  /// Country name (English).
  name     String
  /// International dialing code
  dialCode Int?   @db.SmallInt
  /// Country flag (emoji)
  flag     String
  /// GeoJSON object - required only if this will be considered a "service area"
  geoJSON  Json? /// @zod.custom(imports.GeoJSONSchema)

  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String /// @zod.custom(imports.cuid)

  // List of administrative subdivisions
  govDist GovDist[]

  /// Tables using Country
  orgAddress OrgLocation[]
  orgReviews OrgReview[]

  originUsers  User[] @relation("countryOrigin")
  currentUsers User[] @relation("currentCountry")

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createCountry", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateCountry", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

/// Administrative districts for countries
model GovDist {
  id      String @id @default(cuid()) /// @zod.custom(imports.cuid)
  /// ISO-3166-2 code
  iso     String @unique
  /// Name (English/Roman alphabet)
  name    String
  /// GeoJSON object - required only if this will be considered a "service area"
  geoJSON Json? /// @zod.custom(imports.GeoJSONSchema)

  country   Country @relation(fields: [countryId], references: [id])
  countryId String /// @zod.custom(imports.cuid)

  govDistType   GovDistType @relation(fields: [govDistTypeId], references: [id])
  govDistTypeId String /// @zod.custom(imports.cuid)

  /// table can be used for "sub districts" (State -> County -> City)
  isPrimary    Boolean?  @default(true)
  parent       GovDist?  @relation(name: "associatedDistricts", fields: [parentId], references: [id])
  parentId     String?
  subDistricts GovDist[] @relation("associatedDistricts")

  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String /// @zod.custom(imports.cuid)

  /// Tables using GovDist
  orgLocation OrgLocation[]
  orgReview   OrgReview[]
  user        User[]

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createGovDist", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateGovDist", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

/// Descriptor of principal administrative districts (state, province, county, etc.)
model GovDistType {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  name String

  govDist GovDist[]

  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String /// @zod.custom(imports.cuid)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createGovDistType", fields: [createdById], references: [id])
  createdById String /// @zod.custom(imports.cuid)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateGovDistType", fields: [updatedById], references: [id])
  updatedById String /// @zod.custom(imports.cuid)
}

/// Languages - ETF BCP 47 language tag
///  top level & regional locale (ex: 'en', "en-us", "en-ca")
model Language {
  id                 String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  languageName       String
  /// ETF BCP 47 language tag
  localeCode         String  @unique
  /// ISO 639-2
  iso6392            String? @db.Char(3)
  /// Language name in it's language.
  nativeName         String
  /// Is this language being actively used for translations?
  activelyTranslated Boolean @default(false)

  // fields using records
  orgDescriptions OrgDescription[]
  orgService      OrgService[]
  user            User[]
  userTitle       UserTitle[]
  orgReview       OrgReview[]
  phoneType       PhoneType[]

  createdAt    DateTime       @default(now())
  createdBy    User?          @relation("createLanguage", fields: [createdById], references: [id])
  createdById  String? /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User?          @relation("updateLanguage", fields: [updatedById], references: [id])
  updatedById  String? /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

//
// Translation tables for database values.
//

// Top level category for i18next
model TranslationNamespace {
  id String @id @default(cuid()) /// @zod.custom(imports.cuid)

  name String @unique

  keys TranslationKey[]

  attributeCategory AttributeCategory[]

  createdAt    DateTime       @default(now())
  createdBy    User?          @relation("createTranslationNamespace", fields: [createdById], references: [id])
  createdById  String? /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User?          @relation("updateTranslationNamespace", fields: [updatedById], references: [id])
  updatedById  String? /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

// Item key - i18next
model TranslationKey {
  id          String               @id @default(cuid()) /// @zod.custom(imports.cuid)
  /// Item key
  key         String
  /// Base string
  text        String
  /// Context
  context     String?
  /// Associated namespace
  namespace   TranslationNamespace @relation(fields: [namespaceId], references: [id])
  namespaceId String /// @zod.custom(imports.cuid)

  // to manage plurals & ordinals
  parent   TranslationKey?  @relation("translationSubItems", fields: [parentId], references: [id])
  parentId String? /// @zod.custom(imports.cuid)
  children TranslationKey[] @relation("translationSubItems")

  /// Associated tables
  userType        UserType[]
  userEthnicity   UserEthnicity[]
  userImmigration UserImmigration[]
  userSOG         UserSOG[]
  userCommunity   UserCommunity[]
  serviceCategory ServiceCategory[]
  serviceTag      ServiceTag[]
  country         Country[]
  govDist         GovDist[]
  govDistType     GovDistType[]
  navigation      Navigation[]
  footerLink      FooterLink[]
  socialMediaLink SocialMediaLink[]
  attribute       Attribute[]

  createdAt    DateTime       @default(now())
  createdBy    User?          @relation("createTranslationKey", fields: [createdById], references: [id])
  createdById  String? /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User?          @relation("updateTranslationKey", fields: [updatedById], references: [id])
  updatedById  String? /// @zod.custom(imports.cuid)
  internalNote InternalNote[]

  /// Only 1 key per namespace
  @@unique([key, namespaceId])
}

/// Define outside APIs in use
model OutsideAPI {
  id          String @id @default(cuid()) /// @zod.custom(imports.cuid)
  name        String @unique
  description String

  urlPattern String

  Organization Organization[]
  OrgLocation  OrgLocation[]

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createOutsideAPI", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateOutsideAPI", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]
}

/// Visibilty settings for user profile pages
model FieldVisibility {
  id     String @id @default(cuid()) /// @zod.custom(imports.cuid)
  user   User   @relation(fields: [userId], references: [id])
  userId String /// @zod.custom(imports.cuid)

  name           VisibilitySetting @default(NONE)
  email          VisibilitySetting @default(NONE)
  image          VisibilitySetting @default(NONE)
  ethnicity      VisibilitySetting @default(NONE)
  countryOrigin  VisibilitySetting @default(NONE)
  SOG            VisibilitySetting @default(NONE)
  communities    VisibilitySetting @default(NONE)
  currentCity    VisibilitySetting @default(NONE)
  currentGovDist VisibilitySetting @default(NONE)
  currentCountry VisibilitySetting @default(NONE)
  userType       VisibilitySetting @default(NONE) /// for specialized accounts
  associatedOrg  VisibilitySetting @default(NONE)
  orgTitle       VisibilitySetting @default(NONE)
  createdAt      VisibilitySetting @default(NONE) /// to facilitate "User since..."
}

enum VisibilitySetting {
  NONE
  LOGGED_IN
  PROVIDER
  PUBLIC
}

/// Define the App navigation tree
///  this will be used to generate a json file at build time
model Navigation {
  id       String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  display  String
  href     String?
  isParent Boolean @default(true)
  icon     String?

  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String

  parentItem Navigation?  @relation(name: "navHeirarchy", fields: [parentId], references: [id])
  parentId   String? /// @zod.custom(imports.cuid)
  children   Navigation[] @relation("navHeirarchy")

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createNavigation", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateNavigation", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]

  @@unique([display, href])
}

model FooterLink {
  id               String         @id @default(cuid()) /// @zod.custom(imports.cuid)
  display          String
  href             String
  icon             String?
  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createFooter", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateFooter", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]

  @@unique([display, href])
}

model SocialMediaLink {
  id      String @id @default(cuid()) /// @zod.custom(imports.cuid)
  service String
  href    String
  icon    String

  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id])
  translationKeyId String

  createdAt    DateTime       @default(now())
  createdBy    User           @relation("createSocialMediaLink", fields: [createdById], references: [id])
  createdById  String /// @zod.custom(imports.cuid)
  updatedAt    DateTime       @updatedAt
  updatedBy    User           @relation("updateSocialMediaLink", fields: [updatedById], references: [id])
  updatedById  String /// @zod.custom(imports.cuid)
  internalNote InternalNote[]

  @@unique([service, href])
}

/// Internal notes - multipurpose
model InternalNote {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  text String

  organization           Organization?         @relation(fields: [orgId], references: [id])
  orgId                  String? /// @zod.custom(imports.cuid)
  orgDescription         OrgDescription?       @relation(fields: [orgDescriptionId], references: [id])
  orgDescriptionId       String? /// @zod.custom(imports.cuid)
  orgEmail               OrgEmail?             @relation(fields: [orgEmailId], references: [id])
  orgEmailId             String? /// @zod.custom(imports.cuid)
  orgPhone               OrgPhone?             @relation(fields: [orgPhoneId], references: [id])
  orgPhoneId             String? /// @zod.custom(imports.cuid)
  orgSocialMedia         OrgSocialMedia?       @relation(fields: [orgSocialMediaId], references: [id])
  orgSocialMediaId       String? /// @zod.custom(imports.cuid)
  orgLocation            OrgLocation?          @relation(fields: [orgLocationId], references: [id])
  orgLocationId          String? /// @zod.custom(imports.cuid)
  orgPhoto               OrgPhoto?             @relation(fields: [orgPhotoId], references: [id])
  orgPhotoId             String? /// @zod.custom(imports.cuid)
  orgHours               OrgHours?             @relation(fields: [orgHoursId], references: [id])
  orgHoursId             String? /// @zod.custom(imports.cuid)
  orgService             OrgService?           @relation(fields: [orgServiceId], references: [id])
  orgServiceId           String? /// @zod.custom(imports.cuid)
  orgReview              OrgReview?            @relation(fields: [orgReviewId], references: [id])
  orgReviewId            String? /// @zod.custom(imports.cuid)
  serviceCategory        ServiceCategory?      @relation(fields: [serviceCategoryId], references: [id])
  serviceCategoryId      String? /// @zod.custom(imports.cuid)
  serviceTag             ServiceTag?           @relation(fields: [serviceTagId], references: [id])
  serviceTagId           String? /// @zod.custom(imports.cuid)
  country                Country?              @relation(fields: [countryId], references: [id])
  countryId              String? /// @zod.custom(imports.cuid)
  govDist                GovDist?              @relation(fields: [govDistId], references: [id])
  govDistId              String? /// @zod.custom(imports.cuid)
  language               Language?             @relation(fields: [languageId], references: [id])
  languageId             String? /// @zod.custom(imports.cuid)
  translationNamespace   TranslationNamespace? @relation(fields: [translationNamespaceId], references: [id])
  translationNamespaceId String? /// @zod.custom(imports.cuid)
  translationKey         TranslationKey?       @relation(fields: [translationKeyId], references: [id])
  translationKeyId       String? /// @zod.custom(imports.cuid)
  outsideApi             OutsideAPI?           @relation(fields: [outsideApiId], references: [id])
  outsideApiId           String? /// @zod.custom(imports.cuid)
  navigation             Navigation?           @relation(fields: [navigationId], references: [id])
  navigationId           String? /// @zod.custom(imports.cuid)
  footerLink             FooterLink?           @relation(fields: [footerLinkId], references: [id])
  footerLinkId           String? /// @zod.custom(imports.cuid)

  createdAt           DateTime           @default(now())
  createdBy           User               @relation("createInternalNote", fields: [createdById], references: [id])
  createdById         String /// @zod.custom(imports.cuid)
  updatedAt           DateTime           @updatedAt
  updatedBy           User               @relation("updateInternalNote", fields: [updatedById], references: [id])
  updatedById         String /// @zod.custom(imports.cuid)
  socialMediaLink     SocialMediaLink?   @relation(fields: [socialMediaLinkId], references: [id])
  socialMediaLinkId   String?
  attributeCategory   AttributeCategory? @relation(fields: [propertyCategoryId], references: [id])
  propertyCategoryId  String?
  attribute           Attribute?         @relation(fields: [propertyAttributeId], references: [id])
  propertyAttributeId String?
}
