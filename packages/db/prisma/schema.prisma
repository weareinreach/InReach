generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch", "nativeDistinct", "postgresqlExtensions", "tracing", "views", "relationJoins"]
}

generator aws {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch", "nativeDistinct", "postgresqlExtensions", "tracing", "views", "relationJoins"]
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x"]
}

generator enum {
  provider = "node node_modules/prisma-generator-ts-enums"
  output   = "../enums/index.ts"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DB_DIRECT_URL")
  extensions = [pg_stat_statements, postgis]
}

/// NextAuth Account **DO NOT ALTER**
model Account {
  id                String   @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation("Account", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

/// NextAuth Session **DO NOT ALTER**
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// NextAuth Verification Token **DO NOT ALTER**
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// NextAuth User
model User {
  id                  String                   @id @default(cuid())
  name                String?
  email               String                   @unique
  emailVerified       DateTime?
  image               String?
  /// old ID from MongoDB
  legacyId            String?                  @unique
  active              Boolean                  @default(true)
  currentCity         String?
  currentGovDistId    String?
  currentCountryId    String?
  legacyHash          String?
  legacySalt          String?
  migrateDate         DateTime?
  userTypeId          String
  langPrefId          String?
  sourceId            String?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  signupData          Json?
  accounts            Account[]                @relation("Account")
  roles               AssignedRole[]
  attributes          AttributeSupplement[]
  fieldVisibility     FieldVisibility?
  listsSharedWithUser ListSharedWith[]
  locationPermission  LocationPermission[]
  reviews             OrgReview[]
  orgPermission       OrganizationPermission[]
  sessions            Session[]
  Suggestion          Suggestion[]
  currentCountry      Country?                 @relation("currentCountry", fields: [currentCountryId], references: [id])
  currentGovDist      GovDist?                 @relation(fields: [currentGovDistId], references: [id])
  langPref            Language?                @relation(fields: [langPrefId], references: [id])
  source              Source?                  @relation("userSource", fields: [sourceId], references: [id])
  userType            UserType                 @relation(fields: [userTypeId], references: [id])
  communities         UserCommunityLink[]
  mailSent            UserMail[]               @relation("mailFrom")
  mailReceived        UserMail[]               @relation("mailTo")
  permissions         UserPermission[]
  userSOGIdentity     UserSOGLink[]
  savedLists          UserSavedList[]
  orgAssociations     UserToOrganization[]

  @@index([userTypeId])
}

/// User Role - Contains array of granular permissions
/// Internal use
model UserRole {
  id            String           @id @default(cuid())
  name          String           @unique
  tag           String           @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  active        Boolean          @default(true)
  usersAssigned AssignedRole[]
  permissions   RolePermission[]
}

/// Permission Definition
model Permission {
  id            String                   @id @default(cuid())
  name          String                   @unique
  description   String?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  active        Boolean                  @default(true)
  internalNotes InternalNote[]
  locations     LocationPermission[]
  orgs          OrganizationPermission[]
  roles         RolePermission[]
  users         UserPermission[]
}

/// User Info - account type (seeker, org, lawyer, etc.)
/// use shorthand descriptions - front-end displayable text is defined in Translations
model UserType {
  id        String         @id @default(cuid())
  type      String         @unique
  tsKey     String
  tsNs      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  active    Boolean        @default(true)
  users     User[]
  key       TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns])

  @@unique([tsKey, tsNs])
}

/// User Info - professional title
/// this will be a searchable list
model UserTitle {
  id         String               @id @default(cuid())
  title      String               @unique
  searchable Boolean              @default(false)
  tsKey      String
  tsNs       String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  active     Boolean              @default(true)
  email      OrgEmail[]
  key        TranslationKey       @relation(fields: [tsKey, tsNs], references: [key, ns])
  orgUsers   UserToOrganization[]

  @@unique([tsKey, tsNs])
}

model UserSurvey {
  id               String            @id @default(cuid())
  birthYear        Int?              @db.SmallInt
  reasonForJoin    String?
  countryOriginId  String?
  immigrationId    String?
  currentCity      String?
  currentGovDistId String?
  currentCountryId String?
  ethnicityOther   String?
  immigrationOther String?
  communities      SurveyCommunity[]
  ethnicities      SurveyEthnicity[]
  identifiesAs     SurveySOG[]
  countryOrigin    Country?          @relation("origin", fields: [countryOriginId], references: [id])
  currentCountry   Country?          @relation("currentLocation", fields: [currentCountryId], references: [id])
  currentGovDist   GovDist?          @relation(fields: [currentGovDistId], references: [id])
  immigration      UserImmigration?  @relation(fields: [immigrationId], references: [id])
}

/// User demographics - Ethnicity
model UserEthnicity {
  id        String            @id @default(cuid())
  /// use shorthand descriptions - front-end displayable text is defined in Translations
  ethnicity String            @unique
  tsKey     String
  tsNs      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  active    Boolean           @default(true)
  surveys   SurveyEthnicity[]
  key       TranslationKey    @relation(fields: [tsKey, tsNs], references: [key, ns])

  @@unique([tsKey, tsNs])
}

/// User demographics - Immigration Status
model UserImmigration {
  id        String         @id @default(cuid())
  /// use shorthand descriptions - front-end displayable text is defined in Translations
  status    String         @unique
  tsKey     String
  tsNs      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  active    Boolean        @default(true)
  key       TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns])
  surveys   UserSurvey[]

  @@unique([tsKey, tsNs])
}

/// User demographics - Sexual orientation / Identity
model UserSOGIdentity {
  id         String         @id @default(cuid())
  /// use shorthand descriptions - front-end displayable text is defined in Translations
  identifyAs String         @unique
  tsKey      String
  tsNs       String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  active     Boolean        @default(true)
  surveys    SurveySOG[]
  key        TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns])
  users      UserSOGLink[]

  @@unique([tsKey, tsNs])
}

/// User demographics - Community
model UserCommunity {
  id        String              @id @default(cuid())
  /// use shorthand descriptions - front-end displayable text is defined in Translations
  community String              @unique
  tsKey     String
  tsNs      String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  active    Boolean             @default(true)
  surveys   SurveyCommunity[]
  key       TranslationKey      @relation(fields: [tsKey, tsNs], references: [key, ns])
  users     UserCommunityLink[]

  @@unique([tsKey, tsNs])
}

/// User's list(s) of saved resources.
model UserSavedList {
  id            String              @id @default(cuid())
  name          String
  sharedLinkKey String?             @unique
  ownedById     String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  sharedWith    ListSharedWith[]
  organizations SavedOrganization[]
  services      SavedService[]
  ownedBy       User                @relation(fields: [ownedById], references: [id], onDelete: Cascade)

  @@index([ownedById])
}

model UserMail {
  id           String     @id @default(cuid())
  toUserId     String
  /// Array of email addresses
  toExternal   String[]
  read         Boolean    @default(false)
  subject      String
  body         String
  from         String?
  fromUserId   String?
  responseToId String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  fromUser     User?      @relation("mailFrom", fields: [fromUserId], references: [id])
  responseTo   UserMail?  @relation("userMailReplies", fields: [responseToId], references: [id])
  replies      UserMail[] @relation("userMailReplies")
  toUser       User       @relation("mailTo", fields: [toUserId], references: [id], onDelete: Cascade)

  @@index([toUserId])
  @@index([fromUserId])
  @@index([responseToId])
  @@index([fromUserId, toUserId])
}

/// Main organization definition
model Organization {
  id                 String                   @id @default(cuid())
  /// old ID from MongoDB
  legacyId           String?                  @unique
  name               String
  /// @zod.string.regex(/^[a-z0-9]+(?:-[a-z0-9]+)*$/gm)
  slug               String                   @unique
  legacySlug         String?
  descriptionId      String?                  @unique
  deleted            Boolean                  @default(false)
  published          Boolean                  @default(false)
  lastVerified       DateTime?
  sourceId           String
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  /// Does this record need to be checked by staff after migration?
  checkMigration     Boolean?
  crisisResource     Boolean?
  crisisResourceSort Int?                     @unique
  attributes         AttributeSupplement[]
  notes              InternalNote[]
  hours              OrgHours[]
  locations          OrgLocation[]
  photos             OrgPhoto[]
  reviews            OrgReview[]
  services           OrgService[]
  socialMedia        OrgSocialMedia[]
  websites           OrgWebsite[]
  description        FreeText?                @relation(fields: [descriptionId], references: [id])
  source             Source                   @relation(fields: [sourceId], references: [id])
  emails             OrganizationEmail[]
  allowedEditors     OrganizationPermission[]
  phones             OrganizationPhone[]
  outsideApi         OutsideAPI[]
  userLists          SavedOrganization[]
  serviceAreas       ServiceArea?
  oldSlugs           SlugRedirect[]
  suggestions        Suggestion[]
  associatedUsers    UserToOrganization[]

  @@index([name])
  @@index([published, deleted])
  @@index([slug])
  @@index([slug, published, deleted])
  @@index([id, published(sort: Desc), deleted])
}

model SlugRedirect {
  id        String       @id @default(cuid())
  from      String       @unique
  to        String       @unique
  orgId     String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
}

/// Organization email contacts - can be general or location specific
model OrgEmail {
  id              String              @id @default(cuid())
  /// old ID from MongoDB
  legacyId        String?             @unique
  legacyDesc      String?
  firstName       String?
  lastName        String?
  primary         Boolean             @default(false)
  email           String
  published       Boolean             @default(true)
  deleted         Boolean             @default(false)
  titleId         String?
  descriptionId   String?             @unique
  /// associated only with location/service and not overall organization (for large orgs w/ multiple locations)
  locationOnly    Boolean             @default(false)
  serviceOnly     Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  internalNotes   InternalNote[]
  description     FreeText?           @relation(fields: [descriptionId], references: [id])
  title           UserTitle?          @relation(fields: [titleId], references: [id])
  locations       OrgLocationEmail[]
  services        OrgServiceEmail[]
  organization    OrganizationEmail[]
  associatedUsers UserToOrganization?

  @@index([lastName, firstName])
  @@index([email])
  @@index([id, published(sort: Desc), deleted])
}

/// Org phone numbers - can be general or location specific
model OrgPhone {
  id              String              @id @default(cuid())
  /// old ID from MongoDB
  legacyId        String?             @unique
  legacyDesc      String?
  number          String
  ext             String?
  primary         Boolean             @default(false)
  published       Boolean             @default(true)
  deleted         Boolean             @default(false)
  migrationReview Boolean?
  countryId       String
  phoneTypeId     String?
  /// associated only with location/service and not overall organization (for large orgs w/ multiple locations)
  locationOnly    Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  descriptionId   String?             @unique
  serviceOnly     Boolean             @default(false)
  countryCode     String?
  internalNotes   InternalNote[]
  locations       OrgLocationPhone[]
  country         Country             @relation(fields: [countryId], references: [id])
  description     FreeText?           @relation(fields: [descriptionId], references: [id])
  phoneType       PhoneType?          @relation(fields: [phoneTypeId], references: [id])
  phoneLangs      OrgPhoneLanguage[]
  services        OrgServicePhone[]
  organization    OrganizationPhone?
  associatedUsers UserToOrganization?

  @@index([id, published(sort: Desc), deleted])
}

/// Organization's social media links
model OrgSocialMedia {
  id              String                   @id @default(cuid())
  /// old ID from MongoDB
  legacyId        String?                  @unique
  username        String
  url             String
  deleted         Boolean                  @default(false)
  published       Boolean                  @default(true)
  serviceId       String
  organizationId  String?
  /// associated only with location and not overall organization (for large orgs w/ multiple locations)
  orgLocationOnly Boolean                  @default(false)
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  internalNotes   InternalNote[]
  locations       OrgLocationSocialMedia[]
  organization    Organization?            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  service         SocialMediaService       @relation(fields: [serviceId], references: [id])

  @@index([serviceId])
  @@index([organizationId])
  @@index([id, published(sort: Desc), deleted])
}

model OrgWebsite {
  id              String               @id @default(cuid())
  url             String
  descriptionId   String?              @unique
  organizationId  String?
  orgLocationOnly Boolean              @default(false)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  isPrimary       Boolean              @default(false)
  deleted         Boolean              @default(false)
  published       Boolean              @default(true)
  internalNotes   InternalNote[]
  locations       OrgLocationWebsite[]
  services        OrgServiceWebsite[]
  description     FreeText?            @relation(fields: [descriptionId], references: [id])
  organization    Organization?        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  languages       OrgWebsiteLanguage[]

  @@index([organizationId])
  @@index([id, published(sort: Desc), deleted])
}

/// Org location information
model OrgLocation {
  id                String                   @id @default(cuid())
  /// old ID from MongoDB
  legacyId          String?                  @unique
  name              String?
  street1           String?
  street2           String?
  city              String
  postCode          String?
  primary           Boolean                  @default(false)
  govDistId         String?
  countryId         String
  longitude         Float?                   @db.Real
  latitude          Float?                   @db.Real
  geo               Unsupported("geometry")?
  geoJSON           Json?
  geoWKT            String?
  published         Boolean                  @default(true)
  deleted           Boolean                  @default(false)
  orgId             String
  apiLocationId     String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  /// Does this record need to be checked by staff after migration?
  checkMigration    Boolean?
  descriptionId     String?                  @unique
  mailOnly          Boolean                  @default(false)
  addressVisibility AddressVisibility        @default(FULL)
  attributes        AttributeSupplement[]
  internalNotes     InternalNote[]
  allowedEditors    LocationPermission[]
  hours             OrgHours[]
  country           Country                  @relation(fields: [countryId], references: [id])
  description       FreeText?                @relation(fields: [descriptionId], references: [id])
  govDist           GovDist?                 @relation(fields: [govDistId], references: [id], onDelete: Restrict)
  organization      Organization             @relation(fields: [orgId], references: [id], onDelete: Cascade)
  emails            OrgLocationEmail[]
  phones            OrgLocationPhone[]
  services          OrgLocationService[]
  socialMedia       OrgLocationSocialMedia[]
  websites          OrgLocationWebsite[]
  photos            OrgPhoto[]
  reviews           OrgReview[]
  outsideApi        OutsideAPI[]
  serviceAreas      ServiceArea?

  @@index([geo], type: Gist)
  @@index([orgId])
  @@index([countryId])
  @@index([govDistId])
  @@index([orgId, id, geo])
  @@index([id, published(sort: Desc), deleted])
}

/// Organization photos
model OrgPhoto {
  id            String         @id @default(cuid())
  src           String
  height        Int?           @db.SmallInt
  width         Int?           @db.SmallInt
  published     Boolean        @default(false)
  deleted       Boolean        @default(false)
  orgId         String?
  orgLocationId String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  internalNotes InternalNote[]
  organization  Organization?  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgLocation   OrgLocation?   @relation(fields: [orgLocationId], references: [id])

  @@index([orgId])
  @@index([orgLocationId])
  @@index([id, published(sort: Desc), deleted])
}

/// Organization location/service hours
/// day is stored as integer [0-6], Sunday = 0
/// start/end times are stored as RFC 3339 Timestamp (without zone)
/// as local time. Any timezone offset will be handled by runtime logic
model OrgHours {
  id             String         @id @default(cuid())
  /// Sun 0, Mon 1, Tue 2, Wed 3, Thu 3, Fri 4, Sat 6
  dayIndex       Int            @default(0) @db.SmallInt
  start          DateTime       @db.Timetz(0)
  end            DateTime       @db.Timetz(0)
  closed         Boolean        @default(false)
  orgLocId       String?
  orgServiceId   String?
  organizationId String?
  needAssignment Boolean        @default(false)
  needReview     Boolean        @default(false)
  legacyId       String?
  legacyName     String?
  legacyNote     String?
  legacyStart    String?
  legacyEnd      String?
  legacyTz       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  tz             String?
  active         Boolean        @default(true)
  interval       Json?
  open24hours    Boolean        @default(false)
  internalNotes  InternalNote[]
  orgLocation    OrgLocation?   @relation(fields: [orgLocId], references: [id], onDelete: Cascade)
  orgService     OrgService?    @relation(fields: [orgServiceId], references: [id])
  organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([orgLocId])
  @@index([orgServiceId])
  @@index([organizationId])
  @@index([id, active])
}

model FreeText {
  id                  String               @id @default(cuid())
  key                 String
  ns                  String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  AttributeSupplement AttributeSupplement?
  tsKey               TranslationKey       @relation(fields: [key, ns], references: [key, ns], onDelete: Cascade)
  LocationAlert       LocationAlert[]
  OrgEmail            OrgEmail?
  OrgLocation         OrgLocation?
  OrgPhone            OrgPhone?
  OrgService          OrgService?          @relation("OrgServiceDescription")
  OrgServiceName      OrgService?          @relation("OrgServiceName")
  OrgWebsite          OrgWebsite?
  Organization        Organization?

  @@unique([key, ns])
  @@index([key])
  @@index([ns, key])
}

/// Organization's offered services - access instructions & details
/// associated with service tag
model OrgService {
  id                String                @id @default(cuid())
  /// old ID from MongoDB
  legacyId          String?               @unique
  published         Boolean               @default(false)
  deleted           Boolean               @default(false)
  legacyName        String?
  descriptionId     String?               @unique
  organizationId    String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  /// Does this record need to be checked by staff after migration?
  checkMigration    Boolean?
  serviceNameId     String?               @unique
  crisisSupportOnly Boolean?
  attributes        AttributeSupplement[]
  internalNotes     InternalNote[]
  hours             OrgHours[]
  locations         OrgLocationService[]
  reviews           OrgReview[]
  description       FreeText?             @relation("OrgServiceDescription", fields: [descriptionId], references: [id])
  organization      Organization?         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  serviceName       FreeText?             @relation("OrgServiceName", fields: [serviceNameId], references: [id])
  emails            OrgServiceEmail[]
  phones            OrgServicePhone[]
  services          OrgServiceTag[]
  websites          OrgServiceWebsite[]
  userLists         SavedService[]
  serviceAreas      ServiceArea?

  @@index([organizationId])
  @@index([id, published(sort: Desc), deleted])
}

model ServiceArea {
  id             String               @id @default(cuid())
  organizationId String?              @unique
  orgLocationId  String?              @unique
  orgServiceId   String?              @unique
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  active         Boolean              @default(true)
  orgLocation    OrgLocation?         @relation(fields: [orgLocationId], references: [id], onDelete: Cascade)
  orgService     OrgService?          @relation(fields: [orgServiceId], references: [id], onDelete: Cascade)
  organization   Organization?        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  countries      ServiceAreaCountry[]
  districts      ServiceAreaDist[]

  @@index([organizationId])
  @@index([orgLocationId])
  @@index([orgServiceId])
}

/// User reviews/ratings of organization
model OrgReview {
  id             String             @id @default(cuid())
  /// old ID from MongoDB
  legacyId       String?            @unique
  rating         Int?               @db.SmallInt
  reviewText     String?
  visible        Boolean            @default(true)
  deleted        Boolean            @default(false)
  userId         String
  organizationId String
  orgServiceId   String?
  orgLocationId  String?
  langId         String?
  /// How confident is the API guess?
  langConfidence Float?
  /// From https://perspectiveapi.com/
  toxicity       Float?
  lcrCity        String?
  lcrGovDistId   String?
  lcrCountryId   String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  featured       Boolean?
  internalNotes  InternalNote[]
  language       Language?          @relation(fields: [langId], references: [id], onDelete: Restrict)
  lcrCountry     Country?           @relation(fields: [lcrCountryId], references: [id])
  lcrGovDist     GovDist?           @relation(fields: [lcrGovDistId], references: [id])
  orgLocation    OrgLocation?       @relation(fields: [orgLocationId], references: [id])
  orgService     OrgService?        @relation(fields: [orgServiceId], references: [id])
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User               @relation(fields: [userId], references: [id])
  translatedText TranslatedReview[]

  @@index([organizationId])
  @@index([orgServiceId])
  @@index([id, visible, deleted])
  @@index([orgLocationId])
  @@index([userId])
}

/// Store machine translations for reviews - save on API calls
model TranslatedReview {
  id         String    @id @default(cuid())
  reviewId   String
  languageId String
  text       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  language   Language  @relation(fields: [languageId], references: [id])
  review     OrgReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId, languageId])
}

/// Additional Properties for Org/Service.
model AttributeCategory {
  id            String                @id @default(cuid())
  tag           String                @unique
  name          String                @unique
  icon          String?
  /// Internal description
  intDesc       String?
  active        Boolean               @default(true)
  ns            String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  renderVariant AttributeRender?
  namespace     TranslationNamespace  @relation(fields: [ns], references: [name])
  attributes    AttributeToCategory[]
  internalNotes InternalNote[]
}

model Attribute {
  id                      String                            @id @default(cuid())
  tag                     String                            @unique
  name                    String
  icon                    String?
  /// Internal description
  intDesc                 String?
  active                  Boolean                           @default(true)
  tsKey                   String
  tsNs                    String
  requireText             Boolean                           @default(false)
  requireLanguage         Boolean                           @default(false)
  requireGeo              Boolean                           @default(false)
  requireBoolean          Boolean                           @default(false)
  requireData             Boolean                           @default(false)
  /// Can this be used as a filter? No - `null` : Yes - Defined as INCLUDE or EXCLUDE
  filterType              FilterType?
  createdAt               DateTime                          @default(now())
  updatedAt               DateTime                          @updatedAt
  /// Set this flag to have attribute display on Location/Visit cards
  showOnLocation          Boolean?
  iconBg                  String?
  requiredSchemaId        String?
  activeForSuggest        Boolean?
  canAttachTo             AttributeAttachment[]
  requireDataSchema       AttributeSupplementDataSchema?    @relation(fields: [requiredSchemaId], references: [id])
  key                     TranslationKey                    @relation(fields: [tsKey, tsNs], references: [key, ns])
  parents                 AttributeNesting[]                @relation("attribChildToParent")
  children                AttributeNesting[]                @relation("attribParentToChild")
  attachedSupplements     AttributeSupplement[]
  categories              AttributeToCategory[]
  internalNotes           InternalNote[]
  serviceCategoryDefaults ServiceCategoryDefaultAttribute[]
  serviceTagDefaults      ServiceTagDefaultAttribute[]

  @@unique([tsKey, tsNs])
}

model AttributeSupplement {
  id             String         @id @default(cuid())
  active         Boolean        @default(true)
  data           Json?
  boolean        Boolean?
  textId         String?        @unique
  countryId      String?
  languageId     String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  govDistId      String?
  attributeId    String
  locationId     String?
  organizationId String?
  serviceId      String?
  userId         String?
  attribute      Attribute      @relation(fields: [attributeId], references: [id])
  country        Country?       @relation(fields: [countryId], references: [id], onDelete: Cascade)
  govDist        GovDist?       @relation(fields: [govDistId], references: [id], onDelete: Cascade)
  language       Language?      @relation(fields: [languageId], references: [id], onDelete: Cascade)
  location       OrgLocation?   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  service        OrgService?    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  text           FreeText?      @relation(fields: [textId], references: [id], onDelete: Cascade)
  user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  internalNotes  InternalNote[]

  @@index([locationId])
  @@index([organizationId])
  @@index([serviceId])
  @@index([userId])
  @@index([attributeId])
  @@index([attributeId, locationId])
  @@index([attributeId, organizationId])
  @@index([attributeId, serviceId])
  @@index([attributeId, userId])
}

model AttributeSupplementDataSchema {
  id            String         @id @default(cuid())
  tag           String         @unique
  name          String
  definition    Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  active        Boolean        @default(true)
  schema        Json
  Attribute     Attribute[]
  internalNotes InternalNote[]
}

model ServiceCategory {
  id                String                            @id @default(cuid())
  category          String                            @unique
  active            Boolean                           @default(true)
  tsKey             String
  tsNs              String
  createdAt         DateTime                          @default(now())
  updatedAt         DateTime                          @updatedAt
  activeForSuggest  Boolean?
  crisisSupportOnly Boolean?
  internalNotes     InternalNote[]
  key               TranslationKey                    @relation(fields: [tsKey, tsNs], references: [key, ns])
  defaultAttributes ServiceCategoryDefaultAttribute[]
  primaryServices   ServiceTag[]
  services          ServiceTagToCategory[]

  @@unique([tsKey, tsNs])
}

model ServiceTag {
  id                  String                       @id @default(cuid())
  name                String
  active              Boolean                      @default(true)
  tsKey               String
  tsNs                String
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  crisisSupportOnly   Boolean?
  primaryCategoryId   String
  internalNotes       InternalNote[]
  attachedServices    OrgServiceTag[]
  primaryCategory     ServiceCategory              @relation(fields: [primaryCategoryId], references: [id])
  key                 TranslationKey               @relation(fields: [tsKey, tsNs], references: [key, ns])
  locationRestriction ServiceTagCountry[]
  defaultAttributes   ServiceTagDefaultAttribute[]
  parents             ServiceTagNesting[]          @relation("serviceChildToParent")
  children            ServiceTagNesting[]          @relation("serviceParentToChild")
  categories          ServiceTagToCategory[]

  @@unique([tsKey, tsNs])
  @@unique([name, primaryCategoryId])
  @@index([primaryCategoryId])
}

model ServiceTagToCategory {
  categoryId   String
  serviceTagId String
  linkedAt     DateTime        @default(now())
  active       Boolean         @default(true)
  category     ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  serviceTag   ServiceTag      @relation(fields: [serviceTagId], references: [id], onDelete: Cascade)

  @@id([categoryId, serviceTagId])
  @@index([serviceTagId, categoryId])
}

/// Phone number descriptors
model PhoneType {
  id             String         @id @default(cuid())
  type           String         @unique
  tsKey          String
  tsNs           String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  active         Boolean        @default(true)
  internalNotes  InternalNote[]
  attachedPhones OrgPhone[]
  key            TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns])

  @@unique([tsKey, tsNs])
}

/// Social media service properties
model SocialMediaService {
  id                String            @id @default(cuid())
  name              String            @unique
  urlBase           String[]
  logoIcon          String
  internal          Boolean           @default(false)
  tsKey             String
  tsNs              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  active            Boolean           @default(true)
  internalNotes     InternalNote[]
  organizationUsage OrgSocialMedia[]
  systemUsage       SocialMediaLink[]
  key               TranslationKey    @relation(fields: [tsKey, tsNs], references: [key, ns])

  @@unique([tsKey, tsNs])
}

/// Source of organization/user
/// *INTERNAL* - for tracking purposes
model Source {
  id            String         @id @default(cuid())
  source        String         @unique
  type          SourceType
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  active        Boolean        @default(true)
  internalNotes InternalNote[]
  organizations Organization[]
  users         User[]         @relation("userSource")
}

model Suggestion {
  id             String         @id @default(cuid())
  data           Json
  organizationId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  handled        Boolean?
  suggestedById  String?
  internalNotes  InternalNote[]
  organization   Organization   @relation(fields: [organizationId], references: [id])
  suggestedBy    User?          @relation(fields: [suggestedById], references: [id])

  @@index([organizationId])
}

/// Country metadata
model Country {
  id                    String                @id @default(cuid())
  /// ISO 3166-1 alpha-2 Country code
  cca2                  String                @unique @db.Char(2)
  /// ISO 3166-1 alpha-3 Country code
  cca3                  String                @unique @db.Char(3)
  /// Country name (English).
  name                  String                @unique
  /// International dialing code
  dialCode              Int?                  @db.SmallInt
  /// Country flag (emoji)
  flag                  String
  tsKey                 String
  tsNs                  String
  demonymKey            String?
  demonymNs             String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  activeForOrgs         Boolean?
  activeForSuggest      Boolean?
  geoDataId             String?               @unique
  /// Does the country name have a prefix in certain situations? (The United States, The Netherlands...)
  articlePrefix         Boolean?
  attributeSupplements  AttributeSupplement[]
  demonym               TranslationKey?       @relation("demonym", fields: [demonymKey, demonymNs], references: [key, ns], onDelete: Restrict)
  geoData               GeoData?              @relation(fields: [geoDataId], references: [id])
  key                   TranslationKey        @relation("country", fields: [tsKey, tsNs], references: [key, ns])
  govDist               GovDist[]
  internalNotes         InternalNote[]
  LocationAlert         LocationAlert[]
  addresses             OrgLocation[]
  phones                OrgPhone[]
  reviews               OrgReview[]
  serviceAreas          ServiceAreaCountry[]
  serviceRestrictions   ServiceTagCountry[]
  currentUsers          User[]                @relation("currentCountry")
  surveyOrigin          UserSurvey[]          @relation("origin")
  surveyCurrentLocation UserSurvey[]          @relation("currentLocation")

  @@unique([tsKey, tsNs])
  @@unique([demonymKey, demonymNs])
  @@index([geoDataId])
}

/// Administrative districts for countries
model GovDist {
  id                   String                @id @default(cuid())
  /// Name (English/Roman alphabet)
  name                 String
  /// Slug - [country (ISO)]-[govdist]-[...]
  slug                 String                @unique
  /// ISO-3166-2 code
  iso                  String?
  /// Abbreviation (Optional)
  abbrev               String?
  countryId            String
  govDistTypeId        String
  /// table can be used for "sub districts" (State -> County -> City)
  isPrimary            Boolean?              @default(true)
  parentId             String?
  tsKey                String
  tsNs                 String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  active               Boolean?              @default(true)
  geoDataId            String?               @unique
  attributeSupplements AttributeSupplement[]
  country              Country               @relation(fields: [countryId], references: [id], onDelete: Cascade)
  geoData              GeoData?              @relation(fields: [geoDataId], references: [id])
  govDistType          GovDistType           @relation(fields: [govDistTypeId], references: [id], onDelete: Cascade)
  parent               GovDist?              @relation("associatedDistricts", fields: [parentId], references: [id], onDelete: Cascade)
  subDistricts         GovDist[]             @relation("associatedDistricts")
  key                  TranslationKey        @relation(fields: [tsKey, tsNs], references: [key, ns])
  internalNotes        InternalNote[]
  LocationAlert        LocationAlert[]
  locations            OrgLocation[]
  reviews              OrgReview[]
  serviceAreas         ServiceAreaDist[]
  users                User[]
  userSurveys          UserSurvey[]

  @@unique([tsKey, tsNs])
  @@index([countryId])
  @@index([parentId])
  @@index([countryId, id])
  @@index([parentId, id])
  @@index([geoDataId])
}

/// Descriptor of principal administrative districts (state, province, county, etc.)
model GovDistType {
  id            String         @id @default(cuid())
  name          String         @unique
  tsKey         String
  tsNs          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  districts     GovDist[]
  key           TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns])
  internalNotes InternalNote[]

  @@unique([tsKey, tsNs])
}

/// Geo data
model GeoData {
  id         String                  @id @default(cuid())
  name       String
  geo        Unsupported("geometry")
  iso        String
  iso2       String?
  abbrev     String?
  type       String?
  adminLevel Int
  country    Country?
  govDist    GovDist?

  @@index([geo], type: Gist)
  @@index([name])
  @@index([iso])
  @@index([abbrev])
  @@index([iso, abbrev])
  @@index([iso, adminLevel])
}

model LocationAlert {
  id        String             @id @default(cuid())
  active    Boolean            @default(true)
  textId    String
  level     LocationAlertLevel
  countryId String?
  govDistId String?
  order     Int                @default(0)
  country   Country?           @relation(fields: [countryId], references: [id], onDelete: Cascade)
  govDist   GovDist?           @relation(fields: [govDistId], references: [id], onDelete: Cascade)
  text      FreeText           @relation(fields: [textId], references: [id], onDelete: Cascade)

  @@index([countryId, textId])
  @@index([govDistId, textId])
  @@index([active, countryId, textId])
  @@index([active, govDistId, textId])
}

/// Languages - ETF BCP 47 language tag
/// top level & regional locale (ex: 'en', "en-us", "en-ca")
model Language {
  id                   String                @id @default(cuid())
  languageName         String
  /// ETF BCP 47 language tag
  localeCode           String                @unique
  /// ISO 639-2
  iso6392              String?               @db.Char(3)
  /// Language name in it's language.
  nativeName           String
  /// Is this language being actively used for translations?
  activelyTranslated   Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  defaultSort          Int?                  @unique
  groupCommon          Boolean?
  attributeSupplements AttributeSupplement[]
  internalNotes        InternalNote[]
  phones               OrgPhoneLanguage[]
  reviews              OrgReview[]
  websites             OrgWebsiteLanguage[]
  reviewTranslation    TranslatedReview[]
  users                User[]
}

model TranslationNamespace {
  name                  String              @id
  exportFile            Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  crowdinId             Int?
  overwriteFileOnExport Boolean             @default(false)
  attributeCategories   AttributeCategory[]
  internalNotes         InternalNote[]
  keys                  TranslationKey[]
}

model TranslationKey {
  /// Item key
  key                 String
  /// Base string
  text                String
  /// Context
  context             String?
  ns                  String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  crowdinId           Int?
  interpolation       InterpolationOptions?
  interpolationValues Json?
  active              Boolean               @default(true)
  attribute           Attribute?
  demonym             Country?              @relation("demonym")
  country             Country?              @relation("country")
  freeText            FreeText?
  govDist             GovDist?
  govDistType         GovDistType?
  internalNotes       InternalNote[]
  phoneType           PhoneType?
  serviceCategory     ServiceCategory?
  serviceTag          ServiceTag?
  socialMediaService  SocialMediaService?
  namespace           TranslationNamespace  @relation(fields: [ns], references: [name], onDelete: Cascade)
  userCommunity       UserCommunity?
  userEthnicity       UserEthnicity?
  userImmigration     UserImmigration?
  userSOGIdentity     UserSOGIdentity?
  userTitle           UserTitle?
  userType            UserType?

  @@id([ns, key])
  @@index([crowdinId])
  @@index([key])
}

model OutsideAPIService {
  service       String         @id
  description   String
  urlPattern    String
  apiKey        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  active        Boolean        @default(true)
  internalNotes InternalNote[]
  instances     OutsideAPI[]
}

/// Define outside APIs in use
model OutsideAPI {
  id             String            @id @default(cuid())
  apiIdentifier  String
  serviceName    String
  organizationId String?
  orgLocationId  String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  active         Boolean           @default(true)
  internalNotes  InternalNote[]
  orgLocation    OrgLocation?      @relation(fields: [orgLocationId], references: [id], onDelete: Cascade)
  organization   Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  service        OutsideAPIService @relation(fields: [serviceName], references: [service])
}

/// Visibilty settings for user profile pages
model FieldVisibility {
  id              String            @id @default(cuid())
  userId          String            @unique
  /// All users
  name            VisibilitySetting @default(NONE)
  /// for service provider/professional
  email           VisibilitySetting @default(NONE)
  /// All users
  image           VisibilitySetting @default(NONE)
  /// for LCR accounts
  ethnicity       VisibilitySetting @default(NONE)
  /// for LCR accounts
  countryOrigin   VisibilitySetting @default(NONE)
  /// for LCR accounts
  SOG             VisibilitySetting @default(NONE)
  /// for LCR accounts
  communities     VisibilitySetting @default(NONE)
  /// for LCR accounts
  currentCity     VisibilitySetting @default(NONE)
  /// for LCR accounts
  currentGovDist  VisibilitySetting @default(NONE)
  /// for LCR accounts
  currentCountry  VisibilitySetting @default(NONE)
  /// for specialized accounts
  userType        VisibilitySetting @default(NONE)
  /// for service provider
  associatedOrg   VisibilitySetting @default(NONE)
  /// for service provider
  orgTitle        VisibilitySetting @default(NONE)
  /// to facilitate "User since..."
  createdAt       VisibilitySetting @default(NONE)
  recordCreatedAt DateTime          @default(now())
  recordupdatedAt DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SocialMediaLink {
  id            String             @id @default(cuid())
  href          String             @unique
  icon          String
  serviceId     String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  internalNotes InternalNote[]
  service       SocialMediaService @relation(fields: [serviceId], references: [id])
}

/// Internal notes - multipurpose
model InternalNote {
  id                              String                         @id @default(cuid())
  /// old ID from MongoDB
  legacyId                        String?                        @unique
  text                            String
  attributeId                     String?
  attributeCategoryId             String?
  attributeSupplementId           String?
  countryId                       String?
  govDistId                       String?
  govDistTypeId                   String?
  languageId                      String?
  organizationId                  String?
  orgEmailId                      String?
  orgHoursId                      String?
  orgLocationId                   String?
  orgPhoneId                      String?
  orgPhotoId                      String?
  orgReviewId                     String?
  orgServiceId                    String?
  orgSocialMediaId                String?
  orgWebsiteId                    String?
  outsideApiId                    String?
  outsideAPIServiceService        String?
  permissionId                    String?
  phoneTypeId                     String?
  serviceCategoryId               String?
  serviceTagId                    String?
  socialMediaLinkId               String?
  socialMediaServiceId            String?
  sourceId                        String?
  translationKey                  String?
  translationNs                   String?
  translationNamespaceName        String?
  createdAt                       DateTime                       @default(now())
  updatedAt                       DateTime                       @updatedAt
  attributeSupplementDataSchemaId String?
  suggestionId                    String?
  attributeCategory               AttributeCategory?             @relation(fields: [attributeCategoryId], references: [id], onDelete: Cascade)
  attribute                       Attribute?                     @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeSupplementDataSchema   AttributeSupplementDataSchema? @relation(fields: [attributeSupplementDataSchemaId], references: [id], onDelete: Cascade)
  attributeSupplement             AttributeSupplement?           @relation(fields: [attributeSupplementId], references: [id], onDelete: Cascade)
  country                         Country?                       @relation(fields: [countryId], references: [id], onDelete: Cascade)
  govDist                         GovDist?                       @relation(fields: [govDistId], references: [id], onDelete: Cascade)
  govDistType                     GovDistType?                   @relation(fields: [govDistTypeId], references: [id], onDelete: Cascade)
  language                        Language?                      @relation(fields: [languageId], references: [id], onDelete: Cascade)
  orgEmail                        OrgEmail?                      @relation(fields: [orgEmailId], references: [id], onDelete: Cascade)
  orgHours                        OrgHours?                      @relation(fields: [orgHoursId], references: [id], onDelete: Cascade)
  orgLocation                     OrgLocation?                   @relation(fields: [orgLocationId], references: [id], onDelete: Cascade)
  orgPhone                        OrgPhone?                      @relation(fields: [orgPhoneId], references: [id], onDelete: Cascade)
  orgPhoto                        OrgPhoto?                      @relation(fields: [orgPhotoId], references: [id], onDelete: Cascade)
  orgReview                       OrgReview?                     @relation(fields: [orgReviewId], references: [id], onDelete: Cascade)
  orgService                      OrgService?                    @relation(fields: [orgServiceId], references: [id], onDelete: Cascade)
  orgSocialMedia                  OrgSocialMedia?                @relation(fields: [orgSocialMediaId], references: [id], onDelete: Cascade)
  orgWebsite                      OrgWebsite?                    @relation(fields: [orgWebsiteId], references: [id], onDelete: Cascade)
  organization                    Organization?                  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  outsideAPIService               OutsideAPIService?             @relation(fields: [outsideAPIServiceService], references: [service], onDelete: Cascade)
  outsideApi                      OutsideAPI?                    @relation(fields: [outsideApiId], references: [id], onDelete: Cascade)
  permission                      Permission?                    @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  phoneType                       PhoneType?                     @relation(fields: [phoneTypeId], references: [id], onDelete: Cascade)
  serviceCategory                 ServiceCategory?               @relation(fields: [serviceCategoryId], references: [id], onDelete: Cascade)
  serviceTag                      ServiceTag?                    @relation(fields: [serviceTagId], references: [id], onDelete: Cascade)
  socialMediaLink                 SocialMediaLink?               @relation(fields: [socialMediaLinkId], references: [id], onDelete: Cascade)
  socialMediaService              SocialMediaService?            @relation(fields: [socialMediaServiceId], references: [id], onDelete: Cascade)
  source                          Source?                        @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  suggestion                      Suggestion?                    @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  translation                     TranslationKey?                @relation(fields: [translationKey, translationNs], references: [key, ns], onDelete: Cascade)
  translationNamespace            TranslationNamespace?          @relation(fields: [translationNamespaceName], references: [name], onDelete: Cascade)
}

model AuditTrail {
  id        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  table     String
  table_oid Int                 @db.Oid
  recordId  String[]
  operation AuditTrailOperation
  old       Json?
  new       Json?
  timestamp DateTime            @default(now()) @db.Timestamptz(6)
  actorId   String

  @@index([recordId], type: Gin)
  @@index([actorId])
  @@index([table_oid])
  @@index([timestamp], type: Brin)
}

/// Assign default permissions to role
model RolePermission {
  roleId       String
  permissionId String
  linkedAt     DateTime   @default(now())
  active       Boolean    @default(true)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         UserRole   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([permissionId, roleId])
}

/// Assign permissions to user
model UserPermission {
  userId       String
  permissionId String
  linkedAt     DateTime   @default(now())
  authorized   Boolean    @default(false)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, permissionId])
  @@index([permissionId, userId])
}

/// Associate User to Org - w/ contact info
model UserToOrganization {
  userId         String
  organizationId String
  orgTitleId     String?
  orgEmailId     String?      @unique
  orgPhoneId     String?      @unique
  linkedAt       DateTime     @default(now())
  authorized     Boolean      @default(false)
  email          OrgEmail?    @relation(fields: [orgEmailId], references: [id])
  phone          OrgPhone?    @relation(fields: [orgPhoneId], references: [id])
  title          UserTitle?   @relation(fields: [orgTitleId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
  @@index([organizationId, userId])
}

/// For certain permissions, attach Organization
model OrganizationPermission {
  userId         String
  permissionId   String
  authorized     Boolean      @default(false)
  organizationId String
  linkedAt       DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  permission     Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, permissionId, organizationId])
  @@index([organizationId, userId])
  @@index([userId, organizationId])
}

/// For certain permissions, attach Organization
model LocationPermission {
  userId        String
  permissionId  String
  authorized    Boolean     @default(false)
  orgLocationId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  location      OrgLocation @relation(fields: [orgLocationId], references: [id], onDelete: Cascade)
  permission    Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, permissionId, orgLocationId])
  @@index([orgLocationId, userId])
  @@index([userId, orgLocationId])
}

/// For LCR accounts - link community to user profile
model UserCommunityLink {
  userId      String
  communityId String
  linkedAt    DateTime      @default(now())
  community   UserCommunity @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, communityId])
}

/// For LCR accounts, link SOG identity to user profile
model UserSOGLink {
  userId        String
  sogIdentityId String
  linkedAt      DateTime        @default(now())
  sogIdentity   UserSOGIdentity @relation(fields: [sogIdentityId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, sogIdentityId])
}

/// Link a user's shared list with other users who can view.
model ListSharedWith {
  userId   String
  listId   String
  linkedAt DateTime      @default(now())
  list     UserSavedList @relation(fields: [listId], references: [id], onDelete: Cascade)
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, listId])
  @@index([listId, userId])
}

/// Organizations saved to list
model SavedOrganization {
  listId         String
  organizationId String
  linkedAt       DateTime      @default(now())
  list           UserSavedList @relation(fields: [listId], references: [id], onDelete: Cascade)
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([listId, organizationId])
  @@index([organizationId, listId])
}

/// Services saved to list
model SavedService {
  listId    String
  serviceId String
  linkedAt  DateTime      @default(now())
  list      UserSavedList @relation(fields: [listId], references: [id], onDelete: Cascade)
  service   OrgService    @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([listId, serviceId])
  @@index([serviceId, listId])
}

/// Role assigned to user
model AssignedRole {
  userId     String
  roleId     String
  linkedAt   DateTime @default(now())
  authorized Boolean  @default(false)
  role       UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId, userId])
}

/// Link community to anon user survey
model SurveyCommunity {
  surveyId    String
  communityId String
  community   UserCommunity @relation(fields: [communityId], references: [id], onDelete: Cascade)
  survey      UserSurvey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@id([surveyId, communityId])
}

/// Link ethnicity to anon user survey
model SurveyEthnicity {
  surveyId    String
  ethnicityId String
  ethnicity   UserEthnicity @relation(fields: [ethnicityId], references: [id], onDelete: Cascade)
  survey      UserSurvey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@id([surveyId, ethnicityId])
}

/// Link SOG identity to anon user survey
model SurveySOG {
  surveyId String
  sogId    String
  sog      UserSOGIdentity @relation(fields: [sogId], references: [id], onDelete: Cascade)
  survey   UserSurvey      @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@id([surveyId, sogId])
}

model OrganizationPhone {
  organizationId String
  phoneId        String       @unique
  linkedAt       DateTime     @default(now())
  active         Boolean      @default(true)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  phone          OrgPhone     @relation(fields: [phoneId], references: [id], onDelete: Cascade)

  @@id([organizationId, phoneId])
  @@index([phoneId, organizationId])
}

model OrganizationEmail {
  orgEmailId     String
  organizationId String
  linkedAt       DateTime     @default(now())
  active         Boolean      @default(true)
  email          OrgEmail     @relation(fields: [orgEmailId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([orgEmailId, organizationId])
  @@index([organizationId, orgEmailId])
}

/// Link multiple languages to a website entry
model OrgWebsiteLanguage {
  orgWebsiteId String
  languageId   String
  linkedAt     DateTime   @default(now())
  active       Boolean    @default(true)
  language     Language   @relation(fields: [languageId], references: [id], onDelete: Cascade)
  website      OrgWebsite @relation(fields: [orgWebsiteId], references: [id], onDelete: Cascade)

  @@id([orgWebsiteId, languageId])
  @@index([languageId, orgWebsiteId])
}

/// Link multiple languages to a phone number
model OrgPhoneLanguage {
  orgPhoneId String
  languageId String
  linkedAt   DateTime @default(now())
  active     Boolean  @default(true)
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  phone      OrgPhone @relation(fields: [orgPhoneId], references: [id], onDelete: Cascade)

  @@id([orgPhoneId, languageId])
  @@index([languageId, orgPhoneId])
}

/// Link phone numbers to services
model OrgServicePhone {
  orgPhoneId String
  serviceId  String
  linkedAt   DateTime   @default(now())
  active     Boolean    @default(true)
  phone      OrgPhone   @relation(fields: [orgPhoneId], references: [id], onDelete: Cascade)
  service    OrgService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([orgPhoneId, serviceId])
  @@index([serviceId, orgPhoneId])
}

/// Link emails to services
model OrgServiceEmail {
  orgEmailId String
  serviceId  String
  linkedAt   DateTime   @default(now())
  active     Boolean    @default(true)
  email      OrgEmail   @relation(fields: [orgEmailId], references: [id], onDelete: Cascade)
  service    OrgService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([orgEmailId, serviceId])
  @@index([serviceId, orgEmailId])
}

/// Link website to service
model OrgServiceWebsite {
  orgWebsiteId String
  serviceId    String
  linkedAt     DateTime   @default(now())
  active       Boolean    @default(true)
  website      OrgWebsite @relation(fields: [orgWebsiteId], references: [id], onDelete: Cascade)
  service      OrgService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([orgWebsiteId, serviceId])
  @@index([serviceId, orgWebsiteId])
}

/// Link emails to locations
model OrgLocationEmail {
  orgLocationId String
  orgEmailId    String
  linkedAt      DateTime    @default(now())
  active        Boolean     @default(true)
  email         OrgEmail    @relation(fields: [orgEmailId], references: [id], onDelete: Cascade)
  location      OrgLocation @relation(fields: [orgLocationId], references: [id], onDelete: Cascade)

  @@id([orgEmailId, orgLocationId])
  @@index([orgLocationId, orgEmailId])
}

model OrgLocationPhone {
  orgLocationId String
  phoneId       String
  linkedAt      DateTime    @default(now())
  active        Boolean     @default(true)
  location      OrgLocation @relation(fields: [orgLocationId], references: [id], onDelete: Cascade)
  phone         OrgPhone    @relation(fields: [phoneId], references: [id], onDelete: Cascade)

  @@id([orgLocationId, phoneId])
  @@index([phoneId, orgLocationId])
}

/// Link services to organizations
model OrgLocationService {
  orgLocationId String
  serviceId     String
  linkedAt      DateTime    @default(now())
  active        Boolean     @default(true)
  location      OrgLocation @relation(fields: [orgLocationId], references: [id], onDelete: Cascade)
  service       OrgService  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([orgLocationId, serviceId])
  @@index([serviceId, orgLocationId])
  @@index([orgLocationId, active])
  @@index([serviceId, active])
  @@index([orgLocationId])
  @@index([serviceId])
}

/// Link website to location
model OrgLocationWebsite {
  orgLocationId String
  orgWebsiteId  String
  linkedAt      DateTime    @default(now())
  active        Boolean     @default(true)
  location      OrgLocation @relation(fields: [orgLocationId], references: [id], onDelete: Cascade)
  website       OrgWebsite  @relation(fields: [orgWebsiteId], references: [id], onDelete: Cascade)

  @@id([orgLocationId, orgWebsiteId])
  @@index([orgWebsiteId, orgLocationId])
}

/// Link Social Media to Location
model OrgLocationSocialMedia {
  orgLocationId String
  socialMediaId String
  linkedAt      DateTime       @default(now())
  active        Boolean        @default(true)
  location      OrgLocation    @relation(fields: [orgLocationId], references: [id], onDelete: Cascade)
  socialMedia   OrgSocialMedia @relation(fields: [socialMediaId], references: [id], onDelete: Cascade)

  @@id([orgLocationId, socialMediaId])
  @@index([socialMediaId, orgLocationId])
}

/// Link tags to services
model OrgServiceTag {
  serviceId String
  tagId     String
  linkedAt  DateTime   @default(now())
  active    Boolean    @default(true)
  service   OrgService @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  tag       ServiceTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([serviceId, tagId])
  @@index([serviceId, active])
  @@index([tagId, active])
  @@index([serviceId])
  @@index([tagId])
}

/// Link countries to service areas
model ServiceAreaCountry {
  serviceAreaId String
  countryId     String
  linkedAt      DateTime    @default(now())
  active        Boolean     @default(true)
  country       Country     @relation(fields: [countryId], references: [id], onDelete: Cascade)
  serviceArea   ServiceArea @relation(fields: [serviceAreaId], references: [id], onDelete: Cascade)

  @@id([serviceAreaId, countryId])
  @@index([serviceAreaId, active])
  @@index([serviceAreaId, countryId, active])
  @@index([serviceAreaId])
  @@index([countryId])
}

/// Link Governing Districts to service areas
model ServiceAreaDist {
  serviceAreaId String
  govDistId     String
  linkedAt      DateTime    @default(now())
  active        Boolean     @default(true)
  govDist       GovDist     @relation(fields: [govDistId], references: [id], onDelete: Cascade)
  serviceArea   ServiceArea @relation(fields: [serviceAreaId], references: [id], onDelete: Cascade)

  @@id([serviceAreaId, govDistId])
  @@index([serviceAreaId, active])
  @@index([serviceAreaId])
  @@index([govDistId])
  @@index([serviceAreaId, govDistId, active])
}

/// Nesting attributes
model AttributeNesting {
  childId  String
  parentId String
  linkedAt DateTime  @default(now())
  child    Attribute @relation("attribChildToParent", fields: [childId], references: [id], onDelete: Cascade)
  parent   Attribute @relation("attribParentToChild", fields: [parentId], references: [id], onDelete: Cascade)

  @@id([parentId, childId])
}

/// Link attributes to category
model AttributeToCategory {
  attributeId String
  categoryId  String
  linkedAt    DateTime          @default(now())
  attribute   Attribute         @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  category    AttributeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([attributeId, categoryId])
  @@index([attributeId])
  @@index([categoryId])
}

/// Link default attributes to service category
model ServiceCategoryDefaultAttribute {
  attributeId String
  categoryId  String
  linkedAt    DateTime        @default(now())
  active      Boolean         @default(true)
  attribute   Attribute       @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  category    ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([attributeId, categoryId])
}

/// Link default attributes to service tag
model ServiceTagDefaultAttribute {
  attributeId String
  serviceId   String
  linkedAt    DateTime   @default(now())
  active      Boolean    @default(true)
  attribute   Attribute  @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  service     ServiceTag @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([attributeId, serviceId])
}

model ServiceTagCountry {
  countryId String
  serviceId String
  linkedAt  DateTime   @default(now())
  active    Boolean    @default(true)
  country   Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  service   ServiceTag @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([countryId, serviceId])
  @@index([countryId])
  @@index([serviceId])
}

model ServiceTagNesting {
  childId  String
  parentId String
  linkedAt DateTime   @default(now())
  child    ServiceTag @relation("serviceChildToParent", fields: [childId], references: [id], onDelete: Cascade)
  parent   ServiceTag @relation("serviceParentToChild", fields: [parentId], references: [id], onDelete: Cascade)

  @@id([parentId, childId])
}

model DataMigration {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdBy   String
  appliedAt   DateTime @default(now())
  jobId       String   @unique
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

view geography_columns {
  f_table_catalog    Unsupported("name")?
  f_table_schema     Unsupported("name")?
  f_table_name       Unsupported("name")?
  f_geography_column Unsupported("name")?
  coord_dimension    Int?
  srid               Int?
  type               String?

  @@ignore
}

view geometry_columns {
  f_table_catalog   String?              @db.VarChar(256)
  f_table_schema    Unsupported("name")?
  f_table_name      Unsupported("name")?
  f_geometry_column Unsupported("name")?
  coord_dimension   Int?
  srid              Int?
  type              String?              @db.VarChar(30)

  @@ignore
}

view AttributesByCategory {
  categoryId          String
  categoryName        String
  categoryDisplay     String
  attributeId         String
  attributeName       String
  attributeKey        String
  attributeNs         String
  icon                String?
  iconBg              String?
  badgeRender         AttributeRender?
  requireText         Boolean
  requireLanguage     Boolean
  requireGeo          Boolean
  requireBoolean      Boolean
  requireData         Boolean
  formSchema          Json?
  interpolationValues Json?
  dataSchemaName      String?
  canAttachTo         AttributeAttachment[]
  dataSchema          Json?
  attributeActive     Boolean
  categoryActive      Boolean

  @@unique([categoryId, attributeId])
  @@map("attributes_by_category")
}

view user_refresh_token {
  id            String  @unique
  refresh_token String?
  email         String  @unique
}

view user_access_token {
  id           String  @unique
  access_token String?
}

view pg_index_usage_rate {
  relname                     Unsupported("name") @unique
  percent_of_times_index_used BigInt
  rows_in_table               BigInt

  @@ignore
}

view pg_cache_hit_rate {
  heap_read Decimal @unique @db.Decimal
  heap_hit  Decimal @db.Decimal
  ratio     Decimal @db.Decimal

  @@ignore
}

view pg_index_usage {
  relation        Unsupported("name")
  indexname       Unsupported("name") @unique
  num_rows        Float               @db.Real
  table_size      String
  index_size      String
  number_of_scans BigInt
  tuples_read     BigInt
  tuples_fetched  BigInt

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view pg_stat_statements_info {
  dealloc     BigInt?
  stats_reset DateTime? @db.Timestamptz(6)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view pg_stat_statements {
  userid                 Int?     @db.Oid
  dbid                   Int?     @db.Oid
  toplevel               Boolean?
  queryid                BigInt?
  query                  String?
  plans                  BigInt?
  total_plan_time        Float?
  min_plan_time          Float?
  max_plan_time          Float?
  mean_plan_time         Float?
  stddev_plan_time       Float?
  calls                  BigInt?
  total_exec_time        Float?
  min_exec_time          Float?
  max_exec_time          Float?
  mean_exec_time         Float?
  stddev_exec_time       Float?
  rows                   BigInt?
  shared_blks_hit        BigInt?
  shared_blks_read       BigInt?
  shared_blks_dirtied    BigInt?
  shared_blks_written    BigInt?
  local_blks_hit         BigInt?
  local_blks_read        BigInt?
  local_blks_dirtied     BigInt?
  local_blks_written     BigInt?
  temp_blks_read         BigInt?
  temp_blks_written      BigInt?
  blk_read_time          Float?
  blk_write_time         Float?
  temp_blk_read_time     Float?
  temp_blk_write_time    Float?
  wal_records            BigInt?
  wal_fpi                BigInt?
  wal_bytes              Decimal? @db.Decimal
  jit_functions          BigInt?
  jit_generation_time    Float?
  jit_inlining_count     BigInt?
  jit_inlining_time      Float?
  jit_optimization_count BigInt?
  jit_optimization_time  Float?
  jit_emission_count     BigInt?
  jit_emission_time      Float?

  @@ignore
}

enum AddressVisibility {
  FULL
  PARTIAL
  HIDDEN
}

enum AttributeRender {
  COMMUNITY
  SERVICE
  LEADER
  ATTRIBUTE
  LIST
}

enum AttributeAttachment {
  ORGANIZATION
  LOCATION
  SERVICE
  USER
}

enum FilterType {
  INCLUDE
  EXCLUDE
}

enum SourceType {
  EXTERNAL
  ORGANIZATION
  SYSTEM
  USER
}

enum LocationAlertLevel {
  INFO_PRIMARY
  WARN_PRIMARY
  CRITICAL_PRIMARY
  INFO_SECONDARY
  WARN_SECONDARY
  CRITICAL_SECONDARY
}

enum InterpolationOptions {
  PLURAL
  ORDINAL
  CONTEXT
}

enum VisibilitySetting {
  NONE
  LOGGED_IN
  PROVIDER
  PUBLIC
}

enum AuditTrailOperation {
  INSERT
  UPDATE
  DELETE
}
