{
	"Typescipt Barrel File": {
		"scope": "typescript,typescriptreact",
		"prefix": "!barrel",
		"body": [
			"// codegen:start {preset: barrel, include: ${1|./*.ts,./*.tsx,./*.ts\\, exclude: 'file.ts','*.tsx'\\, exclude: 'file.tsx'|}}",
			"// codegen:end"
		],
		"description": "Code to have ESLint generate barrel file"
	},
	"Next.js SSR Page with i18n preload": {
		"prefix": "!ssrpagei18",
		"body": [
			"import { trpcServerClient } from '@weareinreach/api/trpc'",
			"import { GetServerSideProps, NextPage } from 'next'",
			"import { useTranslation } from 'next-i18next'",
			"import { serverSideTranslations } from 'next-i18next/serverSideTranslations'",
			"",
			"import { api } from '~/utils/api'",
			"",
			"const ${1:$TM_FILENAME_BASE}: NextPage = () => {",
			"\tconst { t } = useTranslation()",
			"",
			"\treturn <></>",
			"}",
			"",
			"export const getServerSideProps: GetServerSideProps = async ({ req, res, locale }) => {",
			"\tconst ssg = await trpcServerClient()",
			"",
			"\tconst props = {",
			"\t\ttrpcState: ssg.dehydrate(),",
			"\t\t...(await serverSideTranslations(locale as string, ['common'])),",
			"\t}",
			"",
			"\treturn {",
			"\t\tprops,",
			"\t}",
			"}",
			"",
			"export default ${1:$TM_FILENAME_BASE}",
			""
		],
		"description": "Next.js SSR Page with i18n preload"
	},
	"try/catch with trpc error handler": {
		"prefix": "trycatchtrpc",
		"body": ["try {", "\t\t$0", "", "", "\t} catch (error) {", "\t\thandleError(error)", "}"],
		"description": "try/catch with trpc error handler"
	},
	"2 REM values": {
		"prefix": "rem2",
		"body": ["`${rem(${1})} ${rem(${2})}`"],
		"description": "2 REM values"
	},
	"4 REM values": {
		"prefix": "rem4",
		"body": ["`${rem(${1})} ${rem(${2})} ${rem(${3})} ${rem(${4})}`"],
		"description": "4 REM values"
	},
	"Calc CSS": {
		"prefix": "calcCSS",
		"body": ["`calc(${${1:variable}\\} ${2|- ${rem(0)},+ ${rem(0)},* 0,/ 0|}${3})`"],
		"description": "Calc CSS"
	},
	"Storybook Story": {
		"prefix": "!sbstory",
		"body": [
			"import { Meta, StoryObj } from '@storybook/react'",
			"",
			"import { ${1:Component} } from './${2:File}'",
			"",
			"export default {",
			"\ttitle: '${3:Story Name}',",
			"\tcomponent: ${1:Component},",
			"} satisfies Meta<typeof ${1:Component}>",
			"",
			"type StoryDef = StoryObj<typeof ${1:Component}>",
			"",
			"export const Default = {} satisfies StoryDef"
		],
		"description": "Storybook Story"
	}

	// Place your âœ¨ InReach (root) workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}
