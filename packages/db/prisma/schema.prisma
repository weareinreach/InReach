generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fieldReference", "postgresqlExtensions"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../../../docs/database"
}

generator zod {
  provider      = "zod-prisma"
  output        = "../zod-schemas"
  imports       = "../zod-util"
  relationModel = "default"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

// Necessary for Next auth
model Account {
  // Do not change - NextAuth fields
  id                String  @id @default(cuid()) @db.VarChar(32)
  type              String  @db.VarChar(32)
  provider          String  @db.VarChar(32)
  providerAccountId String  @db.VarChar(128)
  refresh_token     String? @db.VarChar(128)
  access_token      String? @db.VarChar(128)
  expires_at        Int?
  token_type        String? @db.VarChar(32)
  scope             String? @db.VarChar(256)
  id_token          String? @db.VarChar(128)
  session_state     String? @db.VarChar(128)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.VarChar(32)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  // Do not change - NextAuth fields
  id           String   @id @default(cuid()) @db.VarChar(32)
  sessionToken String   @unique @db.VarChar(128)
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.VarChar(32)
}

model User {
  // Do not change - NextAuth fields
  id            String    @id @default(cuid()) @db.VarChar(32)
  name          String?   @db.VarChar(128)
  email         String    @unique @db.VarChar(128)
  emailVerified DateTime?
  image         String?   @db.VarChar(256)
  accounts      Account[]
  sessions      Session[]

  // Ok to change below - Start of custom fields
  ethnicity     UserEthnicity[]
  countryOrigin Country[]
  SOG           UserSOG[]
  birthYear     String?          @db.VarChar(4)
  reasonForJoin String?          @db.VarChar(32)
  communities   UserCommunity[]
  orgOwner      Organization[]
  permissions   UserPermission[]

  // Relationships
  lists       UserList[] @relation("userList")
  sharedLists UserList[] @relation("sharedLists")

  orgTitle   UserTitle? @relation(fields: [orgTitleId], references: [id])
  orgTitleId String?    @db.VarChar(32)

  immigration   UserImmigration? @relation(fields: [immigrationId], references: [id])
  immigrationId String?          @db.VarChar(32)

  role   UserRole @relation(fields: [roleId], references: [id])
  roleId String   @db.VarChar(32)

  userType   UserType @relation(fields: [userTypeId], references: [id])
  userTypeId String   @db.VarChar(32)

  langPref   Language @relation(fields: [langPrefId], references: [id])
  langPrefId String   @db.VarChar(32)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // audit log fields
  createUserEthnicity       UserEthnicity[]       @relation("createUserEthnicity")
  updateUserEthnicity       UserEthnicity[]       @relation("updateUserEthnicity")
  createUserImmigration     UserImmigration[]     @relation("createUserImmigration")
  updateUserImmigration     UserImmigration[]     @relation("updateUserImmigration")
  createUserSOG             UserSOG[]             @relation("createUserSOG")
  updateUserSOG             UserSOG[]             @relation("updateUserSOG")
  createUserType            UserType[]            @relation("createUserType")
  updateUserType            UserType[]            @relation("updateUserType")
  createUserCommunity       UserCommunity[]       @relation("createUserCommunity")
  updateUserCommunity       UserCommunity[]       @relation("updateUserCommunity")
  createOrganization        Organization[]        @relation("createOrganization")
  updateOrganization        Organization[]        @relation("updateOrganization")
  createOrgDescription      OrgDescription[]      @relation("createOrgDescription")
  updateOrgDescription      OrgDescription[]      @relation("updateOrgDescription")
  createOrgEmail            OrgEmail[]            @relation("createOrgEmail")
  updateOrgEmail            OrgEmail[]            @relation("updateOrgEmail")
  createUserTitle           UserTitle[]           @relation("createUserTitle")
  updateUserTitle           UserTitle[]           @relation("updateUserTitle")
  createOrgLocation         OrgLocation[]         @relation("createOrgLocation")
  updateOrgLocation         OrgLocation[]         @relation("updateOrgLocation")
  createOrgNotes            OrgNotes[]            @relation("createOrgNotes")
  updateOrgNotes            OrgNotes[]            @relation("updateOrgNotes")
  createOrgPhone            OrgPhone[]            @relation("createOrgPhone")
  updateOrgPhone            OrgPhone[]            @relation("updateOrgPhone")
  createOrgPhotos           OrgPhotos[]           @relation("createOrgPhotos")
  updateOrgPhotos           OrgPhotos[]           @relation("updateOrgPhotos")
  createPhoneType           PhoneType[]           @relation("createPhoneType")
  updatePhoneType           PhoneType[]           @relation("updatePhoneType")
  createOrgHours            OrgHours[]            @relation("createOrgHours")
  updateOrgHours            OrgHours[]            @relation("updateOrgHours")
  createOrgService          OrgService[]          @relation("createOrgService")
  updateOrgService          OrgService[]          @relation("updateOrgService")
  createOrgReview           OrgReview[]           @relation("createOrgReview")
  updateOrgReview           OrgReview[]           @relation("updateOrgReview")
  createServiceCategory     ServiceCategory[]     @relation("createServiceCategory")
  updateServiceCategory     ServiceCategory[]     @relation("updateServiceCategory")
  createServiceType         ServiceType[]         @relation("createServiceType")
  updateServiceType         ServiceType[]         @relation("updateServiceType")
  createOrgSocialMedia      OrgSocialMedia[]      @relation("createOrgSocialMedia")
  updateOrgSocialMedia      OrgSocialMedia[]      @relation("updateOrgSocialMedia")
  createOrgSource           OrgSource[]           @relation("createOrgSource")
  updateOrgSource           OrgSource[]           @relation("updateOrgSource")
  createCountry             Country[]             @relation("createCountry")
  updateCountry             Country[]             @relation("updateCountry")
  createCountryTranslation  CountryTranslation[]  @relation("createCountryTranslation")
  updateCountryTranslation  CountryTranslation[]  @relation("updateCountryTranslation")
  createGovDist             GovDist[]             @relation("createGovDist")
  updateGovDist             GovDist[]             @relation("updateGovDist")
  createLanguage            Language[]            @relation("createLanguage")
  updateLanguage            Language[]            @relation("updateLanguage")
  createTranslationCategory TranslationCategory[] @relation("createTranslationCategory")
  updateTranslationCategory TranslationCategory[] @relation("updateTranslationCategory")
  createTranslationItem     TranslationItem[]     @relation("createTranslationItem")
  updateTranslationItem     TranslationItem[]     @relation("updateTranslationItem")
  createTranslation         Translation[]         @relation("createTranslation")
  updateTranslation         Translation[]         @relation("updateTranslation")
  createSocialMediaService  SocialMediaService[]  @relation("createSocialMediaService")
  updateSocialMediaService  SocialMediaService[]  @relation("updateSocialMediaService")
  createUserRole            UserRole[]            @relation("createUserRole")
  updateUserRole            UserRole[]            @relation("updateUserRole")
  createUserPermission      UserPermission[]      @relation("createUserPermission")
  updateUserPermission      UserPermission[]      @relation("updateUserPermission")
  createTranslationVariable TranslationVariable[] @relation("createTranslationVariable")
  updateTranslationVariable TranslationVariable[] @relation("updateTranslationVariable")
}

model UserRole {
  id          String           @id @default(cuid()) @db.VarChar(32)
  name        String           @unique @db.VarChar(128)
  permissions UserPermission[]

  createdAt   DateTime @default(now())
  createdBy   User?    @relation("createUserRole", fields: [createdById], references: [id])
  createdById String?  @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User?    @relation("updateUserRole", fields: [updatedById], references: [id])
  updatedById String?  @db.VarChar(32)
  User        User[]
}

model UserPermission {
  id    String @id @default(cuid()) @db.VarChar(32)
  name  String @db.VarChar(32)
  users User[]

  createdAt   DateTime   @default(now())
  createdBy   User       @relation("createUserPermission", fields: [createdById], references: [id])
  createdById String     @db.VarChar(32)
  updatedAt   DateTime   @updatedAt
  updatedBy   User       @relation("updateUserPermission", fields: [updatedById], references: [id])
  updatedById String     @db.VarChar(32)
  UserRole    UserRole[]
}

model VerificationToken {
  // Do not change - NextAuth fields
  identifier String   @db.VarChar(128)
  token      String   @unique @db.VarChar(128)
  expires    DateTime

  @@unique([identifier, token])
}

model UserEthnicity {
  id        String @id @default(cuid()) @db.VarChar(32)
  ethnicity String @db.VarChar(128)
  users     User[]

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createUserEthnicity", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateUserEthnicity", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)

  @@unique([langId, ethnicity])
}

model UserImmigration {
  id     String @id @default(cuid()) @db.VarChar(32)
  status String @db.VarChar(128)
  users  User[]

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createUserImmigration", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateUserImmigration", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model UserSOG {
  id    String @id @default(cuid()) @db.VarChar(32)
  sog   String @db.VarChar(128)
  users User[]

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createUserSOG", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateUserSOG", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model UserType {
  id    String @id @default(cuid()) @db.VarChar(32)
  type  String @unique @db.VarChar(32)
  users User[]

  language Language? @relation(fields: [langId], references: [id])
  langId   String?   @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User?    @relation("createUserType", fields: [createdById], references: [id])
  createdById String?  @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User?    @relation("updateUserType", fields: [updatedById], references: [id])
  updatedById String?  @db.VarChar(32)
}

model UserTitle {
  id         String     @id @default(cuid()) @db.VarChar(32)
  text       String     @db.VarChar(128)
  email      OrgEmail[]
  orgUser    User[]
  searchable Boolean    @default(false)

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createUserTitle", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateUserTitle", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model UserCommunity {
  id        String @id @default(cuid()) @db.VarChar(32)
  community String @db.VarChar(128)
  users     User[]

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createUserCommunity", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateUserCommunity", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model UserList {
  id            String             @id @default(cuid()) @db.VarChar(32)
  name          String             @db.VarChar(128)
  organizations Organization[]
  visibility    UserListVisibility @default(PRIVATE)
  sharedWith    User[]             @relation("sharedLists")

  ownedBy   User   @relation("userList", fields: [ownedById], references: [id])
  ownedById String @db.VarChar(32)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserListVisibility {
  PRIVATE
  SHARED
  PUBLIC
}

model Organization {
  id             String           @id @default(cuid()) @db.VarChar(32)
  description    OrgDescription[]
  email          OrgEmail[]
  deleted        Boolean          @default(false)
  published      Boolean          @default(false)
  location       OrgLocation[]
  name           String           @db.VarChar(128)
  notes          OrgNotes[]
  owner          User[]
  phone          OrgPhone[]
  photos         OrgPhotos[]
  services       OrgService[]
  orgSocialMedia OrgSocialMedia[]
  userList       UserList[]

  source   OrgSource @relation(fields: [sourceId], references: [id])
  sourceId String    @db.VarChar(32)

  createdAt   DateTime    @default(now())
  createdBy   User        @relation("createOrganization", fields: [createdById], references: [id])
  createdById String      @db.VarChar(32)
  updatedAt   DateTime    @updatedAt
  updatedBy   User        @relation("updateOrganization", fields: [updatedById], references: [id])
  updatedById String      @db.VarChar(32)
  OrgReview   OrgReview[]
}

model OrgDescription {
  id   String @id @default(cuid()) @db.VarChar(32)
  text String

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String       @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createOrgDescription", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateOrgDescription", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)

  @@index([langId, orgId])
}

model OrgEmail {
  id        String  @id @default(cuid()) @db.VarChar(32)
  firstName String  @db.VarChar(128)
  lastName  String  @db.VarChar(128)
  primary   Boolean
  email     String  @db.VarChar(128)
  published Boolean @default(true)

  title   UserTitle @relation(fields: [titleId], references: [id])
  titleId String    @db.VarChar(32)

  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String       @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createOrgEmail", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateOrgEmail", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model OrgLocation {
  id      String @id @default(cuid()) @db.VarChar(32)
  street1 String @db.VarChar(128)
  street2 String @db.VarChar(128)
  city    String @db.VarChar(128)

  govDist   GovDist? @relation(fields: [govDistId], references: [id])
  govDistId String?  @db.VarChar(32)

  postCode String? @db.VarChar(10)

  country   Country @relation(fields: [countryId], references: [id])
  countryId String  @db.VarChar(32)

  longitude Decimal @db.Decimal(4, 3)
  latitude  Decimal @db.Decimal(4, 3)
  geoJSON   Json /// @zod.custom(imports.GeoJSONSchema)

  published Boolean    @default(true)
  hours     OrgHours[]

  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String       @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createOrgLocation", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateOrgLocation", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)

  @@index([latitude, longitude])
}

model OrgNotes {
  id   String @id @default(cuid()) @db.VarChar(32)
  text String

  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String       @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createOrgNotes", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateOrgNotes", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model OrgPhone {
  id        String  @id @default(cuid()) @db.VarChar(32)
  number    String  @db.VarChar(15)
  published Boolean @default(true)
  primary   Boolean

  phoneType   PhoneType @relation(fields: [phoneTypeId], references: [id])
  phoneTypeId String    @db.VarChar(32)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createOrgPhone", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateOrgPhone", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model OrgPhotos {
  id           String  @id @default(cuid()) @db.VarChar(32)
  foursquareId String? @db.VarChar(128)
  src          String  @db.VarChar(255)
  height       Int?    @db.SmallInt
  width        Int?    @db.SmallInt

  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String       @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createOrgPhotos", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateOrgPhotos", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model PhoneType {
  id       String     @id @default(cuid()) @db.VarChar(32)
  type     String     @db.VarChar(32)
  orgPhone OrgPhone[]

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createPhoneType", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updatePhoneType", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model OrgHours {
  id       String @id @default(cuid()) @db.VarChar(32)
  dayIndex Int    @default(0) @db.SmallInt // Sunday = 0
  start    Int    @default(0) @db.SmallInt // minutes
  end      Int    @default(1440) @db.SmallInt // minutes

  orgLocation OrgLocation? @relation(fields: [orgLocId], references: [id])
  orgLocId    String?      @db.VarChar(32)

  orgService   OrgService? @relation(fields: [orgServiceId], references: [id])
  orgServiceId String?     @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createOrgHours", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateOrgHours", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model OrgService {
  id                 String        @id @default(cuid()) @db.VarChar(32)
  published          Boolean
  accessInstructions String
  description        String
  hours              OrgHours[]
  service            ServiceType[]

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.VarChar(32)

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createOrgService", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateOrgService", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model OrgReview {
  id      String  @id @default(cuid()) @db.VarChar(32)
  rating  Int     @db.SmallInt
  comment String?
  visible Boolean @default(true)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.VarChar(32)

  // Optional: Review can be attached to a specific service.
  service   ServiceType? @relation(fields: [serviceId], references: [id])
  serviceId String?      @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createOrgReview", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateOrgReview", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model ServiceCategory {
  id       String        @id @default(cuid()) @db.VarChar(32)
  category String        @db.VarChar(32)
  services ServiceType[]

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createServiceCategory", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateServiceCategory", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model ServiceType {
  id   String @id @default(cuid()) @db.VarChar(32)
  type String @db.VarChar(32)

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  category   ServiceCategory @relation(fields: [categoryId], references: [id])
  categoryId String          @db.VarChar(32)

  orgServices OrgService[]
  OrgReview   OrgReview[]

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createServiceType", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateServiceType", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model OrgSocialMedia {
  id       String @id @default(cuid()) @db.VarChar(32)
  username String @db.VarChar(128)
  url      String @db.VarChar(128)

  service   SocialMediaService @relation(fields: [serviceId], references: [id])
  serviceId String             @db.VarChar(32)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createOrgSocialMedia", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateOrgSocialMedia", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model SocialMediaService {
  id       String @id @default(cuid()) @db.VarChar(32)
  name     String @db.VarChar(32)
  urlBase  String @db.VarChar(32)
  logoIcon String @db.VarChar(32)

  orgSocialMedia OrgSocialMedia[]

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createSocialMediaService", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateSocialMediaService", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model OrgSource {
  id     String @id @default(cuid()) @db.VarChar(32)
  source String @db.VarChar(128)

  organization Organization[]

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createOrgSource", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateOrgSource", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model Country {
  id          String  @id @default(cuid()) @db.VarChar(32)
  cca3        String  @unique @db.Char(3)
  name        String  @db.VarChar(255)
  govDistName String? @db.VarChar(32)
  dialCode    String  @db.VarChar(10)
  flag        String  @db.VarChar(10)

  countryTranslation CountryTranslation[]
  GovDist            GovDist[]

  orgAddress OrgLocation[]
  users      User[]

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createCountry", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateCountry", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

model CountryTranslation {
  id          String  @id @default(cuid()) @db.VarChar(32)
  name        String  @db.VarChar(255)
  govDistName String? @db.VarChar(32)

  country   Country @relation(fields: [countryId], references: [id])
  countryId String  @db.VarChar(32)

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createCountryTranslation", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateCountryTranslation", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)

  @@unique([countryId, langId])
  @@index([langId])
}

model GovDist {
  id   String @id @default(cuid()) @db.VarChar(32)
  name String @db.VarChar(128)

  country   Country @relation(fields: [countryId], references: [id])
  countryId String  @db.VarChar(32)

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  OrgLocation OrgLocation[]

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createGovDist", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateGovDist", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)

  @@index([countryId, langId])
}

model Language {
  id           String  @id @default(cuid()) @db.VarChar(32)
  languageName String  @db.VarChar(32)
  localeCode   String  @unique @db.VarChar(7)
  iso6392      String? @db.Char(3)
  nativeName   String  @db.VarChar(32)

  // fields using records
  translations       Translation[]
  orgDescriptions    OrgDescription[]
  userTitle          UserTitle[]
  ServiceCategory    ServiceCategory[]
  PhoneType          PhoneType[]
  ServiceType        ServiceType[]
  CountryTranslation CountryTranslation[]
  OrgService         OrgService[]
  UserEthnicity      UserEthnicity[]
  UserSOG            UserSOG[]
  UserType           UserType[]
  UserImmigration    UserImmigration[]
  GovDist            GovDist[]
  UserCommunity      UserCommunity[]
  User               User[]

  createdAt   DateTime @default(now())
  createdBy   User?    @relation("createLanguage", fields: [createdById], references: [id])
  createdById String?  @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User?    @relation("updateLanguage", fields: [updatedById], references: [id])
  updatedById String?  @db.VarChar(32)
}

//
// Translation tables for text content.
//

// Top level category
model TranslationCategory {
  id       String @id @default(uuid())
  category String @unique @db.VarChar(16)

  translations Translation[]
  item         TranslationItem[]

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createTranslationCategory", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateTranslationCategory", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

// Tag identifier
model TranslationItem {
  id           String              @id @default(uuid())
  tagName      String              @db.VarChar(128)
  category     TranslationCategory @relation(fields: [categoryId], references: [id])
  categoryId   String              @db.VarChar(32)
  translations Translation[]

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createTranslationItem", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateTranslationItem", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)

  @@unique([tagName, categoryId])
}

// Translation of category & tag
model Translation {
  id   String @id @default(uuid())
  text String

  language Language @relation(fields: [langId], references: [id])
  langId   String   @db.VarChar(32)

  category   TranslationCategory @relation(fields: [categoryId], references: [id])
  categoryId String              @db.VarChar(32)

  item   TranslationItem @relation(fields: [itemId], references: [id])
  itemId String          @db.VarChar(32)

  // associate variables to be used in translation (for dynamic content [plurals, ordinals, etc])
  // example: "You have {#) new {message}" where {message} could be plural
  variables TranslationVariable[]
  isBase    Boolean               @default(true)
  useDigits Boolean               @default(false)

  // to manage plurals & ordinals
  children Translation[] @relation("translationSubItems")
  parent   Translation?  @relation("translationSubItems", fields: [parentId], references: [id])
  parentId String?       @db.VarChar(32)

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createTranslation", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateTranslation", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}

// define variables to be used in translations
model TranslationVariable {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(32)
  description String  @db.VarChar(128)
  plural      Boolean @default(false)
  ordinal     Boolean @default(false)

  translation Translation[]

  createdAt   DateTime @default(now())
  createdBy   User     @relation("createTranslationVariable", fields: [createdById], references: [id])
  createdById String   @db.VarChar(32)
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateTranslationVariable", fields: [updatedById], references: [id])
  updatedById String   @db.VarChar(32)
}
