// schemas/actions/setSlugAndPublishAction.js

import { groq } from "next-sanity";
import { useState, useEffect } from "react";
import { DocumentActionComponent, useDocumentOperation } from "sanity";
import { getClient } from "../lib/sanity.server.js";
import slugify from "slugify";

// Generated by https://quicktype.io

type MainPageIDQuery = {
	result: {
		frontpage: {
			_id: string;
		};
	};
};

export const SetSlugAndPublishAction: DocumentActionComponent = (props) => {
	const { patch, publish } = useDocumentOperation(props.id, props.type);
	const [isPublishing, setIsPublishing] = useState(false);

	useEffect(() => {
		// if the isPublishing state was set to true and the draft has changed
		// to become `null` the document has been published
		if (isPublishing && !props.draft) {
			setIsPublishing(false);
		}
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [props.draft]);

	return {
		disabled: publish.disabled,
		label: isPublishing ? "Publishingâ€¦" : "Publish",
		onHandle: async () => {
			// This will update the button text
			setIsPublishing(true);

			const client = getClient(false);
			/// Set the initial slug value to the title field
			let slug = props.draft?.title;

			/// Set the slug based on the document type
			switch (props.type) {
				case "page":
					/* Get the id of the page that is being published. */
					const pageId = props.id;

					/* Get the id of the main page setting */
					const mainPageQuery = groq`
					*[_type == 'site-config'][0] {
					  frontpage -> {
					    _id
					  }
					}
					`;
					const { result: queryResult } = await client.fetch<MainPageIDQuery>(
						mainPageQuery
					);

					const mainPageId = queryResult.frontpage._id;

					slug = pageId === mainPageId ? "/" : slugify();

					// /// The type of the reference field to get the value from
					// const referenceNameType = "category";
					// /// Query for the referenced "category" and return the "name" field of that referenced document
					// const query = `*[_type == "${referenceNameType}" && _id == $nameRef][0] {name}`;
					// /// Start with the "category: reference id in the draft
					// let referenceName = props.draft.category._ref;
					// /// Fetch the category referenced in this document
					// await client
					// 	.fetch(query, { nameRef: referenceName })
					// 	.then((category) => {
					// 		/// Set the referenceName to the category.name field
					// 		referenceName = !!category ? category.name : referenceName;
					// 	});

					// /// For the "tag" type document, set the slug to [category.name]-[type]-[number]
					slug = `${referenceName}-${props.type}-${props.draft.number}`;
					/// Set name field for the "tag" type document to be the same value as the slug
					patch.execute([{ set: { name: slug.toLowerCase() } }]);
					break;

				default:
					/// Doing nothing? Consider deleting this switch statement to simplify your code.
					break;
			}

			/// Set the slug field of this document
			patch.execute([
				{ set: { slug: { _type: "slug", current: slug.toLowerCase() } } },
			]);

			// Perform the publish
			publish.execute();

			// Signal that the action is completed
			props.onComplete();
		},
	};
};
